
RideHeightSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e90  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003f9c  08003f9c  00004f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004028  08004028  00006030  2**0
                  CONTENTS
  4 .ARM          00000000  08004028  08004028  00006030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004028  08004028  00006030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004028  08004028  00005028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800402c  0800402c  0000502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08004030  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000030  08004060  00006030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004060  000061c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5c7  00000000  00000000  00006059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b56  00000000  00000000  00012620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00014178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab6  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d82  00000000  00000000  000159ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edcb  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087411  00000000  00000000  0003b51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c292c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  000c2970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000c6484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f84 	.word	0x08003f84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003f84 	.word	0x08003f84

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 ff29 	bl	80014a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f8b3 	bl	80007bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f9d3 	bl	8000a00 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065a:	f000 f92b 	bl	80008b4 <MX_I2C1_Init>
  MX_CAN_Init();
 800065e:	f000 f8f3 	bl	8000848 <MX_CAN_Init>
  MX_TIM1_Init();
 8000662:	f000 f97d 	bl	8000960 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ADS1119_Reset(&hi2c1);
 8000666:	4849      	ldr	r0, [pc, #292]	@ (800078c <main+0x144>)
 8000668:	f000 fa24 	bl	8000ab4 <ADS1119_Reset>
  ADS1119_Start(&hi2c1);
 800066c:	4847      	ldr	r0, [pc, #284]	@ (800078c <main+0x144>)
 800066e:	f000 fa38 	bl	8000ae2 <ADS1119_Start>

  HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f000 ff78 	bl	8001568 <HAL_Delay>

  //HAL_CAN_Stop(&hcan);
  HAL_CAN_Start(&hcan);
 8000678:	4845      	ldr	r0, [pc, #276]	@ (8000790 <main+0x148>)
 800067a:	f001 f894 	bl	80017a6 <HAL_CAN_Start>

  // Start TIM1 in interrupt mode
  HAL_TIM_Base_Start_IT(&htim1);
 800067e:	4845      	ldr	r0, [pc, #276]	@ (8000794 <main+0x14c>)
 8000680:	f003 f8c8 	bl	8003814 <HAL_TIM_Base_Start_IT>


  while (1) {
      uint32_t start, end;

      if (flag_1ms) {
 8000684:	4b44      	ldr	r3, [pc, #272]	@ (8000798 <main+0x150>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d018      	beq.n	80006c0 <main+0x78>
          flag_1ms = 0;
 800068e:	4b42      	ldr	r3, [pc, #264]	@ (8000798 <main+0x150>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
          start = SysTick->VAL;
 8000694:	4b41      	ldr	r3, [pc, #260]	@ (800079c <main+0x154>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	607b      	str	r3, [r7, #4]

          // 1ms tasks here

          end = SysTick->VAL;
 800069a:	4b40      	ldr	r3, [pc, #256]	@ (800079c <main+0x154>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	603b      	str	r3, [r7, #0]
          exec_time_1ms = SYSTICK_DIFF(start, end);
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d303      	bcc.n	80006b0 <main+0x68>
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	e005      	b.n	80006bc <main+0x74>
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <main+0x154>)
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	1ad2      	subs	r2, r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <main+0x158>)
 80006be:	6013      	str	r3, [r2, #0]
      }

      if (flag_10ms) {
 80006c0:	4b38      	ldr	r3, [pc, #224]	@ (80007a4 <main+0x15c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d022      	beq.n	8000710 <main+0xc8>
          flag_10ms = 0;
 80006ca:	4b36      	ldr	r3, [pc, #216]	@ (80007a4 <main+0x15c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
          start = SysTick->VAL;
 80006d0:	4b32      	ldr	r3, [pc, #200]	@ (800079c <main+0x154>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	607b      	str	r3, [r7, #4]

          // 10ms tasks
          Analog_Read_ALL();
 80006d6:	f000 fa7b 	bl	8000bd0 <Analog_Read_ALL>
          ConvertAllAdcToMillivolts();
 80006da:	f000 fb7f 	bl	8000ddc <ConvertAllAdcToMillivolts>
          ConvertMilliVoltsToDistance();
 80006de:	f000 fbd9 	bl	8000e94 <ConvertMilliVoltsToDistance>
          ConvertMilliVoltsToTemperature();
 80006e2:	f000 fbf9 	bl	8000ed8 <ConvertMilliVoltsToTemperature>
          SendMainDataToCan();
 80006e6:	f000 fca5 	bl	8001034 <SendMainDataToCan>

          end = SysTick->VAL;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <main+0x154>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	603b      	str	r3, [r7, #0]
          exec_time_10ms = SYSTICK_DIFF(start, end);
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d303      	bcc.n	8000700 <main+0xb8>
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	e005      	b.n	800070c <main+0xc4>
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <main+0x154>)
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	1ad2      	subs	r2, r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	4a26      	ldr	r2, [pc, #152]	@ (80007a8 <main+0x160>)
 800070e:	6013      	str	r3, [r2, #0]
      }

      if (flag_100ms) {
 8000710:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <main+0x164>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d018      	beq.n	800074c <main+0x104>
          flag_100ms = 0;
 800071a:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <main+0x164>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
          start = SysTick->VAL;
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <main+0x154>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	607b      	str	r3, [r7, #4]

          // 100ms tasks

          end = SysTick->VAL;
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <main+0x154>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	603b      	str	r3, [r7, #0]
          exec_time_100ms = SYSTICK_DIFF(start, end);
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d303      	bcc.n	800073c <main+0xf4>
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	e005      	b.n	8000748 <main+0x100>
 800073c:	4b17      	ldr	r3, [pc, #92]	@ (800079c <main+0x154>)
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <main+0x168>)
 800074a:	6013      	str	r3, [r2, #0]
      }

      if (flag_1000ms) {
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <main+0x16c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d096      	beq.n	8000684 <main+0x3c>
          flag_1000ms = 0;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <main+0x16c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
          start = SysTick->VAL;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <main+0x154>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	607b      	str	r3, [r7, #4]

          // 1 second tasks

          end = SysTick->VAL;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <main+0x154>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	603b      	str	r3, [r7, #0]
          exec_time_1000ms = SYSTICK_DIFF(start, end);
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d303      	bcc.n	8000778 <main+0x130>
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	e005      	b.n	8000784 <main+0x13c>
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <main+0x154>)
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <main+0x170>)
 8000786:	6013      	str	r3, [r2, #0]
  while (1) {
 8000788:	e77c      	b.n	8000684 <main+0x3c>
 800078a:	bf00      	nop
 800078c:	20000074 	.word	0x20000074
 8000790:	2000004c 	.word	0x2000004c
 8000794:	200000c8 	.word	0x200000c8
 8000798:	20000110 	.word	0x20000110
 800079c:	e000e010 	.word	0xe000e010
 80007a0:	20000118 	.word	0x20000118
 80007a4:	20000111 	.word	0x20000111
 80007a8:	2000011c 	.word	0x2000011c
 80007ac:	20000112 	.word	0x20000112
 80007b0:	20000120 	.word	0x20000120
 80007b4:	20000113 	.word	0x20000113
 80007b8:	20000124 	.word	0x20000124

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b090      	sub	sp, #64	@ 0x40
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2228      	movs	r2, #40	@ 0x28
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fbae 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fbb6 	bl	8002f78 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000812:	f000 fcfb 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fe23 	bl	800347c <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800083c:	f000 fce6 	bl	800120c <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3740      	adds	r7, #64	@ 0x40
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_CAN_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_CAN_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_CAN_Init+0x64>)
 8000854:	2203      	movs	r2, #3
 8000856:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_CAN_Init+0x64>)
 800085a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_CAN_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_CAN_Init+0x64>)
 8000868:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800086c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_CAN_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000874:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_CAN_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_CAN_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_CAN_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_CAN_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_CAN_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_CAN_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_CAN_Init+0x64>)
 800089a:	f000 fe89 	bl	80015b0 <HAL_CAN_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 fcb2 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000004c 	.word	0x2000004c
 80008b0:	40006400 	.word	0x40006400

080008b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]

	// Enable GPIO clock if not already
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_I2C1_Init+0x98>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a1f      	ldr	r2, [pc, #124]	@ (800094c <MX_I2C1_Init+0x98>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_I2C1_Init+0x98>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7; // SCL and SDA
 80008e0:	23c0      	movs	r3, #192	@ 0xc0
 80008e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	4816      	ldr	r0, [pc, #88]	@ (8000950 <MX_I2C1_Init+0x9c>)
 80008f8:	f001 f976 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_I2C1_Init+0xa0>)
 80008fe:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <MX_I2C1_Init+0xa4>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_I2C1_Init+0xa0>)
 8000904:	4a15      	ldr	r2, [pc, #84]	@ (800095c <MX_I2C1_Init+0xa8>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_I2C1_Init+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_I2C1_Init+0xa0>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_I2C1_Init+0xa0>)
 8000916:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800091a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <MX_I2C1_Init+0xa0>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_I2C1_Init+0xa0>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <MX_I2C1_Init+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_I2C1_Init+0xa0>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <MX_I2C1_Init+0xa0>)
 8000936:	f001 faeb 	bl	8001f10 <HAL_I2C_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x90>
  {
    Error_Handler();
 8000940:	f000 fc64 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	40010c00 	.word	0x40010c00
 8000954:	20000074 	.word	0x20000074
 8000958:	40005400 	.word	0x40005400
 800095c:	000186a0 	.word	0x000186a0

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_TIM1_Init+0x98>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	@ (80009fc <MX_TIM1_Init+0x9c>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_TIM1_Init+0x98>)
 8000984:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000988:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_TIM1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <MX_TIM1_Init+0x98>)
 8000992:	2209      	movs	r2, #9
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_TIM1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_TIM1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a8:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009aa:	f002 fee3 	bl	8003774 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 fc2a 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009c6:	f003 f861 	bl	8003a8c <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009d0:	f000 fc1c 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_TIM1_Init+0x98>)
 80009e2:	f003 fa39 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009ec:	f000 fc0e 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000c8 	.word	0x200000c8
 80009fc:	40012c00 	.word	0x40012c00

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_GPIO_Init+0xa8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8000a62:	4812      	ldr	r0, [pc, #72]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a64:	f001 fa3c 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5;
 8000a68:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480a      	ldr	r0, [pc, #40]	@ (8000aac <MX_GPIO_Init+0xac>)
 8000a82:	f001 f8b1 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_GPIO_Init+0xb0>)
 8000a9c:	f001 f8a4 	bl	8001be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	40010800 	.word	0x40010800

08000ab4 <ADS1119_Reset>:

/* USER CODE BEGIN 4 */

void ADS1119_Reset(I2C_HandleTypeDef *hi2c){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	6078      	str	r0, [r7, #4]
    uint8_t reset_cmd = ADS1119_CMD_RESET;
 8000abc:	2306      	movs	r3, #6
 8000abe:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(hi2c, ADS1119_ADDR, &reset_cmd, 1, HAL_MAX_DELAY);
 8000ac0:	f107 020f 	add.w	r2, r7, #15
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	2180      	movs	r1, #128	@ 0x80
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f001 fb62 	bl	8002198 <HAL_I2C_Master_Transmit>

    HAL_Delay(5);  // Allow reset time
 8000ad4:	2005      	movs	r0, #5
 8000ad6:	f000 fd47 	bl	8001568 <HAL_Delay>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <ADS1119_Start>:


void ADS1119_Start(I2C_HandleTypeDef *hi2c){
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	6078      	str	r0, [r7, #4]
    // 3. Start conversion
    uint8_t start_cmd = ADS1119_CMD_START;
 8000aea:	2308      	movs	r3, #8
 8000aec:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(hi2c, ADS1119_ADDR, &start_cmd, 1, HAL_MAX_DELAY);
 8000aee:	f107 020f 	add.w	r2, r7, #15
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2301      	movs	r3, #1
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f001 fb4b 	bl	8002198 <HAL_I2C_Master_Transmit>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <ADS1119_Config>:

void ADS1119_Config(I2C_HandleTypeDef *hi2c, int port_number){
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af02      	add	r7, sp, #8
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]

	   // 2. Configure for AIN0-AIN1, gain = 1, 20SPS, continuous, internal ref
	    uint8_t config_data[2] ;
	    config_data[0] = ADS1119_REG_CONFIG;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	733b      	strb	r3, [r7, #12]

	    if (port_number==0)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <ADS1119_Config+0x18>
	    	config_data[1] = CONFIG_AIN0;
 8000b1e:	236e      	movs	r3, #110	@ 0x6e
 8000b20:	737b      	strb	r3, [r7, #13]
	    if (port_number==1)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d101      	bne.n	8000b2c <ADS1119_Config+0x22>
			config_data[1] = CONFIG_AIN1;
 8000b28:	238e      	movs	r3, #142	@ 0x8e
 8000b2a:	737b      	strb	r3, [r7, #13]
	    if (port_number==2)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d101      	bne.n	8000b36 <ADS1119_Config+0x2c>
			config_data[1] = CONFIG_AIN2;
 8000b32:	23ae      	movs	r3, #174	@ 0xae
 8000b34:	737b      	strb	r3, [r7, #13]
	    if (port_number==3)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d101      	bne.n	8000b40 <ADS1119_Config+0x36>
			config_data[1] = CONFIG_AIN3;
 8000b3c:	23ce      	movs	r3, #206	@ 0xce
 8000b3e:	737b      	strb	r3, [r7, #13]

	    HAL_I2C_Master_Transmit(hi2c, ADS1119_ADDR, config_data, 2, HAL_MAX_DELAY);
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f001 fb22 	bl	8002198 <HAL_I2C_Master_Transmit>

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <ADS1119_Read>:

int16_t ADS1119_Read(I2C_HandleTypeDef *hi2c) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t data[2];

    // 5. Read conversion result
    uint8_t read_cmd = ADS1119_CMD_READ;
 8000b64:	2310      	movs	r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
    ret = HAL_I2C_Master_Transmit(hi2c, ADS1119_ADDR, &read_cmd, 1, HAL_MAX_DELAY);
 8000b68:	f107 020f 	add.w	r2, r7, #15
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	2180      	movs	r1, #128	@ 0x80
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f001 fb0e 	bl	8002198 <HAL_I2C_Master_Transmit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) return -10003;
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <ADS1119_Read+0x2e>
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <ADS1119_Read+0x6c>)
 8000b88:	e019      	b.n	8000bbe <ADS1119_Read+0x62>

    ret = HAL_I2C_Master_Receive(hi2c, ADS1119_ADDR, data, 2, HAL_MAX_DELAY);
 8000b8a:	f107 0210 	add.w	r2, r7, #16
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2302      	movs	r3, #2
 8000b96:	2180      	movs	r1, #128	@ 0x80
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f001 fbfb 	bl	8002394 <HAL_I2C_Master_Receive>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) return -10004;
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <ADS1119_Read+0x50>
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <ADS1119_Read+0x70>)
 8000baa:	e008      	b.n	8000bbe <ADS1119_Read+0x62>

    int16_t adc_result = (data[0] << 8) | data[1];
 8000bac:	7c3b      	ldrb	r3, [r7, #16]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	7c7b      	ldrb	r3, [r7, #17]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	82bb      	strh	r3, [r7, #20]
    return adc_result;
 8000bba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	ffffd8ed 	.word	0xffffd8ed
 8000bcc:	ffffd8ec 	.word	0xffffd8ec

08000bd0 <Analog_Read_ALL>:

void Analog_Read_ALL(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0


	ADS1119_Config(&hi2c1,0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	484e      	ldr	r0, [pc, #312]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000bd8:	f7ff ff97 	bl	8000b0a <ADS1119_Config>
	ADS1119_Start(&hi2c1);
 8000bdc:	484c      	ldr	r0, [pc, #304]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000bde:	f7ff ff80 	bl	8000ae2 <ADS1119_Start>

	SetMUX(0b00000000);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f89e 	bl	8000d24 <SetMUX>
    adc_analog_in_raw[0] = ADS1119_Read(&hi2c1); 	//ADC1
 8000be8:	4849      	ldr	r0, [pc, #292]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000bea:	f7ff ffb7 	bl	8000b5c <ADS1119_Read>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b48      	ldr	r3, [pc, #288]	@ (8000d14 <Analog_Read_ALL+0x144>)
 8000bf4:	801a      	strh	r2, [r3, #0]

    SetMUX(0b00000101);
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f000 f894 	bl	8000d24 <SetMUX>
    // NC

    SetMUX(0b00001010);
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f000 f891 	bl	8000d24 <SetMUX>
    pt_analog_in_raw[0] = ADS1119_Read(&hi2c1); 	//PT1
 8000c02:	4843      	ldr	r0, [pc, #268]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c04:	f7ff ffaa 	bl	8000b5c <ADS1119_Read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b42      	ldr	r3, [pc, #264]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000c0e:	801a      	strh	r2, [r3, #0]

    SetMUX(0b00001111);
 8000c10:	200f      	movs	r0, #15
 8000c12:	f000 f887 	bl	8000d24 <SetMUX>
    adc_analog_in_raw[1] = ADS1119_Read(&hi2c1); 	//ADC2
 8000c16:	483e      	ldr	r0, [pc, #248]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c18:	f7ff ffa0 	bl	8000b5c <ADS1119_Read>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <Analog_Read_ALL+0x144>)
 8000c22:	805a      	strh	r2, [r3, #2]



	ADS1119_Config(&hi2c1,1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	483a      	ldr	r0, [pc, #232]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c28:	f7ff ff6f 	bl	8000b0a <ADS1119_Config>
	ADS1119_Start(&hi2c1);
 8000c2c:	4838      	ldr	r0, [pc, #224]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c2e:	f7ff ff58 	bl	8000ae2 <ADS1119_Start>

	SetMUX(0b00000000);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f876 	bl	8000d24 <SetMUX>
	pt_analog_in_raw[1] = ADS1119_Read(&hi2c1);	//PT2
 8000c38:	4835      	ldr	r0, [pc, #212]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c3a:	f7ff ff8f 	bl	8000b5c <ADS1119_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000c44:	805a      	strh	r2, [r3, #2]

    SetMUX(0b00000101);
 8000c46:	2005      	movs	r0, #5
 8000c48:	f000 f86c 	bl	8000d24 <SetMUX>
    pt_analog_in_raw[7] = ADS1119_Read(&hi2c1);	//PT8
 8000c4c:	4830      	ldr	r0, [pc, #192]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c4e:	f7ff ff85 	bl	8000b5c <ADS1119_Read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b30      	ldr	r3, [pc, #192]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000c58:	81da      	strh	r2, [r3, #14]

    SetMUX(0b00001010);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f000 f862 	bl	8000d24 <SetMUX>
    pt_analog_in_raw[3] = ADS1119_Read(&hi2c1);	//PT4
 8000c60:	482b      	ldr	r0, [pc, #172]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c62:	f7ff ff7b 	bl	8000b5c <ADS1119_Read>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000c6c:	80da      	strh	r2, [r3, #6]

    SetMUX(0b00001111);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f858 	bl	8000d24 <SetMUX>
    pt_analog_in_raw[5] = 0;//ADS1119_Read(&hi2c1,1);	//PT6 PCB ERROR NOT CONNECTED
 8000c74:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	815a      	strh	r2, [r3, #10]



	ADS1119_Config(&hi2c1,2);
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4824      	ldr	r0, [pc, #144]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c7e:	f7ff ff44 	bl	8000b0a <ADS1119_Config>
	ADS1119_Start(&hi2c1);
 8000c82:	4823      	ldr	r0, [pc, #140]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c84:	f7ff ff2d 	bl	8000ae2 <ADS1119_Start>

	SetMUX(0b00000000);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f84b 	bl	8000d24 <SetMUX>
	pt_analog_in_raw[2] = ADS1119_Read(&hi2c1);	//PT3
 8000c8e:	4820      	ldr	r0, [pc, #128]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000c90:	f7ff ff64 	bl	8000b5c <ADS1119_Read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000c9a:	809a      	strh	r2, [r3, #4]

    SetMUX(0b00000101);
 8000c9c:	2005      	movs	r0, #5
 8000c9e:	f000 f841 	bl	8000d24 <SetMUX>
    pt_analog_in_raw[4] = ADS1119_Read(&hi2c1);	//PT5
 8000ca2:	481b      	ldr	r0, [pc, #108]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000ca4:	f7ff ff5a 	bl	8000b5c <ADS1119_Read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000cae:	811a      	strh	r2, [r3, #8]

    SetMUX(0b00001010);
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f000 f837 	bl	8000d24 <SetMUX>
    pt_analog_in_raw[6] = ADS1119_Read(&hi2c1);	//PT7
 8000cb6:	4816      	ldr	r0, [pc, #88]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000cb8:	f7ff ff50 	bl	8000b5c <ADS1119_Read>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <Analog_Read_ALL+0x148>)
 8000cc2:	819a      	strh	r2, [r3, #12]

    SetMUX(0b00001111);
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	f000 f82d 	bl	8000d24 <SetMUX>
    height_left_analog_in_raw = ADS1119_Read(&hi2c1);//Height Left
 8000cca:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000ccc:	f7ff ff46 	bl	8000b5c <ADS1119_Read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <Analog_Read_ALL+0x14c>)
 8000cd6:	801a      	strh	r2, [r3, #0]


	ADS1119_Config(&hi2c1,3);
 8000cd8:	2103      	movs	r1, #3
 8000cda:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000cdc:	f7ff ff15 	bl	8000b0a <ADS1119_Config>
	ADS1119_Start(&hi2c1);
 8000ce0:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000ce2:	f7ff fefe 	bl	8000ae2 <ADS1119_Start>

	SetMUX(0b00000000);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f81c 	bl	8000d24 <SetMUX>
	// NC

    SetMUX(0b00000101);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f000 f819 	bl	8000d24 <SetMUX>
    height_right_analog_in_raw = ADS1119_Read(&hi2c1);//Height Right
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <Analog_Read_ALL+0x140>)
 8000cf4:	f7ff ff32 	bl	8000b5c <ADS1119_Read>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <Analog_Read_ALL+0x150>)
 8000cfe:	801a      	strh	r2, [r3, #0]

    SetMUX(0b00001010);
 8000d00:	200a      	movs	r0, #10
 8000d02:	f000 f80f 	bl	8000d24 <SetMUX>
    // NC

    SetMUX(0b00001111);
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f80c 	bl	8000d24 <SetMUX>
    // NC

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000074 	.word	0x20000074
 8000d14:	2000015c 	.word	0x2000015c
 8000d18:	2000014c 	.word	0x2000014c
 8000d1c:	20000162 	.word	0x20000162
 8000d20:	20000160 	.word	0x20000160

08000d24 <SetMUX>:

void SetMUX(uint8_t mux_value) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
    // Extract each bit from the mux_value
    uint8_t mux1_a0 = (mux_value >> 0) & 0x01;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	72fb      	strb	r3, [r7, #11]
    uint8_t mux1_a1 = (mux_value >> 1) & 0x01;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	085b      	lsrs	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	72bb      	strb	r3, [r7, #10]
    uint8_t mux2_a0 = (mux_value >> 2) & 0x01;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	727b      	strb	r3, [r7, #9]
    uint8_t mux2_a1 = (mux_value >> 3) & 0x01;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	723b      	strb	r3, [r7, #8]

    // Set the GPIOs accordingly
    HAL_GPIO_WritePin(GPIOB, MUX1_A0_B, mux1_a0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2120      	movs	r1, #32
 8000d6a:	481b      	ldr	r0, [pc, #108]	@ (8000dd8 <SetMUX+0xb4>)
 8000d6c:	f001 f8b8 	bl	8001ee0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MUX1_A1_B, mux1_a1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d70:	7abb      	ldrb	r3, [r7, #10]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	bf14      	ite	ne
 8000d76:	2301      	movne	r3, #1
 8000d78:	2300      	moveq	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <SetMUX+0xb4>)
 8000d82:	f001 f8ad 	bl	8001ee0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MUX2_A0_B, mux2_a0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d86:	7a7b      	ldrb	r3, [r7, #9]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <SetMUX+0xb4>)
 8000d9a:	f001 f8a1 	bl	8001ee0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MUX2_A1_B, mux2_a1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d9e:	7a3b      	ldrb	r3, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db0:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <SetMUX+0xb4>)
 8000db2:	f001 f895 	bl	8001ee0 <HAL_GPIO_WritePin>

    for(int i = 0; i<10000; i++){ // at least 8000
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e003      	b.n	8000dc4 <SetMUX+0xa0>
    	//empty loop to allow time for MUX to set
    	__NOP();
 8000dbc:	bf00      	nop
    for(int i = 0; i<10000; i++){ // at least 8000
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	ddf6      	ble.n	8000dbc <SetMUX+0x98>
    }

}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <ConvertAllAdcToMillivolts>:

void ConvertAllAdcToMillivolts(void) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
    // Convert PT analog inputs (8 channels)
    for(int i = 0; i < 8; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e010      	b.n	8000e0a <ConvertAllAdcToMillivolts+0x2e>
        pt_analog_in_mv[i] = pt_analog_in_raw[i] / 16;
 8000de8:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <ConvertAllAdcToMillivolts+0x98>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da00      	bge.n	8000df6 <ConvertAllAdcToMillivolts+0x1a>
 8000df4:	330f      	adds	r3, #15
 8000df6:	111b      	asrs	r3, r3, #4
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <ConvertAllAdcToMillivolts+0x9c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < 8; i++) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	ddeb      	ble.n	8000de8 <ConvertAllAdcToMillivolts+0xc>
    }

    // Convert ADC analog inputs (2 channels)
    for(int i = 0; i < 2; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	e010      	b.n	8000e38 <ConvertAllAdcToMillivolts+0x5c>
        adc_analog_in_mv[i] = adc_analog_in_raw[i] / 16;
 8000e16:	4a19      	ldr	r2, [pc, #100]	@ (8000e7c <ConvertAllAdcToMillivolts+0xa0>)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da00      	bge.n	8000e24 <ConvertAllAdcToMillivolts+0x48>
 8000e22:	330f      	adds	r3, #15
 8000e24:	111b      	asrs	r3, r3, #4
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4a15      	ldr	r2, [pc, #84]	@ (8000e80 <ConvertAllAdcToMillivolts+0xa4>)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < 2; i++) {
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	ddeb      	ble.n	8000e16 <ConvertAllAdcToMillivolts+0x3a>
    }

    // Convert height sensors
    height_right_analog_in_mv = height_right_analog_in_raw / 16;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <ConvertAllAdcToMillivolts+0xa8>)
 8000e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da00      	bge.n	8000e4a <ConvertAllAdcToMillivolts+0x6e>
 8000e48:	330f      	adds	r3, #15
 8000e4a:	111b      	asrs	r3, r3, #4
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <ConvertAllAdcToMillivolts+0xac>)
 8000e52:	601a      	str	r2, [r3, #0]
    height_left_analog_in_mv = height_left_analog_in_raw / 16;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <ConvertAllAdcToMillivolts+0xb0>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	da00      	bge.n	8000e60 <ConvertAllAdcToMillivolts+0x84>
 8000e5e:	330f      	adds	r3, #15
 8000e60:	111b      	asrs	r3, r3, #4
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <ConvertAllAdcToMillivolts+0xb4>)
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	2000014c 	.word	0x2000014c
 8000e78:	20000164 	.word	0x20000164
 8000e7c:	2000015c 	.word	0x2000015c
 8000e80:	20000184 	.word	0x20000184
 8000e84:	20000160 	.word	0x20000160
 8000e88:	2000018c 	.word	0x2000018c
 8000e8c:	20000162 	.word	0x20000162
 8000e90:	20000190 	.word	0x20000190

08000e94 <ConvertMilliVoltsToDistance>:
    // Which simplifies to: raw_value / 16
    return (int32_t)raw_value / 16;
    // Or even simpler: return raw_value / 16;
}

void ConvertMilliVoltsToDistance(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    distance_right_mm = LookupWithInterpolation(&height_right_table, height_right_analog_in_mv);
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <ConvertMilliVoltsToDistance+0x2c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <ConvertMilliVoltsToDistance+0x30>)
 8000ea0:	f000 f83e 	bl	8000f20 <LookupWithInterpolation>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <ConvertMilliVoltsToDistance+0x34>)
 8000ea8:	6013      	str	r3, [r2, #0]
    distance_left_mm = LookupWithInterpolation(&height_left_table, height_left_analog_in_mv);
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <ConvertMilliVoltsToDistance+0x38>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <ConvertMilliVoltsToDistance+0x3c>)
 8000eb2:	f000 f835 	bl	8000f20 <LookupWithInterpolation>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a06      	ldr	r2, [pc, #24]	@ (8000ed4 <ConvertMilliVoltsToDistance+0x40>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000018c 	.word	0x2000018c
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000194 	.word	0x20000194
 8000ecc:	20000190 	.word	0x20000190
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	20000198 	.word	0x20000198

08000ed8 <ConvertMilliVoltsToTemperature>:

void ConvertMilliVoltsToTemperature(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
    for(int i = 0; i < 8; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	e00f      	b.n	8000f04 <ConvertMilliVoltsToTemperature+0x2c>
        pt_analog_in_temp[i] = LookupWithInterpolation(&temp_table, pt_analog_in_mv[i]);
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <ConvertMilliVoltsToTemperature+0x3c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	4619      	mov	r1, r3
 8000eee:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <ConvertMilliVoltsToTemperature+0x40>)
 8000ef0:	f000 f816 	bl	8000f20 <LookupWithInterpolation>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4909      	ldr	r1, [pc, #36]	@ (8000f1c <ConvertMilliVoltsToTemperature+0x44>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < 8; i++) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3301      	adds	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b07      	cmp	r3, #7
 8000f08:	ddec      	ble.n	8000ee4 <ConvertMilliVoltsToTemperature+0xc>
    }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000164 	.word	0x20000164
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	2000019c 	.word	0x2000019c

08000f20 <LookupWithInterpolation>:


float LookupWithInterpolation(const LookupTable_t *table, int32_t input) {
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
    // Check for input below table range
    if(input <= table->input_values[0]) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dc03      	bgt.n	8000f3e <LookupWithInterpolation+0x1e>
        return table->output_values[0];
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	e075      	b.n	800102a <LookupWithInterpolation+0x10a>
    }

    // Check for input above table range
    if(input >= table->input_values[table->size-1]) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7a1b      	ldrb	r3, [r3, #8]
 8000f46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	db0a      	blt.n	8000f6e <LookupWithInterpolation+0x4e>
        return table->output_values[table->size-1];
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7a1b      	ldrb	r3, [r3, #8]
 8000f60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000f64:	3b01      	subs	r3, #1
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	e05d      	b.n	800102a <LookupWithInterpolation+0x10a>
    }

    // Find the interval where input lies
    uint8_t i;
    for(i = 0; i < table->size-1; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e00c      	b.n	8000f8e <LookupWithInterpolation+0x6e>
        if(input < table->input_values[i+1]) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	db09      	blt.n	8000f9c <LookupWithInterpolation+0x7c>
    for(i = 0; i < table->size-1; i++) {
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a1b      	ldrb	r3, [r3, #8]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbec      	blt.n	8000f74 <LookupWithInterpolation+0x54>
 8000f9a:	e000      	b.n	8000f9e <LookupWithInterpolation+0x7e>
            break;
 8000f9c:	bf00      	nop
        }
    }

    // Linear interpolation
    float slope = (table->output_values[i+1] - table->output_values[i]) /
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff f8cb 	bl	8000154 <__aeabi_fsub>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461c      	mov	r4, r3
                  (float)(table->input_values[i+1] - table->input_values[i]);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6819      	ldr	r1, [r3, #0]
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f96e 	bl	80002c0 <__aeabi_i2f>
 8000fe4:	4603      	mov	r3, r0
    float slope = (table->output_values[i+1] - table->output_values[i]) /
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fa71 	bl	80004d0 <__aeabi_fdiv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60bb      	str	r3, [r7, #8]

    return table->output_values[i] + slope * (input - table->input_values[i]);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681c      	ldr	r4, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f956 	bl	80002c0 <__aeabi_i2f>
 8001014:	4603      	mov	r3, r0
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9a5 	bl	8000368 <__aeabi_fmul>
 800101e:	4603      	mov	r3, r0
 8001020:	4619      	mov	r1, r3
 8001022:	4620      	mov	r0, r4
 8001024:	f7ff f898 	bl	8000158 <__addsf3>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
	...

08001034 <SendMainDataToCan>:

void SendMainDataToCan(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

    // Initialize the header fields
	can_main_data_TxHeader.StdId = CAN_ID_MAIN_DATA;          // Standard ID
 8001038:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <SendMainDataToCan+0xf4>)
 800103a:	f240 3215 	movw	r2, #789	@ 0x315
 800103e:	601a      	str	r2, [r3, #0]
	can_main_data_TxHeader.ExtId = 0x00;           // Not using extended ID
 8001040:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <SendMainDataToCan+0xf4>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
	can_main_data_TxHeader.RTR = CAN_RTR_DATA;     // Data frame (not remote)
 8001046:	4b38      	ldr	r3, [pc, #224]	@ (8001128 <SendMainDataToCan+0xf4>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
	can_main_data_TxHeader.IDE = CAN_ID_STD;       // Standard ID
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <SendMainDataToCan+0xf4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
	can_main_data_TxHeader.DLC = 8;                // Send 8 bytes
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <SendMainDataToCan+0xf4>)
 8001054:	2208      	movs	r2, #8
 8001056:	611a      	str	r2, [r3, #16]
	can_main_data_TxHeader.TransmitGlobalTime = DISABLE;
 8001058:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <SendMainDataToCan+0xf4>)
 800105a:	2200      	movs	r2, #0
 800105c:	751a      	strb	r2, [r3, #20]


	can_main_data[0] = (uint8_t) (((uint16_t) (distance_right_mm * 10)) >> 8); //lohigh
 800105e:	4b33      	ldr	r3, [pc, #204]	@ (800112c <SendMainDataToCan+0xf8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4933      	ldr	r1, [pc, #204]	@ (8001130 <SendMainDataToCan+0xfc>)
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f97f 	bl	8000368 <__aeabi_fmul>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff facb 	bl	8000608 <__aeabi_f2uiz>
 8001072:	4603      	mov	r3, r0
 8001074:	b29b      	uxth	r3, r3
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2da      	uxtb	r2, r3
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <SendMainDataToCan+0x100>)
 800107e:	701a      	strb	r2, [r3, #0]
	can_main_data[1] = (uint8_t) (distance_right_mm * 10);
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <SendMainDataToCan+0xf8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	492a      	ldr	r1, [pc, #168]	@ (8001130 <SendMainDataToCan+0xfc>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f96e 	bl	8000368 <__aeabi_fmul>
 800108c:	4603      	mov	r3, r0
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff faba 	bl	8000608 <__aeabi_f2uiz>
 8001094:	4603      	mov	r3, r0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <SendMainDataToCan+0x100>)
 800109a:	705a      	strb	r2, [r3, #1]

	//i primi due byte sono heightSensor2
	can_main_data[2] = (uint8_t) (((uint16_t) (distance_left_mm * 10)) >> 8); //loHigh
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <SendMainDataToCan+0x104>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4923      	ldr	r1, [pc, #140]	@ (8001130 <SendMainDataToCan+0xfc>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f960 	bl	8000368 <__aeabi_fmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff faac 	bl	8000608 <__aeabi_f2uiz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <SendMainDataToCan+0x100>)
 80010bc:	709a      	strb	r2, [r3, #2]
	can_main_data[3] = (uint8_t) (distance_left_mm * 10);
 80010be:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <SendMainDataToCan+0x104>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	491b      	ldr	r1, [pc, #108]	@ (8001130 <SendMainDataToCan+0xfc>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f94f 	bl	8000368 <__aeabi_fmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa9b 	bl	8000608 <__aeabi_f2uiz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <SendMainDataToCan+0x100>)
 80010d8:	70da      	strb	r2, [r3, #3]

	//
	can_main_data[4] = (uint8_t) (((uint16_t) adc_analog_in_mv[0]) >> 8); //loHigh
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <SendMainDataToCan+0x108>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <SendMainDataToCan+0x100>)
 80010e8:	711a      	strb	r2, [r3, #4]
	can_main_data[5] = (uint8_t) (adc_analog_in_mv[0]);
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <SendMainDataToCan+0x108>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <SendMainDataToCan+0x100>)
 80010f2:	715a      	strb	r2, [r3, #5]


	can_main_data[6] = (uint8_t) (((uint16_t) adc_analog_in_mv[1]) >> 8); //loHigh
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <SendMainDataToCan+0x108>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <SendMainDataToCan+0x100>)
 8001102:	719a      	strb	r2, [r3, #6]
	can_main_data[7] = (uint8_t) adc_analog_in_mv[1];
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <SendMainDataToCan+0x108>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <SendMainDataToCan+0x100>)
 800110c:	71da      	strb	r2, [r3, #7]


	if(HAL_CAN_AddTxMessage(&hcan, &can_main_data_TxHeader, can_main_data, &can_TxMailbox)!= HAL_OK)
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <SendMainDataToCan+0x10c>)
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <SendMainDataToCan+0x100>)
 8001112:	4905      	ldr	r1, [pc, #20]	@ (8001128 <SendMainDataToCan+0xf4>)
 8001114:	480b      	ldr	r0, [pc, #44]	@ (8001144 <SendMainDataToCan+0x110>)
 8001116:	f000 fb8a 	bl	800182e <HAL_CAN_AddTxMessage>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SendMainDataToCan+0xf0>
	{
	Error_Handler();
 8001120:	f000 f874 	bl	800120c <Error_Handler>
	}
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000128 	.word	0x20000128
 800112c:	20000194 	.word	0x20000194
 8001130:	41200000 	.word	0x41200000
 8001134:	20000144 	.word	0x20000144
 8001138:	20000198 	.word	0x20000198
 800113c:	20000184 	.word	0x20000184
 8001140:	20000140 	.word	0x20000140
 8001144:	2000004c 	.word	0x2000004c

08001148 <HAL_TIM_PeriodElapsedCallback>:


// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    if (htim == &htim1)  // Check if the interrupt came from TIM1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a25      	ldr	r2, [pc, #148]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d141      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x94>
    {
        flag_1ms = 1;  // Set 1ms flag
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]

        ms_counter++;
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	3301      	adds	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800116a:	801a      	strh	r2, [r3, #0]

        // Every 10ms (when counter is multiple of 10)
        if (ms_counter % 10 == 0) {
 800116c:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001174:	fba3 1302 	umull	r1, r3, r3, r2
 8001178:	08d9      	lsrs	r1, r3, #3
 800117a:	460b      	mov	r3, r1
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_TIM_PeriodElapsedCallback+0x48>
            flag_10ms = 1;
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
        }

        // Every 100ms (when counter is multiple of 100)
        if (ms_counter % 100 == 0) {
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001198:	fba2 1203 	umull	r1, r2, r2, r3
 800119c:	0952      	lsrs	r2, r2, #5
 800119e:	2164      	movs	r1, #100	@ 0x64
 80011a0:	fb01 f202 	mul.w	r2, r1, r2
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x6a>
            flag_100ms = 1;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
        }

        // Every 1000ms (when counter is multiple of 1000)
        if (ms_counter % 1000 == 0) {
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80011ba:	fba2 1203 	umull	r1, r2, r2, r3
 80011be:	0992      	lsrs	r2, r2, #6
 80011c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011c4:	fb01 f202 	mul.w	r2, r1, r2
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x94>
            flag_1000ms = 1;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
            ms_counter = 0;  // Reset counter to avoid overflow
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	801a      	strh	r2, [r3, #0]
        }
    }
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200000c8 	.word	0x200000c8
 80011ec:	20000110 	.word	0x20000110
 80011f0:	20000114 	.word	0x20000114
 80011f4:	cccccccd 	.word	0xcccccccd
 80011f8:	20000111 	.word	0x20000111
 80011fc:	51eb851f 	.word	0x51eb851f
 8001200:	20000112 	.word	0x20000112
 8001204:	10624dd3 	.word	0x10624dd3
 8001208:	20000113 	.word	0x20000113

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a14      	ldr	r2, [pc, #80]	@ (8001274 <HAL_MspInit+0x5c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <HAL_MspInit+0x5c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_MspInit+0x60>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_MspInit+0x60>)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000

0800127c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <HAL_CAN_MspInit+0x8c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d131      	bne.n	8001300 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_CAN_MspInit+0x90>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <HAL_CAN_MspInit+0x90>)
 80012a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a6:	61d3      	str	r3, [r2, #28]
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_CAN_MspInit+0x90>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_CAN_MspInit+0x90>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <HAL_CAN_MspInit+0x90>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_CAN_MspInit+0x90>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <HAL_CAN_MspInit+0x94>)
 80012e2:	f000 fc81 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <HAL_CAN_MspInit+0x94>)
 80012fc:	f000 fc74 	bl	8001be8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40006400 	.word	0x40006400
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <HAL_I2C_MspInit+0x74>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d125      	bne.n	8001380 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_I2C_MspInit+0x78>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <HAL_I2C_MspInit+0x78>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_I2C_MspInit+0x78>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134c:	23c0      	movs	r3, #192	@ 0xc0
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <HAL_I2C_MspInit+0x7c>)
 8001364:	f000 fc40 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_I2C_MspInit+0x78>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <HAL_I2C_MspInit+0x78>)
 800136e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001372:	61d3      	str	r3, [r2, #28]
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_I2C_MspInit+0x78>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40005400 	.word	0x40005400
 800138c:	40021000 	.word	0x40021000
 8001390:	40010c00 	.word	0x40010c00

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <HAL_TIM_Base_MspInit+0x44>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d113      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2019      	movs	r0, #25
 80013c4:	f000 fbd9 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013c8:	2019      	movs	r0, #25
 80013ca:	f000 fbf2 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f87e 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM1_UP_IRQHandler+0x10>)
 800143e:	f002 fa35 	bl	80038ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000c8 	.word	0x200000c8

0800144c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <Reset_Handler>:
 8001458:	f7ff fff8 	bl	800144c <SystemInit>
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <LoopFillZerobss+0xe>)
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <LoopFillZerobss+0x12>)
 8001460:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <LoopFillZerobss+0x16>)
 8001462:	2300      	movs	r3, #0
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:
 8001466:	58d4      	ldr	r4, [r2, r3]
 8001468:	50c4      	str	r4, [r0, r3]
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:
 800146c:	18c4      	adds	r4, r0, r3
 800146e:	428c      	cmp	r4, r1
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <LoopFillZerobss+0x1a>)
 8001474:	4c09      	ldr	r4, [pc, #36]	@ (800149c <LoopFillZerobss+0x1e>)
 8001476:	2300      	movs	r3, #0
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:
 800147e:	42a2      	cmp	r2, r4
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>
 8001482:	f002 fd5b 	bl	8003f3c <__libc_init_array>
 8001486:	f7ff f8df 	bl	8000648 <main>
 800148a:	4770      	bx	lr
 800148c:	20000000 	.word	0x20000000
 8001490:	20000030 	.word	0x20000030
 8001494:	08004030 	.word	0x08004030
 8001498:	20000030 	.word	0x20000030
 800149c:	200001c0 	.word	0x200001c0

080014a0 <ADC1_2_IRQHandler>:
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_Init+0x28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_Init+0x28>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 fb55 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	200f      	movs	r0, #15
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff feaa 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fb6d 	bl	8001bce <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 fb35 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000024 	.word	0x20000024
 8001528:	2000002c 	.word	0x2000002c
 800152c:	20000028 	.word	0x20000028

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_IncTick+0x1c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_IncTick+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <HAL_IncTick+0x20>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	2000002c 	.word	0x2000002c
 8001550:	200001bc 	.word	0x200001bc

08001554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <HAL_GetTick+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200001bc 	.word	0x200001bc

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff fff0 	bl	8001554 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffe0 	bl	8001554 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000002c 	.word	0x2000002c

080015b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0ed      	b.n	800179e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fe54 	bl	800127c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff ffb6 	bl	8001554 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff ffb2 	bl	8001554 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0c5      	b.n	800179e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0e5      	beq.n	80015ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0202 	bic.w	r2, r2, #2
 800162e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001630:	f7ff ff90 	bl	8001554 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001636:	e012      	b.n	800165e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001638:	f7ff ff8c 	bl	8001554 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b0a      	cmp	r3, #10
 8001644:	d90b      	bls.n	800165e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2205      	movs	r2, #5
 8001656:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e09f      	b.n	800179e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e5      	bne.n	8001638 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7e1b      	ldrb	r3, [r3, #24]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e007      	b.n	8001696 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7e5b      	ldrb	r3, [r3, #25]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e007      	b.n	80016c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e9b      	ldrb	r3, [r3, #26]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0220 	orr.w	r2, r2, #32
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e007      	b.n	80016ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0220 	bic.w	r2, r2, #32
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7edb      	ldrb	r3, [r3, #27]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0210 	bic.w	r2, r2, #16
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e007      	b.n	8001714 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0210 	orr.w	r2, r2, #16
 8001712:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7f1b      	ldrb	r3, [r3, #28]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0208 	orr.w	r2, r2, #8
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e007      	b.n	800173e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0208 	bic.w	r2, r2, #8
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7f5b      	ldrb	r3, [r3, #29]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0204 	orr.w	r2, r2, #4
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e007      	b.n	8001768 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	ea42 0103 	orr.w	r1, r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d12e      	bne.n	8001818 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017d2:	f7ff febf 	bl	8001554 <HAL_GetTick>
 80017d6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017d8:	e012      	b.n	8001800 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017da:	f7ff febb 	bl	8001554 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b0a      	cmp	r3, #10
 80017e6:	d90b      	bls.n	8001800 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2205      	movs	r2, #5
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e012      	b.n	8001826 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e5      	bne.n	80017da <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e006      	b.n	8001826 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
  }
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800182e:	b480      	push	{r7}
 8001830:	b089      	sub	sp, #36	@ 0x24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001842:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800184c:	7ffb      	ldrb	r3, [r7, #31]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d003      	beq.n	800185a <HAL_CAN_AddTxMessage+0x2c>
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 80ad 	bne.w	80019b4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8095 	beq.w	80019a4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	0e1b      	lsrs	r3, r3, #24
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001884:	2201      	movs	r2, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	409a      	lsls	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	6809      	ldr	r1, [r1, #0]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3318      	adds	r3, #24
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e00f      	b.n	80018d2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3318      	adds	r3, #24
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	440b      	add	r3, r1
 80018d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6819      	ldr	r1, [r3, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3318      	adds	r3, #24
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	440b      	add	r3, r1
 80018e2:	3304      	adds	r3, #4
 80018e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	7d1b      	ldrb	r3, [r3, #20]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d111      	bne.n	8001912 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3318      	adds	r3, #24
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	3304      	adds	r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6811      	ldr	r1, [r2, #0]
 8001902:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3318      	adds	r3, #24
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	440b      	add	r3, r1
 800190e:	3304      	adds	r3, #4
 8001910:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3307      	adds	r3, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	061a      	lsls	r2, r3, #24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3306      	adds	r3, #6
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3305      	adds	r3, #5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	4313      	orrs	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	3204      	adds	r2, #4
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	4610      	mov	r0, r2
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	6811      	ldr	r1, [r2, #0]
 800193a:	ea43 0200 	orr.w	r2, r3, r0
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	440b      	add	r3, r1
 8001944:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001948:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3303      	adds	r3, #3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	061a      	lsls	r2, r3, #24
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3302      	adds	r3, #2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3301      	adds	r3, #1
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	4313      	orrs	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	4610      	mov	r0, r2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	6811      	ldr	r1, [r2, #0]
 8001970:	ea43 0200 	orr.w	r2, r3, r0
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	440b      	add	r3, r1
 800197a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800197e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3318      	adds	r3, #24
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	6811      	ldr	r1, [r2, #0]
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3318      	adds	r3, #24
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	440b      	add	r3, r1
 800199e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e00e      	b.n	80019c2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e006      	b.n	80019c2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
  }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4906      	ldr	r1, [pc, #24]	@ (8001a64 <__NVIC_EnableIRQ+0x34>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	@ (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff90 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff2d 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff42 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff90 	bl	8001abc <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5f 	bl	8001a68 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff35 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	@ 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e161      	b.n	8001ec0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8150 	bne.w	8001eba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a97      	ldr	r2, [pc, #604]	@ (8001e7c <HAL_GPIO_Init+0x294>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05e      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a95      	ldr	r2, [pc, #596]	@ (8001e7c <HAL_GPIO_Init+0x294>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d875      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c2a:	4a95      	ldr	r2, [pc, #596]	@ (8001e80 <HAL_GPIO_Init+0x298>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d058      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c30:	4a93      	ldr	r2, [pc, #588]	@ (8001e80 <HAL_GPIO_Init+0x298>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d86f      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c36:	4a93      	ldr	r2, [pc, #588]	@ (8001e84 <HAL_GPIO_Init+0x29c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d052      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a91      	ldr	r2, [pc, #580]	@ (8001e84 <HAL_GPIO_Init+0x29c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d869      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c42:	4a91      	ldr	r2, [pc, #580]	@ (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04c      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c48:	4a8f      	ldr	r2, [pc, #572]	@ (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d863      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a8f      	ldr	r2, [pc, #572]	@ (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d046      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c54:	4a8d      	ldr	r2, [pc, #564]	@ (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d85d      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d82a      	bhi.n	8001cb4 <HAL_GPIO_Init+0xcc>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d859      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c62:	a201      	add	r2, pc, #4	@ (adr r2, 8001c68 <HAL_GPIO_Init+0x80>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001ccf 	.word	0x08001ccf
 8001c74:	08001d11 	.word	0x08001d11
 8001c78:	08001d17 	.word	0x08001d17
 8001c7c:	08001d17 	.word	0x08001d17
 8001c80:	08001d17 	.word	0x08001d17
 8001c84:	08001d17 	.word	0x08001d17
 8001c88:	08001d17 	.word	0x08001d17
 8001c8c:	08001d17 	.word	0x08001d17
 8001c90:	08001d17 	.word	0x08001d17
 8001c94:	08001d17 	.word	0x08001d17
 8001c98:	08001d17 	.word	0x08001d17
 8001c9c:	08001d17 	.word	0x08001d17
 8001ca0:	08001d17 	.word	0x08001d17
 8001ca4:	08001d17 	.word	0x08001d17
 8001ca8:	08001d17 	.word	0x08001d17
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001cd9 	.word	0x08001cd9
 8001cb4:	4a76      	ldr	r2, [pc, #472]	@ (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cba:	e02c      	b.n	8001d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e029      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e024      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e01f      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e01a      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cea:	2304      	movs	r3, #4
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e013      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	611a      	str	r2, [r3, #16]
          break;
 8001d02:	e009      	b.n	8001d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	615a      	str	r2, [r3, #20]
          break;
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          break;
 8001d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2bff      	cmp	r3, #255	@ 0xff
 8001d1c:	d801      	bhi.n	8001d22 <HAL_GPIO_Init+0x13a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_Init+0x13e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	@ 0xff
 8001d2c:	d802      	bhi.n	8001d34 <HAL_GPIO_Init+0x14c>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x152>
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	3b08      	subs	r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	210f      	movs	r1, #15
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80a9 	beq.w	8001eba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d68:	4b4a      	ldr	r3, [pc, #296]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a49      	ldr	r2, [pc, #292]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b47      	ldr	r3, [pc, #284]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d80:	4a45      	ldr	r2, [pc, #276]	@ (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3d      	ldr	r2, [pc, #244]	@ (8001e9c <HAL_GPIO_Init+0x2b4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00d      	beq.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_GPIO_Init+0x1dc>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_GPIO_Init+0x1d8>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e004      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_GPIO_Init+0x1e2>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dda:	492f      	ldr	r1, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	492b      	ldr	r1, [pc, #172]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e02:	4b29      	ldr	r3, [pc, #164]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4927      	ldr	r1, [pc, #156]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4921      	ldr	r1, [pc, #132]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	491d      	ldr	r1, [pc, #116]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4917      	ldr	r1, [pc, #92]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4913      	ldr	r1, [pc, #76]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01f      	beq.n	8001eac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e01f      	b.n	8001eba <HAL_GPIO_Init+0x2d2>
 8001e7a:	bf00      	nop
 8001e7c:	10320000 	.word	0x10320000
 8001e80:	10310000 	.word	0x10310000
 8001e84:	10220000 	.word	0x10220000
 8001e88:	10210000 	.word	0x10210000
 8001e8c:	10120000 	.word	0x10120000
 8001e90:	10110000 	.word	0x10110000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40010c00 	.word	0x40010c00
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_GPIO_Init+0x2f4>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	4909      	ldr	r1, [pc, #36]	@ (8001edc <HAL_GPIO_Init+0x2f4>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f47f ae96 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	372c      	adds	r7, #44	@ 0x2c
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e12b      	b.n	800217a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f9ec 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f74:	f001 fbcc 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 8001f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a81      	ldr	r2, [pc, #516]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d807      	bhi.n	8001f94 <HAL_I2C_Init+0x84>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a80      	ldr	r2, [pc, #512]	@ (8002188 <HAL_I2C_Init+0x278>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e006      	b.n	8001fa2 <HAL_I2C_Init+0x92>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a7d      	ldr	r2, [pc, #500]	@ (800218c <HAL_I2C_Init+0x27c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0e7      	b.n	800217a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a78      	ldr	r2, [pc, #480]	@ (8002190 <HAL_I2C_Init+0x280>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9b      	lsrs	r3, r3, #18
 8001fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_I2C_Init+0x274>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_I2C_Init+0xd4>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	e009      	b.n	8001ff8 <HAL_I2C_Init+0xe8>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	4a69      	ldr	r2, [pc, #420]	@ (8002194 <HAL_I2C_Init+0x284>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800200a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	495c      	ldr	r1, [pc, #368]	@ (8002184 <HAL_I2C_Init+0x274>)
 8002014:	428b      	cmp	r3, r1
 8002016:	d819      	bhi.n	800204c <HAL_I2C_Init+0x13c>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e59      	subs	r1, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fbb1 f3f3 	udiv	r3, r1, r3
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800202c:	400b      	ands	r3, r1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_I2C_Init+0x138>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e59      	subs	r1, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	e051      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 8002048:	2304      	movs	r3, #4
 800204a:	e04f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d111      	bne.n	8002078 <HAL_I2C_Init+0x168>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e012      	b.n	800209e <HAL_I2C_Init+0x18e>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x196>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <HAL_I2C_Init+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e58      	subs	r0, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Init+0x1dc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800211a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6911      	ldr	r1, [r2, #16]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68d2      	ldr	r2, [r2, #12]
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	000186a0 	.word	0x000186a0
 8002188:	001e847f 	.word	0x001e847f
 800218c:	003d08ff 	.word	0x003d08ff
 8002190:	431bde83 	.word	0x431bde83
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
 80021a8:	4613      	mov	r3, r2
 80021aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff f9d2 	bl	8001554 <HAL_GetTick>
 80021b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	f040 80e0 	bne.w	8002380 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2319      	movs	r3, #25
 80021c6:	2201      	movs	r2, #1
 80021c8:	4970      	ldr	r1, [pc, #448]	@ (800238c <HAL_I2C_Master_Transmit+0x1f4>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fc9e 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0d3      	b.n	8002382 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_I2C_Master_Transmit+0x50>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0cc      	b.n	8002382 <HAL_I2C_Master_Transmit+0x1ea>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d007      	beq.n	800220e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800221c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2221      	movs	r2, #33	@ 0x21
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2210      	movs	r2, #16
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	893a      	ldrh	r2, [r7, #8]
 800223e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a50      	ldr	r2, [pc, #320]	@ (8002390 <HAL_I2C_Master_Transmit+0x1f8>)
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002250:	8979      	ldrh	r1, [r7, #10]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6a3a      	ldr	r2, [r7, #32]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fb08 	bl	800286c <I2C_MasterRequestWrite>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e08d      	b.n	8002382 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800227c:	e066      	b.n	800234c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	6a39      	ldr	r1, [r7, #32]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fd5c 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	2b04      	cmp	r3, #4
 8002294:	d107      	bne.n	80022a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06b      	b.n	8002382 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d11b      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x188>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d017      	beq.n	8002320 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	6a39      	ldr	r1, [r7, #32]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fd53 	bl	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b04      	cmp	r3, #4
 8002336:	d107      	bne.n	8002348 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002346:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e01a      	b.n	8002382 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d194      	bne.n	800227e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	e000      	b.n	8002382 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002380:	2302      	movs	r3, #2
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	00100002 	.word	0x00100002
 8002390:	ffff0000 	.word	0xffff0000

08002394 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	@ 0x30
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	817b      	strh	r3, [r7, #10]
 80023a4:	4613      	mov	r3, r2
 80023a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff f8d2 	bl	8001554 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 824b 	bne.w	8002856 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2319      	movs	r3, #25
 80023c6:	2201      	movs	r2, #1
 80023c8:	497f      	ldr	r1, [pc, #508]	@ (80025c8 <HAL_I2C_Master_Receive+0x234>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb9e 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
 80023d8:	e23e      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_I2C_Master_Receive+0x54>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e237      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d007      	beq.n	800240e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2222      	movs	r2, #34	@ 0x22
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2210      	movs	r2, #16
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a5f      	ldr	r2, [pc, #380]	@ (80025cc <HAL_I2C_Master_Receive+0x238>)
 800244e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa8a 	bl	8002970 <I2C_MasterRequestRead>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1f8      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d113      	bne.n	8002496 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e1cc      	b.n	8002830 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	2b01      	cmp	r3, #1
 800249c:	d11e      	bne.n	80024dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ac:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ae:	b672      	cpsid	i
}
 80024b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024d8:	b662      	cpsie	i
}
 80024da:	e035      	b.n	8002548 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d11e      	bne.n	8002522 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800251c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800251e:	b662      	cpsie	i
}
 8002520:	e012      	b.n	8002548 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002548:	e172      	b.n	8002830 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	2b03      	cmp	r3, #3
 8002550:	f200 811f 	bhi.w	8002792 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	2b01      	cmp	r3, #1
 800255a:	d123      	bne.n	80025a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fc7d 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e173      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025a2:	e145      	b.n	8002830 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d152      	bne.n	8002652 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	2200      	movs	r2, #0
 80025b4:	4906      	ldr	r1, [pc, #24]	@ (80025d0 <HAL_I2C_Master_Receive+0x23c>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 faa8 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e148      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
 80025c6:	bf00      	nop
 80025c8:	00100002 	.word	0x00100002
 80025cc:	ffff0000 	.word	0xffff0000
 80025d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025d4:	b672      	cpsid	i
}
 80025d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800261a:	b662      	cpsie	i
}
 800261c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002650:	e0ee      	b.n	8002830 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	2200      	movs	r2, #0
 800265a:	4981      	ldr	r1, [pc, #516]	@ (8002860 <HAL_I2C_Master_Receive+0x4cc>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fa55 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0f5      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002864 <HAL_I2C_Master_Receive+0x4d0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002868 <HAL_I2C_Master_Receive+0x4d4>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a1a      	lsrs	r2, r3, #8
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d118      	bne.n	800270a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026fa:	b662      	cpsie	i
}
 80026fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0a6      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d1d9      	bne.n	80026cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800275a:	b662      	cpsie	i
}
 800275c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002790:	e04e      	b.n	8002830 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002794:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fb62 	bl	8002e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e058      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d124      	bne.n	8002830 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d107      	bne.n	80027fe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f ae88 	bne.w	800254a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3728      	adds	r7, #40	@ 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	00010004 	.word	0x00010004
 8002864:	20000024 	.word	0x20000024
 8002868:	14f8b589 	.word	0x14f8b589

0800286c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	460b      	mov	r3, r1
 800287a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d006      	beq.n	8002896 <I2C_MasterRequestWrite+0x2a>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d003      	beq.n	8002896 <I2C_MasterRequestWrite+0x2a>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002894:	d108      	bne.n	80028a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e00b      	b.n	80028c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d107      	bne.n	80028c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f91d 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e6:	d103      	bne.n	80028f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e035      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028fc:	d108      	bne.n	8002910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e01b      	b.n	8002948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002910:	897b      	ldrh	r3, [r7, #10]
 8002912:	11db      	asrs	r3, r3, #7
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f063 030f 	orn	r3, r3, #15
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	490e      	ldr	r1, [pc, #56]	@ (8002968 <I2C_MasterRequestWrite+0xfc>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f966 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e010      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4907      	ldr	r1, [pc, #28]	@ (800296c <I2C_MasterRequestWrite+0x100>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f956 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010008 	.word	0x00010008
 800296c:	00010002 	.word	0x00010002

08002970 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002994:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d006      	beq.n	80029aa <I2C_MasterRequestRead+0x3a>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d003      	beq.n	80029aa <I2C_MasterRequestRead+0x3a>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029a8:	d108      	bne.n	80029bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e00b      	b.n	80029d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	2b11      	cmp	r3, #17
 80029c2:	d107      	bne.n	80029d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f893 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029fa:	d103      	bne.n	8002a04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e079      	b.n	8002afc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a10:	d108      	bne.n	8002a24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]
 8002a22:	e05f      	b.n	8002ae4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a24:	897b      	ldrh	r3, [r7, #10]
 8002a26:	11db      	asrs	r3, r3, #7
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 0306 	and.w	r3, r3, #6
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f063 030f 	orn	r3, r3, #15
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4930      	ldr	r1, [pc, #192]	@ (8002b04 <I2C_MasterRequestRead+0x194>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f8dc 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e054      	b.n	8002afc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4929      	ldr	r1, [pc, #164]	@ (8002b08 <I2C_MasterRequestRead+0x198>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8cc 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e044      	b.n	8002afc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f831 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002abe:	d103      	bne.n	8002ac8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e017      	b.n	8002afc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	11db      	asrs	r3, r3, #7
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0306 	and.w	r3, r3, #6
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f063 030e 	orn	r3, r3, #14
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4907      	ldr	r1, [pc, #28]	@ (8002b08 <I2C_MasterRequestRead+0x198>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f888 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	00010008 	.word	0x00010008
 8002b08:	00010002 	.word	0x00010002

08002b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1c:	e048      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d044      	beq.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fd15 	bl	8001554 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d139      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10d      	bne.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	e00c      	b.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d116      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e023      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	e00c      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d093      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0e:	e071      	b.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1e:	d123      	bne.n	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e067      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d041      	beq.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fe fc70 	bl	8001554 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d136      	bne.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10c      	bne.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e021      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10c      	bne.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e00b      	b.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f af6d 	bne.w	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8e3 	bl	8002f1a <I2C_IsAcknowledgeFailed>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e034      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d028      	beq.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7fe fbf5 	bl	8001554 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11d      	bne.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d016      	beq.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	2b80      	cmp	r3, #128	@ 0x80
 8002dc4:	d1c3      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ddc:	e034      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f89b 	bl	8002f1a <I2C_IsAcknowledgeFailed>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e034      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d028      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fbad 	bl	8001554 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d016      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d1c3      	bne.n	8002dde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e6c:	e049      	b.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d119      	bne.n	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0210 	mvn.w	r2, #16
 8002e84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e030      	b.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fe fb50 	bl	8001554 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d016      	beq.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e007      	b.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d1ae      	bne.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f30:	d11b      	bne.n	8002f6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e272      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8087 	beq.w	80030a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f98:	4b92      	ldr	r3, [pc, #584]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d00c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d112      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5e>
 8002fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbe:	4b89      	ldr	r3, [pc, #548]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d06c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x12c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d168      	bne.n	80030a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e24c      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x76>
 8002fe0:	4b80      	ldr	r3, [pc, #512]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a7f      	ldr	r2, [pc, #508]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e02e      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x98>
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7a      	ldr	r2, [pc, #488]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b78      	ldr	r3, [pc, #480]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a77      	ldr	r2, [pc, #476]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e01d      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0xbc>
 800301a:	4b72      	ldr	r3, [pc, #456]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a71      	ldr	r2, [pc, #452]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b6f      	ldr	r3, [pc, #444]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6e      	ldr	r2, [pc, #440]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0xd4>
 8003034:	4b6b      	ldr	r3, [pc, #428]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6a      	ldr	r2, [pc, #424]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b68      	ldr	r3, [pc, #416]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a67      	ldr	r2, [pc, #412]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800304a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fa7e 	bl	8001554 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fa7a 	bl	8001554 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	@ 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e200      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b5d      	ldr	r3, [pc, #372]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0xe4>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fa6a 	bl	8001554 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fa66 	bl	8001554 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1ec      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x10c>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d063      	beq.n	800317a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b2:	4b4c      	ldr	r3, [pc, #304]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030be:	4b49      	ldr	r3, [pc, #292]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d11c      	bne.n	8003104 <HAL_RCC_OscConfig+0x18c>
 80030ca:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x176>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e1c0      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ee:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4939      	ldr	r1, [pc, #228]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	e03a      	b.n	800317a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b36      	ldr	r3, [pc, #216]	@ (80031e8 <HAL_RCC_OscConfig+0x270>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe fa1f 	bl	8001554 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe fa1b 	bl	8001554 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1a1      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4927      	ldr	r1, [pc, #156]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <HAL_RCC_OscConfig+0x270>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe f9fe 	bl	8001554 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fe f9fa 	bl	8001554 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e180      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03a      	beq.n	80031fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d019      	beq.n	80031c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318e:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_RCC_OscConfig+0x274>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7fe f9de 	bl	8001554 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7fe f9da 	bl	8001554 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e160      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f000 fabc 	bl	8003738 <RCC_Delay>
 80031c0:	e01c      	b.n	80031fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c2:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <HAL_RCC_OscConfig+0x274>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fe f9c4 	bl	8001554 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fe f9c0 	bl	8001554 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d908      	bls.n	80031f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e146      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	42420000 	.word	0x42420000
 80031ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b92      	ldr	r3, [pc, #584]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e9      	bne.n	80031d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a6 	beq.w	8003356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b8b      	ldr	r3, [pc, #556]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b88      	ldr	r3, [pc, #544]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a87      	ldr	r2, [pc, #540]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003224:	61d3      	str	r3, [r2, #28]
 8003226:	4b85      	ldr	r3, [pc, #532]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b82      	ldr	r3, [pc, #520]	@ (8003440 <HAL_RCC_OscConfig+0x4c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d118      	bne.n	8003274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003242:	4b7f      	ldr	r3, [pc, #508]	@ (8003440 <HAL_RCC_OscConfig+0x4c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7e      	ldr	r2, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x4c8>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7fe f981 	bl	8001554 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fe f97d 	bl	8001554 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b64      	cmp	r3, #100	@ 0x64
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e103      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_OscConfig+0x4c8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x312>
 800327c:	4b6f      	ldr	r3, [pc, #444]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a6e      	ldr	r2, [pc, #440]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e02d      	b.n	80032e6 <HAL_RCC_OscConfig+0x36e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x334>
 8003292:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4a69      	ldr	r2, [pc, #420]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6213      	str	r3, [r2, #32]
 800329e:	4b67      	ldr	r3, [pc, #412]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4a66      	ldr	r2, [pc, #408]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	6213      	str	r3, [r2, #32]
 80032aa:	e01c      	b.n	80032e6 <HAL_RCC_OscConfig+0x36e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d10c      	bne.n	80032ce <HAL_RCC_OscConfig+0x356>
 80032b4:	4b61      	ldr	r3, [pc, #388]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4a60      	ldr	r2, [pc, #384]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	4b5e      	ldr	r3, [pc, #376]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4a5d      	ldr	r2, [pc, #372]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6213      	str	r3, [r2, #32]
 80032cc:	e00b      	b.n	80032e6 <HAL_RCC_OscConfig+0x36e>
 80032ce:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6213      	str	r3, [r2, #32]
 80032da:	4b58      	ldr	r3, [pc, #352]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a57      	ldr	r2, [pc, #348]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ee:	f7fe f931 	bl	8001554 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe f92d 	bl	8001554 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0b1      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ee      	beq.n	80032f6 <HAL_RCC_OscConfig+0x37e>
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fe f91b 	bl	8001554 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe f917 	bl	8001554 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e09b      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	4b40      	ldr	r3, [pc, #256]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ee      	bne.n	8003322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4a3b      	ldr	r2, [pc, #236]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8087 	beq.w	800346e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d061      	beq.n	8003430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d146      	bne.n	8003402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b33      	ldr	r3, [pc, #204]	@ (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fe f8eb 	bl	8001554 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fe f8e7 	bl	8001554 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e06d      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003394:	4b29      	ldr	r3, [pc, #164]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033aa:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4921      	ldr	r1, [pc, #132]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	4b1f      	ldr	r3, [pc, #124]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a19      	ldr	r1, [r3, #32]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	430b      	orrs	r3, r1
 80033ce:	491b      	ldr	r1, [pc, #108]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe f8bb 	bl	8001554 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe f8b7 	bl	8001554 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e03d      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x46a>
 8003400:	e035      	b.n	800346e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe f8a4 	bl	8001554 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe f8a0 	bl	8001554 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e026      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003422:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_OscConfig+0x4c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x498>
 800342e:	e01e      	b.n	800346e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e019      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
 8003444:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <HAL_RCC_OscConfig+0x500>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	429a      	cmp	r2, r3
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0d0      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b6a      	ldr	r3, [pc, #424]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d910      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b67      	ldr	r3, [pc, #412]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4965      	ldr	r1, [pc, #404]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a58      	ldr	r2, [pc, #352]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80034e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a52      	ldr	r2, [pc, #328]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d040      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b41      	ldr	r3, [pc, #260]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e073      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3d      	ldr	r3, [pc, #244]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06b      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4936      	ldr	r1, [pc, #216]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fd fff2 	bl	8001554 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fd ffee 	bl	8001554 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e053      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b27      	ldr	r3, [pc, #156]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d210      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4922      	ldr	r1, [pc, #136]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	@ (800363c <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035f6:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	@ (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_RCC_ClockConfig+0x1cc>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_RCC_ClockConfig+0x1d0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd ff50 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	08003ffc 	.word	0x08003ffc
 8003648:	20000024 	.word	0x20000024
 800364c:	20000028 	.word	0x20000028

08003650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800366a:	4b1e      	ldr	r3, [pc, #120]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d002      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x30>
 800367a:	2b08      	cmp	r3, #8
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x36>
 800367e:	e027      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003682:	613b      	str	r3, [r7, #16]
      break;
 8003684:	e027      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	0c9b      	lsrs	r3, r3, #18
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003690:	5cd3      	ldrb	r3, [r2, r3]
 8003692:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0c5b      	lsrs	r3, r3, #17
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	4a11      	ldr	r2, [pc, #68]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036b2:	fb03 f202 	mul.w	r2, r3, r2
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e004      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0c      	ldr	r2, [pc, #48]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	613b      	str	r3, [r7, #16]
      break;
 80036ce:	e002      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80036d2:	613b      	str	r3, [r7, #16]
      break;
 80036d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d6:	693b      	ldr	r3, [r7, #16]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	08004014 	.word	0x08004014
 80036f0:	08004024 	.word	0x08004024
 80036f4:	003d0900 	.word	0x003d0900
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b02      	ldr	r3, [pc, #8]	@ (800370c <HAL_RCC_GetHCLKFreq+0x10>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	20000024 	.word	0x20000024

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003714:	f7ff fff2 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	0800400c 	.word	0x0800400c

08003738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <RCC_Delay+0x34>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <RCC_Delay+0x38>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0a5b      	lsrs	r3, r3, #9
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003754:	bf00      	nop
  }
  while (Delay --);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1e5a      	subs	r2, r3, #1
 800375a:	60fa      	str	r2, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <RCC_Delay+0x1c>
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	20000024 	.word	0x20000024
 8003770:	10624dd3 	.word	0x10624dd3

08003774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e041      	b.n	800380a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fdfa 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 fa56 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d001      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e035      	b.n	8003898 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a16      	ldr	r2, [pc, #88]	@ (80038a4 <HAL_TIM_Base_Start_IT+0x90>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIM_Base_Start_IT+0x4e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003856:	d004      	beq.n	8003862 <HAL_TIM_Base_Start_IT+0x4e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_TIM_Base_Start_IT+0x94>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d111      	bne.n	8003886 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b06      	cmp	r3, #6
 8003872:	d010      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	e007      	b.n	8003896 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400

080038ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0202 	mvn.w	r2, #2
 80038e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f998 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f98b 	bl	8003c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f99a 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0204 	mvn.w	r2, #4
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f972 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f965 	bl	8003c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f974 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0208 	mvn.w	r2, #8
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2204      	movs	r2, #4
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f94c 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f93f 	bl	8003c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f94e 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d020      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2208      	movs	r2, #8
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f926 	bl	8003c2c <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f919 	bl	8003c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f928 	bl	8003c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0201 	mvn.w	r2, #1
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fb98 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa6f 	bl	8003f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8f8 	bl	8003c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0220 	mvn.w	r2, #32
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa42 	bl	8003f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0b4      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x186>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae0:	d03e      	beq.n	8003b60 <HAL_TIM_ConfigClockSource+0xd4>
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae6:	f200 8087 	bhi.w	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aee:	f000 8086 	beq.w	8003bfe <HAL_TIM_ConfigClockSource+0x172>
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af6:	d87f      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b70      	cmp	r3, #112	@ 0x70
 8003afa:	d01a      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0xa6>
 8003afc:	2b70      	cmp	r3, #112	@ 0x70
 8003afe:	d87b      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b60      	cmp	r3, #96	@ 0x60
 8003b02:	d050      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b04:	2b60      	cmp	r3, #96	@ 0x60
 8003b06:	d877      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b50      	cmp	r3, #80	@ 0x50
 8003b0a:	d03c      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xfa>
 8003b0c:	2b50      	cmp	r3, #80	@ 0x50
 8003b0e:	d873      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b40      	cmp	r3, #64	@ 0x40
 8003b12:	d058      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b14:	2b40      	cmp	r3, #64	@ 0x40
 8003b16:	d86f      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b30      	cmp	r3, #48	@ 0x30
 8003b1a:	d064      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b1c:	2b30      	cmp	r3, #48	@ 0x30
 8003b1e:	d86b      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d060      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d867      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d05c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d05a      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	e062      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b42:	f000 f96a 	bl	8003e1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]
      break;
 8003b5e:	e04f      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	f000 f953 	bl	8003e1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b82:	609a      	str	r2, [r3, #8]
      break;
 8003b84:	e03c      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	461a      	mov	r2, r3
 8003b94:	f000 f8ca 	bl	8003d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2150      	movs	r1, #80	@ 0x50
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f921 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e02c      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f000 f8e8 	bl	8003d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2160      	movs	r1, #96	@ 0x60
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f911 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e01c      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 f8aa 	bl	8003d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2140      	movs	r1, #64	@ 0x40
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f901 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003be4:	e00c      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f000 f8f8 	bl	8003de6 <TIM_ITRx_SetConfig>
      break;
 8003bf6:	e003      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfc:	e000      	b.n	8003c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
	...

08003c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a2b      	ldr	r2, [pc, #172]	@ (8003d24 <TIM_Base_SetConfig+0xc0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_Base_SetConfig+0x28>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0x28>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a28      	ldr	r2, [pc, #160]	@ (8003d28 <TIM_Base_SetConfig+0xc4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d108      	bne.n	8003c9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <TIM_Base_SetConfig+0xc0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_Base_SetConfig+0x52>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cac:	d003      	beq.n	8003cb6 <TIM_Base_SetConfig+0x52>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <TIM_Base_SetConfig+0xc4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a0d      	ldr	r2, [pc, #52]	@ (8003d24 <TIM_Base_SetConfig+0xc0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d103      	bne.n	8003cfc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	611a      	str	r2, [r3, #16]
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400

08003d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 030a 	bic.w	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f023 0210 	bic.w	r2, r3, #16
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	031b      	lsls	r3, r3, #12
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f043 0307 	orr.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	021a      	lsls	r2, r3, #8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	609a      	str	r2, [r3, #8]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e041      	b.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a14      	ldr	r2, [pc, #80]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a10      	ldr	r2, [pc, #64]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ece:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400

08003f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <memset>:
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4402      	add	r2, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	2600      	movs	r6, #0
 8003f40:	4d0c      	ldr	r5, [pc, #48]	@ (8003f74 <__libc_init_array+0x38>)
 8003f42:	4c0d      	ldr	r4, [pc, #52]	@ (8003f78 <__libc_init_array+0x3c>)
 8003f44:	1b64      	subs	r4, r4, r5
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	42a6      	cmp	r6, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	f000 f81a 	bl	8003f84 <_init>
 8003f50:	2600      	movs	r6, #0
 8003f52:	4d0a      	ldr	r5, [pc, #40]	@ (8003f7c <__libc_init_array+0x40>)
 8003f54:	4c0a      	ldr	r4, [pc, #40]	@ (8003f80 <__libc_init_array+0x44>)
 8003f56:	1b64      	subs	r4, r4, r5
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	42a6      	cmp	r6, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f64:	4798      	blx	r3
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f6e:	4798      	blx	r3
 8003f70:	3601      	adds	r6, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	08004028 	.word	0x08004028
 8003f78:	08004028 	.word	0x08004028
 8003f7c:	08004028 	.word	0x08004028
 8003f80:	0800402c 	.word	0x0800402c

08003f84 <_init>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr

08003f90 <_fini>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	bf00      	nop
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr
