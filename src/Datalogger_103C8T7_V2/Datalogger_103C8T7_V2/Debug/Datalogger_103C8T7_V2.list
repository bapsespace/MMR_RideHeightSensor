
Datalogger_103C8T7_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006678  08006678  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  08006678  08006678  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006678  08006678  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800667c  0800667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006680  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000006c  080066ec  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080066ec  00008540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001242a  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acc  00000000  00000000  0001a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001cf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  0001e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019250  00000000  00000000  0001ed1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014347  00000000  00000000  00037f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093aac  00000000  00000000  0004c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfd61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004954  00000000  00000000  000dfda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000e46f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080064d8 	.word	0x080064d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080064d8 	.word	0x080064d8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2uiz>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	d20e      	bcs.n	8000742 <__aeabi_f2uiz+0x22>
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30b      	bcc.n	8000742 <__aeabi_f2uiz+0x22>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d409      	bmi.n	8000748 <__aeabi_f2uiz+0x28>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	fa23 f002 	lsr.w	r0, r3, r2
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2uiz+0x32>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d102      	bne.n	8000758 <__aeabi_f2uiz+0x38>
 8000752:	f04f 30ff 	mov.w	r0, #4294967295
 8000756:	4770      	bx	lr
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <getI2CAddress>:

#include "functions.h"
#include "constants.h"


uint8_t getI2CAddress(uint8_t address, uint8_t mode){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
	// Left shift to retrieve address in i2c format and add R/W flag
	// I2C_ADDR_ERR -> 0xFF
	// I2C_MODE_ERR -> 0xFE

	if (address > 128){
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b80      	cmp	r3, #128	@ 0x80
 8000774:	d901      	bls.n	800077a <getI2CAddress+0x1a>
		return I2C_ADDR_ERR;
 8000776:	23ff      	movs	r3, #255	@ 0xff
 8000778:	e00a      	b.n	8000790 <getI2CAddress+0x30>
	} else {
		if (mode > 2){
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d901      	bls.n	8000784 <getI2CAddress+0x24>
			return I2C_MODE_ERR;
 8000780:	23fe      	movs	r3, #254	@ 0xfe
 8000782:	e005      	b.n	8000790 <getI2CAddress+0x30>
		} else {
			return ((address << 1) + mode);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	4413      	add	r3, r2
 800078e:	b2db      	uxtb	r3, r3
		}
	}
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <ADCStartSyncCommand>:
		HAL_Delay(1);
		return I2C_ADC_OK;
	}
}

uint8_t ADCStartSyncCommand(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber){
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af02      	add	r7, sp, #8
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	70fb      	strb	r3, [r7, #3]
	// I2C_ADC_TRANSMIT_ERROR -> 0x03
	// I2C_ADC_WRONG_ADDRESS -> 0x02
	// I2C_ADC_WRONG_NUMBER -> 0x01

	// Return error if ADC number is not 1 or 2
	if (!((adcNumber == 1) || (adcNumber == 2))){
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d004      	beq.n	80007b6 <ADCStartSyncCommand+0x1c>
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d001      	beq.n	80007b6 <ADCStartSyncCommand+0x1c>
		return I2C_ADC_WRONG_NUMBER;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e02d      	b.n	8000812 <ADCStartSyncCommand+0x78>
	}
	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10a      	bne.n	80007d2 <ADCStartSyncCommand+0x38>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 80007bc:	2100      	movs	r1, #0
 80007be:	2040      	movs	r0, #64	@ 0x40
 80007c0:	f7ff ffce 	bl	8000760 <getI2CAddress>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2bff      	cmp	r3, #255	@ 0xff
 80007cc:	d10c      	bne.n	80007e8 <ADCStartSyncCommand+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 80007ce:	2302      	movs	r3, #2
 80007d0:	e01f      	b.n	8000812 <ADCStartSyncCommand+0x78>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2045      	movs	r0, #69	@ 0x45
 80007d6:	f7ff ffc3 	bl	8000760 <getI2CAddress>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2bff      	cmp	r3, #255	@ 0xff
 80007e2:	d101      	bne.n	80007e8 <ADCStartSyncCommand+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 80007e4:	2302      	movs	r3, #2
 80007e6:	e014      	b.n	8000812 <ADCStartSyncCommand+0x78>
		}
	}
	//Send reset command to ADC and in case of error retrieve the relative flag
	uint8_t addr = I2C_ADC_START_SYNC_COMMAND;
 80007e8:	2308      	movs	r3, #8
 80007ea:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, &addr, 1, HAL_MAX_DELAY);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	b299      	uxth	r1, r3
 80007f0:	f107 020d 	add.w	r2, r7, #13
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f003 f9e5 	bl	8003bcc <HAL_I2C_Master_Transmit>
 8000802:	4603      	mov	r3, r0
 8000804:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <ADCStartSyncCommand+0x76>
		return I2C_ADC_TRANSMIT_ERROR;
 800080c:	2303      	movs	r3, #3
 800080e:	e000      	b.n	8000812 <ADCStartSyncCommand+0x78>
	} else {
		return I2C_ADC_OK;
 8000810:	2300      	movs	r3, #0
	}
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <ADCSetRegistersValue>:
		}

	}
}

uint8_t ADCSetRegistersValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, uint8_t regNumber, uint8_t regValue){
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af02      	add	r7, sp, #8
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	4608      	mov	r0, r1
 8000824:	4611      	mov	r1, r2
 8000826:	461a      	mov	r2, r3
 8000828:	4603      	mov	r3, r0
 800082a:	70fb      	strb	r3, [r7, #3]
 800082c:	460b      	mov	r3, r1
 800082e:	70bb      	strb	r3, [r7, #2]
 8000830:	4613      	mov	r3, r2
 8000832:	707b      	strb	r3, [r7, #1]
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	// Check adc number
	if (!((adcNumber == 1) || (adcNumber == 2))){
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d004      	beq.n	8000844 <ADCSetRegistersValue+0x2a>
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d001      	beq.n	8000844 <ADCSetRegistersValue+0x2a>
		return I2C_ADC_WRONG_NUMBER;
 8000840:	2301      	movs	r3, #1
 8000842:	e03c      	b.n	80008be <ADCSetRegistersValue+0xa4>
	}


	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10a      	bne.n	8000860 <ADCSetRegistersValue+0x46>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 800084a:	2100      	movs	r1, #0
 800084c:	2040      	movs	r0, #64	@ 0x40
 800084e:	f7ff ff87 	bl	8000760 <getI2CAddress>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2bff      	cmp	r3, #255	@ 0xff
 800085a:	d10c      	bne.n	8000876 <ADCSetRegistersValue+0x5c>
			return I2C_ADC_WRONG_ADDRESS;
 800085c:	2302      	movs	r3, #2
 800085e:	e02e      	b.n	80008be <ADCSetRegistersValue+0xa4>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 8000860:	2100      	movs	r1, #0
 8000862:	2045      	movs	r0, #69	@ 0x45
 8000864:	f7ff ff7c 	bl	8000760 <getI2CAddress>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2bff      	cmp	r3, #255	@ 0xff
 8000870:	d101      	bne.n	8000876 <ADCSetRegistersValue+0x5c>
			return I2C_ADC_WRONG_ADDRESS;
 8000872:	2302      	movs	r3, #2
 8000874:	e023      	b.n	80008be <ADCSetRegistersValue+0xa4>
		}
	}

	// Check register
	if (regNumber > 3){
 8000876:	78bb      	ldrb	r3, [r7, #2]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d901      	bls.n	8000880 <ADCSetRegistersValue+0x66>
		return I2C_ADC_REG_NUMBER_ERROR;
 800087c:	2305      	movs	r3, #5
 800087e:	e01e      	b.n	80008be <ADCSetRegistersValue+0xa4>
	}

	// Send the command bytes (0100 rrxx dddd dddd)
	uint8_t regCommand[2] = {0};
 8000880:	2300      	movs	r3, #0
 8000882:	81bb      	strh	r3, [r7, #12]
	regCommand[0] = ((I2C_ADC_WRITE_REGISTER_COMMAND << 4) | (regNumber << 2));
 8000884:	78bb      	ldrb	r3, [r7, #2]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	733b      	strb	r3, [r7, #12]
	regCommand[1] = regValue;
 8000894:	787b      	ldrb	r3, [r7, #1]
 8000896:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, regCommand, 2, HAL_MAX_DELAY);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2302      	movs	r3, #2
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f003 f98f 	bl	8003bcc <HAL_I2C_Master_Transmit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <ADCSetRegistersValue+0xa2>
		return I2C_ADC_TRANSMIT_ERROR;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e000      	b.n	80008be <ADCSetRegistersValue+0xa4>
	} else {
		return I2C_ADC_OK;
 80008bc:	2300      	movs	r3, #0
	}
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <ADCGetDataValue>:

uint8_t ADCGetDataValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, int32_t* dataValue, uint8_t dataType){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	460b      	mov	r3, r1
 80008d4:	72fb      	strb	r3, [r7, #11]
 80008d6:	4613      	mov	r3, r2
 80008d8:	72bb      	strb	r3, [r7, #10]
	// I2C_ADC_WRONG_NUMBER -> 0x01
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	if (!((adcNumber == 1) || (adcNumber == 2))){
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d008      	beq.n	80008f2 <ADCGetDataValue+0x2c>
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d005      	beq.n	80008f2 <ADCGetDataValue+0x2c>
		*dataValue = I2C_ADC_DATA_ERROR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f06f 0201 	mvn.w	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e082      	b.n	80009f8 <ADCGetDataValue+0x132>
	}

	if (!((dataType == I2C_ADC_DATA_TEMP) || (dataType == I2C_ADC_DATA_VOLT))){
 80008f2:	7abb      	ldrb	r3, [r7, #10]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d008      	beq.n	800090a <ADCGetDataValue+0x44>
 80008f8:	7abb      	ldrb	r3, [r7, #10]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d005      	beq.n	800090a <ADCGetDataValue+0x44>
		*dataValue = I2C_ADC_DATA_ERROR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f06f 0201 	mvn.w	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_DATA;
 8000906:	2306      	movs	r3, #6
 8000908:	e076      	b.n	80009f8 <ADCGetDataValue+0x132>
	}


	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddressTransmit, adcAddressReceive;
	if (adcNumber == 1){
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d117      	bne.n	8000940 <ADCGetDataValue+0x7a>
		adcAddressTransmit = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 8000910:	2100      	movs	r1, #0
 8000912:	2040      	movs	r0, #64	@ 0x40
 8000914:	f7ff ff24 	bl	8000760 <getI2CAddress>
 8000918:	4603      	mov	r3, r0
 800091a:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC1_ADDR, I2C_MODE_READ);
 800091c:	2101      	movs	r1, #1
 800091e:	2040      	movs	r0, #64	@ 0x40
 8000920:	f7ff ff1e 	bl	8000760 <getI2CAddress>
 8000924:	4603      	mov	r3, r0
 8000926:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	2bff      	cmp	r3, #255	@ 0xff
 800092c:	d002      	beq.n	8000934 <ADCGetDataValue+0x6e>
 800092e:	7dbb      	ldrb	r3, [r7, #22]
 8000930:	2bff      	cmp	r3, #255	@ 0xff
 8000932:	d11d      	bne.n	8000970 <ADCGetDataValue+0xaa>
			*dataValue = I2C_ADC_DATA_ERROR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f06f 0201 	mvn.w	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 800093c:	2302      	movs	r3, #2
 800093e:	e05b      	b.n	80009f8 <ADCGetDataValue+0x132>
		}
	} else {
		adcAddressTransmit = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 8000940:	2100      	movs	r1, #0
 8000942:	2045      	movs	r0, #69	@ 0x45
 8000944:	f7ff ff0c 	bl	8000760 <getI2CAddress>
 8000948:	4603      	mov	r3, r0
 800094a:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC2_ADDR, I2C_MODE_READ);
 800094c:	2101      	movs	r1, #1
 800094e:	2045      	movs	r0, #69	@ 0x45
 8000950:	f7ff ff06 	bl	8000760 <getI2CAddress>
 8000954:	4603      	mov	r3, r0
 8000956:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2bff      	cmp	r3, #255	@ 0xff
 800095c:	d002      	beq.n	8000964 <ADCGetDataValue+0x9e>
 800095e:	7dbb      	ldrb	r3, [r7, #22]
 8000960:	2bff      	cmp	r3, #255	@ 0xff
 8000962:	d105      	bne.n	8000970 <ADCGetDataValue+0xaa>
			*dataValue = I2C_ADC_DATA_ERROR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f06f 0201 	mvn.w	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 800096c:	2302      	movs	r3, #2
 800096e:	e043      	b.n	80009f8 <ADCGetDataValue+0x132>
		}
	}

	// Send the command byte
	uint8_t addr = I2C_ADC_READ_DATA_COMMAND;
 8000970:	2310      	movs	r3, #16
 8000972:	753b      	strb	r3, [r7, #20]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddressTransmit, &addr, 1, HAL_MAX_DELAY);
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	b299      	uxth	r1, r3
 8000978:	f107 0214 	add.w	r2, r7, #20
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f003 f921 	bl	8003bcc <HAL_I2C_Master_Transmit>
 800098a:	4603      	mov	r3, r0
 800098c:	757b      	strb	r3, [r7, #21]
	if (ret != HAL_OK){
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d005      	beq.n	80009a0 <ADCGetDataValue+0xda>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f06f 0201 	mvn.w	r2, #1
 800099a:	601a      	str	r2, [r3, #0]
		return I2C_ADC_TRANSMIT_ERROR;
 800099c:	2303      	movs	r3, #3
 800099e:	e02b      	b.n	80009f8 <ADCGetDataValue+0x132>
	} else {
		uint8_t data[2] = {0x00, 0x00};
 80009a0:	2300      	movs	r3, #0
 80009a2:	823b      	strh	r3, [r7, #16]
		ret = HAL_I2C_Master_Receive(hi2c1, (uint16_t) (adcAddressReceive), data, 2, HAL_MAX_DELAY);
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	b299      	uxth	r1, r3
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2302      	movs	r3, #2
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f003 fa07 	bl	8003dc8 <HAL_I2C_Master_Receive>
 80009ba:	4603      	mov	r3, r0
 80009bc:	757b      	strb	r3, [r7, #21]
		if (ret != HAL_OK){
 80009be:	7d7b      	ldrb	r3, [r7, #21]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <ADCGetDataValue+0x10a>
			*dataValue = I2C_ADC_DATA_ERROR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f06f 0201 	mvn.w	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
			return I2C_ADC_RECEIVE_ERROR;
 80009cc:	2304      	movs	r3, #4
 80009ce:	e013      	b.n	80009f8 <ADCGetDataValue+0x132>
		} else {
			// Return 16 bit voltage or 14-bit temperature (left shifted)
			if (dataType == I2C_ADC_DATA_TEMP){
 80009d0:	7abb      	ldrb	r3, [r7, #10]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d109      	bne.n	80009ea <ADCGetDataValue+0x124>
				*dataValue = ((data[0] >> 2) << 8) | (data[1]);
 80009d6:	7c3b      	ldrb	r3, [r7, #16]
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	7c7a      	ldrb	r2, [r7, #17]
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e006      	b.n	80009f8 <ADCGetDataValue+0x132>
			} else {
				*dataValue = data[0] << 8 | data[1];
 80009ea:	7c3b      	ldrb	r3, [r7, #16]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	7c7a      	ldrb	r2, [r7, #17]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 80009f6:	2300      	movs	r3, #0
			}
		}
	}
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <getValueFromVoltageData>:


float getValueFromVoltageData(int32_t data){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	// If data < 0x7FFF i have a negative number else i have a positive one
	// For negative number i have to evaluate the two's complement
	data = (uint16_t) data;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	607b      	str	r3, [r7, #4]
	if (data <= 0x7FFF){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a14:	da09      	bge.n	8000a2a <getValueFromVoltageData+0x2a>
		return (data * 0.000152587890625f);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fc52 	bl	80002c0 <__aeabi_i2f>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	490b      	ldr	r1, [pc, #44]	@ (8000a4c <getValueFromVoltageData+0x4c>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fca1 	bl	8000368 <__aeabi_fmul>
 8000a26:	4603      	mov	r3, r0
 8000a28:	e00c      	b.n	8000a44 <getValueFromVoltageData+0x44>
	} else {
		return ((((~data) + 1) * 0.000152587890625f) * (-1));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fc46 	bl	80002c0 <__aeabi_i2f>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4905      	ldr	r1, [pc, #20]	@ (8000a4c <getValueFromVoltageData+0x4c>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc95 	bl	8000368 <__aeabi_fmul>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
	}
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	39200000 	.word	0x39200000

08000a50 <getADCChannelVoltage>:
		}
	}
}


uint8_t getADCChannelVoltage(I2C_HandleTypeDef* hi2c1, TIM_HandleTypeDef* htim1, uint8_t adcNumber, uint8_t dataChannel, float* dataValue, bool* timElapsedFlag){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	460b      	mov	r3, r1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	4613      	mov	r3, r2
 8000a64:	71bb      	strb	r3, [r7, #6]
	// I2C_ADC_ERRROR_START_SYNC_CMD -> 0x08
	// I2C_ADC_ERROR_RDATA_CMD -> 0x09
	// I2C_ADC_WRONG_CHANNEL -> 0x10

	// Check ADC number
	if (!((adcNumber == 1) || (adcNumber == 2))){
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d008      	beq.n	8000a7e <getADCChannelVoltage+0x2e>
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d005      	beq.n	8000a7e <getADCChannelVoltage+0x2e>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a74:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000a78:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e096      	b.n	8000bac <getADCChannelVoltage+0x15c>
	}

	// Check channel number
	if ((dataChannel < 0) || (dataChannel > 3)){
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d905      	bls.n	8000a90 <getADCChannelVoltage+0x40>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a86:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000a8a:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_CHANNEL;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	e08d      	b.n	8000bac <getADCChannelVoltage+0x15c>
	}

	uint8_t regChannel[4] = {REG_0_CH0, REG_0_CH1, REG_0_CH2, REG_0_CH3};
 8000a90:	4b48      	ldr	r3, [pc, #288]	@ (8000bb4 <getADCChannelVoltage+0x164>)
 8000a92:	61fb      	str	r3, [r7, #28]

	// Check setup is successful
	uint8_t retValues[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	61bb      	str	r3, [r7, #24]
	retValues[0] = ADCSetRegistersValue(hi2c1, adcNumber, 0x00, regChannel[dataChannel]);
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	3320      	adds	r3, #32
 8000a9e:	443b      	add	r3, r7
 8000aa0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000aa4:	79f9      	ldrb	r1, [r7, #7]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f7ff feb6 	bl	800081a <ADCSetRegistersValue>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	763b      	strb	r3, [r7, #24]
	retValues[1] = ADCSetRegistersValue(hi2c1, adcNumber, 0x01, REG_1_DEFAULT);
 8000ab2:	79f9      	ldrb	r1, [r7, #7]
 8000ab4:	23d4      	movs	r3, #212	@ 0xd4
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff feae 	bl	800081a <ADCSetRegistersValue>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	767b      	strb	r3, [r7, #25]
	retValues[2] = ADCSetRegistersValue(hi2c1, adcNumber, 0x02, REG_2_DEFAULT);
 8000ac2:	79f9      	ldrb	r1, [r7, #7]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fea6 	bl	800081a <ADCSetRegistersValue>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	76bb      	strb	r3, [r7, #26]
	retValues[3] = ADCSetRegistersValue(hi2c1, adcNumber, 0x03, REG_3_DEFAULT);
 8000ad2:	79f9      	ldrb	r1, [r7, #7]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe9e 	bl	800081a <ADCSetRegistersValue>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	76fb      	strb	r3, [r7, #27]

	if ((retValues[0] == I2C_ADC_OK) && (retValues[1] == I2C_ADC_OK) && (retValues[2] == I2C_ADC_OK) && (retValues[3] == I2C_ADC_OK)){
 8000ae2:	7e3b      	ldrb	r3, [r7, #24]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d15c      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
 8000ae8:	7e7b      	ldrb	r3, [r7, #25]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d159      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
 8000aee:	7ebb      	ldrb	r3, [r7, #26]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d156      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
 8000af4:	7efb      	ldrb	r3, [r7, #27]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d153      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
		if (ADCStartSyncCommand(hi2c1, adcNumber) == I2C_ADC_OK){
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4619      	mov	r1, r3
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fe4b 	bl	800079a <ADCStartSyncCommand>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d145      	bne.n	8000b96 <getADCChannelVoltage+0x146>
			if (adcNumber == 1){
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d112      	bne.n	8000b36 <getADCChannelVoltage+0xe6>
				while (HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b10:	e009      	b.n	8000b26 <getADCChannelVoltage+0xd6>
					*timElapsedFlag = false;
 8000b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(htim1);
 8000b18:	68b8      	ldr	r0, [r7, #8]
 8000b1a:	f005 f871 	bl	8005c00 <HAL_TIM_Base_Start_IT>
					while (timElapsedFlag == false){
 8000b1e:	bf00      	nop
 8000b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0fc      	beq.n	8000b20 <getADCChannelVoltage+0xd0>
				while (HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4823      	ldr	r0, [pc, #140]	@ (8000bb8 <getADCChannelVoltage+0x168>)
 8000b2a:	f002 fec3 	bl	80038b4 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1ee      	bne.n	8000b12 <getADCChannelVoltage+0xc2>
 8000b34:	e014      	b.n	8000b60 <getADCChannelVoltage+0x110>
					}
				}
			} else if (adcNumber == 2){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d111      	bne.n	8000b60 <getADCChannelVoltage+0x110>
				while (HAL_GPIO_ReadPin(ADC2_NDRDY_GPIO_Port, ADC2_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b3c:	e009      	b.n	8000b52 <getADCChannelVoltage+0x102>
					*timElapsedFlag = false;
 8000b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(htim1);
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f005 f85b 	bl	8005c00 <HAL_TIM_Base_Start_IT>
					while (timElapsedFlag == false){
 8000b4a:	bf00      	nop
 8000b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0fc      	beq.n	8000b4c <getADCChannelVoltage+0xfc>
				while (HAL_GPIO_ReadPin(ADC2_NDRDY_GPIO_Port, ADC2_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b52:	2140      	movs	r1, #64	@ 0x40
 8000b54:	4819      	ldr	r0, [pc, #100]	@ (8000bbc <getADCChannelVoltage+0x16c>)
 8000b56:	f002 fead 	bl	80038b4 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ee      	bne.n	8000b3e <getADCChannelVoltage+0xee>
					}
				}
			}
			int32_t res = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
			if (ADCGetDataValue(hi2c1, adcNumber, &res, I2C_ADC_DATA_VOLT) != I2C_ADC_OK){
 8000b64:	f107 0214 	add.w	r2, r7, #20
 8000b68:	79f9      	ldrb	r1, [r7, #7]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff feaa 	bl	80008c6 <ADCGetDataValue>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <getADCChannelVoltage+0x134>
				*dataValue = I2C_ADC_DATA_ERROR;
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b7e:	601a      	str	r2, [r3, #0]
				return I2C_ADC_ERROR_RDATA_CMD;
 8000b80:	2309      	movs	r3, #9
 8000b82:	e013      	b.n	8000bac <getADCChannelVoltage+0x15c>
			} else {
				*dataValue = getValueFromVoltageData(res);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff3a 	bl	8000a00 <getValueFromVoltageData>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e00a      	b.n	8000bac <getADCChannelVoltage+0x15c>
			}
		} else {
			*dataValue = I2C_ADC_DATA_ERROR;
 8000b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b98:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b9c:	601a      	str	r2, [r3, #0]
			return I2C_ADC_ERROR_START_SYNC_CMD;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	e004      	b.n	8000bac <getADCChannelVoltage+0x15c>
		}
	} else {
		*dataValue = I2C_ADC_DATA_ERROR;
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000ba8:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_SETUP;
 8000baa:	2307      	movs	r3, #7
	}
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	b1a19181 	.word	0xb1a19181
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <LMT84_getTemperature>:
 *      Author: lucad
 */

#include "lmt84.h"

float LMT84_getTemperature(uint8_t mode, float voltage, float* temp){
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b0d8      	sub	sp, #352	@ 0x160
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000bce:	6019      	str	r1, [r3, #0]
 8000bd0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bd4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bde:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000be2:	4602      	mov	r2, r0
 8000be4:	701a      	strb	r2, [r3, #0]
	*temp = 0;
 8000be6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bea:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
	if (mode == LMT84_INT_MODE){
 8000bf6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bfa:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 80cf 	bne.w	8000da4 <LMT84_getTemperature+0x1e4>
		if (voltage > LMT84_MAX_VOLT){
 8000c06:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c0a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c0e:	4988      	ldr	r1, [pc, #544]	@ (8000e30 <LMT84_getTemperature+0x270>)
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	f7ff fd65 	bl	80006e0 <__aeabi_fcmpgt>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <LMT84_getTemperature+0x60>
			return LMT84_ERR_V_OVER;
 8000c1c:	4b85      	ldr	r3, [pc, #532]	@ (8000e34 <LMT84_getTemperature+0x274>)
 8000c1e:	e102      	b.n	8000e26 <LMT84_getTemperature+0x266>
		} else if (voltage < LMT84_MIN_VOLT){
 8000c20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c24:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c28:	4983      	ldr	r1, [pc, #524]	@ (8000e38 <LMT84_getTemperature+0x278>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f7ff fd3a 	bl	80006a4 <__aeabi_fcmplt>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <LMT84_getTemperature+0x7a>
			return LMT84_ERR_V_UNDER;
 8000c36:	4b81      	ldr	r3, [pc, #516]	@ (8000e3c <LMT84_getTemperature+0x27c>)
 8000c38:	e0f5      	b.n	8000e26 <LMT84_getTemperature+0x266>
		} else {
			float volts[LMT84_LEN] = {1.299, 1.273, 1.247, 1.221, 1.194, 1.168, 1.141, 1.114, 1.088, 1.061, 1.034, 1.007, 0.980, 0.952, 0.925,
 8000c3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c3e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000c42:	4a7f      	ldr	r2, [pc, #508]	@ (8000e40 <LMT84_getTemperature+0x280>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	4611      	mov	r1, r2
 8000c48:	23a4      	movs	r3, #164	@ 0xa4
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f005 fbac 	bl	80063a8 <memcpy>
							   0.898, 0.871, 0.843, 0.816, 0.788, 0.760, 0.732, 0.704, 0.676, 0.647, 0.619, 0.591, 0.562, 0.534, 0.505,
							   0.476, 0.448, 0.419, 0.390, 0.361, 0.332, 0.302, 0.273, 0.243, 0.213, 0.183};
			float temps[LMT84_LEN] = {	 -50,   -45,   -40,   -35,   -30,   -25,   -20,   -15,   -10,    -5,     0,     5,    10,    15,    20,
 8000c50:	4a7c      	ldr	r2, [pc, #496]	@ (8000e44 <LMT84_getTemperature+0x284>)
 8000c52:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000c56:	4611      	mov	r1, r2
 8000c58:	22a4      	movs	r2, #164	@ 0xa4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 fba4 	bl	80063a8 <memcpy>
								  25,    30,    35,    40,    45,    50,    55,    60,    65,    70,    75,    80,    85,    90,    95,
								 100,   105,   110,   115,   120,   125,   130,   135,   140,   145,   150};
			if ((sizeof(volts)/sizeof(volts[0])) != (sizeof(temps)/sizeof(temps[0]))){
				return LMT84_ERR_INTERPOLATION;
			} else {
				uint8_t index = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
				for (uint8_t i = 0; i < LMT84_LEN; i++){
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8000c6c:	e01c      	b.n	8000ca8 <LMT84_getTemperature+0xe8>
					if (volts[i] <= voltage) {
 8000c6e:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 8000c72:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c7e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c82:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c86:	4611      	mov	r1, r2
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f7ff fd1f 	bl	80006cc <__aeabi_fcmpge>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <LMT84_getTemperature+0xde>
						index = i;
 8000c94:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000c98:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
						break;
 8000c9c:	e008      	b.n	8000cb0 <LMT84_getTemperature+0xf0>
				for (uint8_t i = 0; i < LMT84_LEN; i++){
 8000c9e:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8000ca8:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000cac:	2b28      	cmp	r3, #40	@ 0x28
 8000cae:	d9de      	bls.n	8000c6e <LMT84_getTemperature+0xae>
					}
				}
				if (index == 0){
 8000cb0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <LMT84_getTemperature+0x108>
					*temp = -50.0f;
 8000cb8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000cbc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a61      	ldr	r2, [pc, #388]	@ (8000e48 <LMT84_getTemperature+0x288>)
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e066      	b.n	8000d96 <LMT84_getTemperature+0x1d6>
				} else {
					*temp = temp[index-1] + (temp[index-1] - temp[index]) * (voltage - volts[index-1]) / (volts[index-1] - volts[index]);
 8000cc8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000ccc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000cd8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	681c      	ldr	r4, [r3, #0]
 8000ce2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000ce6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cea:	3b01      	subs	r3, #1
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000cf2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000d06:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff fa1f 	bl	8000154 <__aeabi_fsub>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461d      	mov	r5, r3
 8000d1a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d2c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d30:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000d34:	4611      	mov	r1, r2
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	f7ff fa0c 	bl	8000154 <__aeabi_fsub>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4628      	mov	r0, r5
 8000d42:	f7ff fb11 	bl	8000368 <__aeabi_fmul>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461d      	mov	r5, r3
 8000d4a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d5c:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8000d60:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff f9f1 	bl	8000154 <__aeabi_fsub>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4628      	mov	r0, r5
 8000d78:	f7ff fbaa 	bl	80004d0 <__aeabi_fdiv>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff f9e9 	bl	8000158 <__addsf3>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d8e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	601a      	str	r2, [r3, #0]
				}
				return *temp;
 8000d96:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d9a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	e040      	b.n	8000e26 <LMT84_getTemperature+0x266>
			}
		}
	} else if (mode == LMT84_SQRT_MODE){
 8000da4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000da8:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d138      	bne.n	8000e24 <LMT84_getTemperature+0x264>
		#include <math.h>
		*temp = (5.506f - sqrtf(30.316036f + 0.00704f * (870.6f - voltage*1000)))/(-0.00352f) + 30;
 8000db2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000db6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000dba:	4924      	ldr	r1, [pc, #144]	@ (8000e4c <LMT84_getTemperature+0x28c>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f7ff fad3 	bl	8000368 <__aeabi_fmul>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <LMT84_getTemperature+0x290>)
 8000dc8:	f7ff f9c4 	bl	8000154 <__aeabi_fsub>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4921      	ldr	r1, [pc, #132]	@ (8000e54 <LMT84_getTemperature+0x294>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fac9 	bl	8000368 <__aeabi_fmul>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	491f      	ldr	r1, [pc, #124]	@ (8000e58 <LMT84_getTemperature+0x298>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff f9bc 	bl	8000158 <__addsf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 faee 	bl	80063c4 <sqrtf>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	481b      	ldr	r0, [pc, #108]	@ (8000e5c <LMT84_getTemperature+0x29c>)
 8000dee:	f7ff f9b1 	bl	8000154 <__aeabi_fsub>
 8000df2:	4603      	mov	r3, r0
 8000df4:	491a      	ldr	r1, [pc, #104]	@ (8000e60 <LMT84_getTemperature+0x2a0>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb6a 	bl	80004d0 <__aeabi_fdiv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4919      	ldr	r1, [pc, #100]	@ (8000e64 <LMT84_getTemperature+0x2a4>)
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9a9 	bl	8000158 <__addsf3>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e0e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	601a      	str	r2, [r3, #0]
		return *temp;
 8000e16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e1a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	e000      	b.n	8000e26 <LMT84_getTemperature+0x266>
	} else {
		return LMT84_ERR_MODE;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <LMT84_getTemperature+0x2a8>)
	}
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	3fa645a2 	.word	0x3fa645a2
 8000e34:	437f0000 	.word	0x437f0000
 8000e38:	3e3b645a 	.word	0x3e3b645a
 8000e3c:	437e0000 	.word	0x437e0000
 8000e40:	080064f0 	.word	0x080064f0
 8000e44:	08006594 	.word	0x08006594
 8000e48:	c2480000 	.word	0xc2480000
 8000e4c:	447a0000 	.word	0x447a0000
 8000e50:	4459a666 	.word	0x4459a666
 8000e54:	3be6afcd 	.word	0x3be6afcd
 8000e58:	41f2873e 	.word	0x41f2873e
 8000e5c:	40b03127 	.word	0x40b03127
 8000e60:	bb66afcd 	.word	0xbb66afcd
 8000e64:	41f00000 	.word	0x41f00000
 8000e68:	437d0000 	.word	0x437d0000

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b0af      	sub	sp, #188	@ 0xbc
 8000e70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e72:	f001 f99b 	bl	80021ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e76:	f000 f9a5 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7a:	f000 fbe5 	bl	8001648 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e7e:	f000 fbc5 	bl	800160c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e82:	f000 f9fb 	bl	800127c <MX_ADC1_Init>
  MX_CAN_Init();
 8000e86:	f000 fa73 	bl	8001370 <MX_CAN_Init>
  MX_I2C1_Init();
 8000e8a:	f000 faa7 	bl	80013dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e8e:	f000 fad3 	bl	8001438 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e92:	f000 fb1f 	bl	80014d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e96:	f000 fb6b 	bl	8001570 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //ADC setup commands
  while (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){}
 8000e9a:	bf00      	nop
 8000e9c:	48ac      	ldr	r0, [pc, #688]	@ (8001150 <main+0x2e4>)
 8000e9e:	f001 fdcd 	bl	8002a3c <HAL_ADCEx_Calibration_Start>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f9      	bne.n	8000e9c <main+0x30>
  HAL_ADC_Start_DMA(&hadc1, dmaRawADC, 5);
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	49aa      	ldr	r1, [pc, #680]	@ (8001154 <main+0x2e8>)
 8000eac:	48a8      	ldr	r0, [pc, #672]	@ (8001150 <main+0x2e4>)
 8000eae:	f001 fadb 	bl	8002468 <HAL_ADC_Start_DMA>

  //CAN Bus setup command
  sFilterConfig.FilterActivation = CAN_FILTER_DISABLE;
 8000eb2:	4ba9      	ldr	r3, [pc, #676]	@ (8001158 <main+0x2ec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 18;
 8000eb8:	4ba7      	ldr	r3, [pc, #668]	@ (8001158 <main+0x2ec>)
 8000eba:	2212      	movs	r2, #18
 8000ebc:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ebe:	4ba6      	ldr	r3, [pc, #664]	@ (8001158 <main+0x2ec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x446<<5;
 8000ec4:	4ba4      	ldr	r3, [pc, #656]	@ (8001158 <main+0x2ec>)
 8000ec6:	f648 02c0 	movw	r2, #35008	@ 0x88c0
 8000eca:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000ecc:	4ba2      	ldr	r3, [pc, #648]	@ (8001158 <main+0x2ec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x446<<5;
 8000ed2:	4ba1      	ldr	r3, [pc, #644]	@ (8001158 <main+0x2ec>)
 8000ed4:	f648 02c0 	movw	r2, #35008	@ 0x88c0
 8000ed8:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000eda:	4b9f      	ldr	r3, [pc, #636]	@ (8001158 <main+0x2ec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ee0:	4b9d      	ldr	r3, [pc, #628]	@ (8001158 <main+0x2ec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ee6:	4b9c      	ldr	r3, [pc, #624]	@ (8001158 <main+0x2ec>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 20;
 8000eec:	4b9a      	ldr	r3, [pc, #616]	@ (8001158 <main+0x2ec>)
 8000eee:	2214      	movs	r2, #20
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24

  //HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);

  pHeaderHighFreq.IDE = CAN_ID_STD;
 8000ef2:	4b9a      	ldr	r3, [pc, #616]	@ (800115c <main+0x2f0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  pHeaderHighFreq.StdId = CAN_FAST_ADDR;
 8000ef8:	4b98      	ldr	r3, [pc, #608]	@ (800115c <main+0x2f0>)
 8000efa:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000efe:	601a      	str	r2, [r3, #0]
  pHeaderHighFreq.RTR = CAN_RTR_DATA;
 8000f00:	4b96      	ldr	r3, [pc, #600]	@ (800115c <main+0x2f0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  pHeaderHighFreq.DLC = 8;
 8000f06:	4b95      	ldr	r3, [pc, #596]	@ (800115c <main+0x2f0>)
 8000f08:	2208      	movs	r2, #8
 8000f0a:	611a      	str	r2, [r3, #16]

  pHeaderLowFreq.IDE = CAN_ID_STD;
 8000f0c:	4b94      	ldr	r3, [pc, #592]	@ (8001160 <main+0x2f4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  pHeaderLowFreq.StdId = CAN_SLOW_ADDR;
 8000f12:	4b93      	ldr	r3, [pc, #588]	@ (8001160 <main+0x2f4>)
 8000f14:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000f18:	601a      	str	r2, [r3, #0]
  pHeaderLowFreq.RTR = CAN_RTR_DATA;
 8000f1a:	4b91      	ldr	r3, [pc, #580]	@ (8001160 <main+0x2f4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  pHeaderLowFreq.DLC = 8;
 8000f20:	4b8f      	ldr	r3, [pc, #572]	@ (8001160 <main+0x2f4>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	611a      	str	r2, [r3, #16]

  HAL_CAN_Start(&hcan);
 8000f26:	488f      	ldr	r0, [pc, #572]	@ (8001164 <main+0x2f8>)
 8000f28:	f001 ff31 	bl	8002d8e <HAL_CAN_Start>

  //Timers start command
  HAL_TIM_Base_Start_IT(&htim2);
 8000f2c:	488e      	ldr	r0, [pc, #568]	@ (8001168 <main+0x2fc>)
 8000f2e:	f004 fe67 	bl	8005c00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f32:	488e      	ldr	r0, [pc, #568]	@ (800116c <main+0x300>)
 8000f34:	f004 fe64 	bl	8005c00 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000f38:	488d      	ldr	r0, [pc, #564]	@ (8001170 <main+0x304>)
 8000f3a:	f004 fe61 	bl	8005c00 <HAL_TIM_Base_Start_IT>
  //- Traditional comparator mode
  //- Active Low comparator
  //- Non latching comparator
  //- Disable comparator

  adsConfigBuffer[0] = ADS_CONFIGURATION_REGISTER;
 8000f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8001174 <main+0x308>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
  adsConfigBuffer[1] = adsMuxConfiguration[0];
 8000f44:	4b8c      	ldr	r3, [pc, #560]	@ (8001178 <main+0x30c>)
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	4b8a      	ldr	r3, [pc, #552]	@ (8001174 <main+0x308>)
 8000f4a:	705a      	strb	r2, [r3, #1]
  adsConfigBuffer[2] = 0b11100011;
 8000f4c:	4b89      	ldr	r3, [pc, #548]	@ (8001174 <main+0x308>)
 8000f4e:	22e3      	movs	r2, #227	@ 0xe3
 8000f50:	709a      	strb	r2, [r3, #2]

  if (HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsConfigBuffer, 3, 100) != HAL_OK){
 8000f52:	2364      	movs	r3, #100	@ 0x64
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2303      	movs	r3, #3
 8000f58:	4a86      	ldr	r2, [pc, #536]	@ (8001174 <main+0x308>)
 8000f5a:	2192      	movs	r1, #146	@ 0x92
 8000f5c:	4887      	ldr	r0, [pc, #540]	@ (800117c <main+0x310>)
 8000f5e:	f002 fe35 	bl	8003bcc <HAL_I2C_Master_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <main+0x106>
	  error_I2C_test = 2;
 8000f68:	4b85      	ldr	r3, [pc, #532]	@ (8001180 <main+0x314>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
	  Error_Handler();
 8000f6e:	f000 fecf 	bl	8001d10 <Error_Handler>
  }

  HAL_Delay(50);
 8000f72:	2032      	movs	r0, #50	@ 0x32
 8000f74:	f001 f97c 	bl	8002270 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (uint8_t i = 0; i < 4; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8000f7e:	e087      	b.n	8001090 <main+0x224>

		//Get conversion data
		if (HAL_I2C_Mem_Read(&hi2c1, ADS_ADDRESS, ADS_CONVERSION_REGISTER, 1, adsRetBuffer, 2, 10) != HAL_OK){
 8000f80:	230a      	movs	r3, #10
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2302      	movs	r3, #2
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b7e      	ldr	r3, [pc, #504]	@ (8001184 <main+0x318>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2192      	movs	r1, #146	@ 0x92
 8000f92:	487a      	ldr	r0, [pc, #488]	@ (800117c <main+0x310>)
 8000f94:	f003 f984 	bl	80042a0 <HAL_I2C_Mem_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d004      	beq.n	8000fa8 <main+0x13c>
			error_I2C_test = 3;
 8000f9e:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <main+0x314>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	701a      	strb	r2, [r3, #0]
			Error_Handler();
 8000fa4:	f000 feb4 	bl	8001d10 <Error_Handler>
		}

		//Decode converted data
		adsRawValues[i] = (adsRetBuffer[0] << 8 | adsRetBuffer[1]);
 8000fa8:	4b76      	ldr	r3, [pc, #472]	@ (8001184 <main+0x318>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b219      	sxth	r1, r3
 8000fb0:	4b74      	ldr	r3, [pc, #464]	@ (8001184 <main+0x318>)
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	b211      	sxth	r1, r2
 8000fbe:	4a72      	ldr	r2, [pc, #456]	@ (8001188 <main+0x31c>)
 8000fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adsVoltageValues[i] = adsRawValues[i] * ADS_CONVERSION_FACTOR;
 8000fc4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000fc8:	4a6f      	ldr	r2, [pc, #444]	@ (8001188 <main+0x31c>)
 8000fca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f976 	bl	80002c0 <__aeabi_i2f>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f897 40a7 	ldrb.w	r4, [r7, #167]	@ 0xa7
 8000fda:	f04f 5179 	mov.w	r1, #1044381696	@ 0x3e400000
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f9c2 	bl	8000368 <__aeabi_fmul>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b68      	ldr	r3, [pc, #416]	@ (800118c <main+0x320>)
 8000fea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		if (adsVoltageValues[i] < 560.0f) {
 8000fee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000ff2:	4a66      	ldr	r2, [pc, #408]	@ (800118c <main+0x320>)
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	4965      	ldr	r1, [pc, #404]	@ (8001190 <main+0x324>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fb52 	bl	80006a4 <__aeabi_fcmplt>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <main+0x1a8>
			adsVoltageValues[i] = 560.0f;
 8001006:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800100a:	4a60      	ldr	r2, [pc, #384]	@ (800118c <main+0x320>)
 800100c:	4960      	ldr	r1, [pc, #384]	@ (8001190 <main+0x324>)
 800100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001012:	e011      	b.n	8001038 <main+0x1cc>
		} else if (adsVoltageValues[i] > 2800.0f) {
 8001014:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001018:	4a5c      	ldr	r2, [pc, #368]	@ (800118c <main+0x320>)
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	495d      	ldr	r1, [pc, #372]	@ (8001194 <main+0x328>)
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fb5d 	bl	80006e0 <__aeabi_fcmpgt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <main+0x1cc>
	  	  	  adsVoltageValues[i] = 2800.0f;
 800102c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001030:	4a56      	ldr	r2, [pc, #344]	@ (800118c <main+0x320>)
 8001032:	4958      	ldr	r1, [pc, #352]	@ (8001194 <main+0x328>)
 8001034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	  	}



		//Prepare for next conversion
		adsNextIndex = (i+1)%4;
 8001038:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800103c:	3301      	adds	r3, #1
 800103e:	425a      	negs	r2, r3
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	bf58      	it	pl
 800104a:	4253      	negpl	r3, r2
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b52      	ldr	r3, [pc, #328]	@ (8001198 <main+0x32c>)
 8001050:	701a      	strb	r2, [r3, #0]
		adsConfigBuffer[1] = adsMuxConfiguration[adsNextIndex];
 8001052:	4b51      	ldr	r3, [pc, #324]	@ (8001198 <main+0x32c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b47      	ldr	r3, [pc, #284]	@ (8001178 <main+0x30c>)
 800105a:	5c9a      	ldrb	r2, [r3, r2]
 800105c:	4b45      	ldr	r3, [pc, #276]	@ (8001174 <main+0x308>)
 800105e:	705a      	strb	r2, [r3, #1]

		//Send to ADC the configuration for next channel read
		if (HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsConfigBuffer, 3, 10) != HAL_OK){
 8001060:	230a      	movs	r3, #10
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2303      	movs	r3, #3
 8001066:	4a43      	ldr	r2, [pc, #268]	@ (8001174 <main+0x308>)
 8001068:	2192      	movs	r1, #146	@ 0x92
 800106a:	4844      	ldr	r0, [pc, #272]	@ (800117c <main+0x310>)
 800106c:	f002 fdae 	bl	8003bcc <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <main+0x214>
			error_I2C_test = 1;
 8001076:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <main+0x314>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
			Error_Handler();
 800107c:	f000 fe48 	bl	8001d10 <Error_Handler>
		}

		//Wait for conversion 860sps -> around 1ms minimum wait
		HAL_Delay(2);
 8001080:	2002      	movs	r0, #2
 8001082:	f001 f8f5 	bl	8002270 <HAL_Delay>
	  for (uint8_t i = 0; i < 4; i++){
 8001086:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800108a:	3301      	adds	r3, #1
 800108c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8001090:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001094:	2b03      	cmp	r3, #3
 8001096:	f67f af73 	bls.w	8000f80 <main+0x114>
	}

	adsVread2_Left = adsVoltageValues[2]/1000;
 800109a:	4b3c      	ldr	r3, [pc, #240]	@ (800118c <main+0x320>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	493f      	ldr	r1, [pc, #252]	@ (800119c <main+0x330>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa15 	bl	80004d0 <__aeabi_fdiv>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <main+0x334>)
 80010ac:	601a      	str	r2, [r3, #0]
	adsVread3_Right = adsVoltageValues[3]/1000;
 80010ae:	4b37      	ldr	r3, [pc, #220]	@ (800118c <main+0x320>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	493a      	ldr	r1, [pc, #232]	@ (800119c <main+0x330>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa0b 	bl	80004d0 <__aeabi_fdiv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b39      	ldr	r3, [pc, #228]	@ (80011a4 <main+0x338>)
 80010c0:	601a      	str	r2, [r3, #0]

	//Place values in the circular buffer
	adsIndex = adsCounter % DMA_CIRC_BUFF_LEN;
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <main+0x33c>)
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <main+0x340>)
 80010c8:	fba3 2301 	umull	r2, r3, r3, r1
 80010cc:	089a      	lsrs	r2, r3, #2
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <main+0x344>)
 80010da:	701a      	strb	r2, [r3, #0]
	adsCh0[adsIndex] = adsVoltageValues[0];
 80010dc:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <main+0x344>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <main+0x320>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a33      	ldr	r2, [pc, #204]	@ (80011b4 <main+0x348>)
 80010e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCh1[adsIndex] = adsVoltageValues[1];
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <main+0x344>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4b26      	ldr	r3, [pc, #152]	@ (800118c <main+0x320>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a30      	ldr	r2, [pc, #192]	@ (80011b8 <main+0x34c>)
 80010f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCh2[adsIndex] = adsVoltageValues[2];
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <main+0x344>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4b22      	ldr	r3, [pc, #136]	@ (800118c <main+0x320>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4a2d      	ldr	r2, [pc, #180]	@ (80011bc <main+0x350>)
 8001108:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCh3[adsIndex] = adsVoltageValues[3];
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <main+0x344>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <main+0x320>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	4a2a      	ldr	r2, [pc, #168]	@ (80011c0 <main+0x354>)
 8001118:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCounter++;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <main+0x33c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <main+0x33c>)
 8001124:	6013      	str	r3, [r2, #0]

	/////////////////////// NEW ADC

	I2C_HandleTypeDef hi2c1;
	TIM_HandleTypeDef htim1;
	float oversamplingVoltages = { 0 };
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	bool tim_elapsed_flag = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	getADCChannelVoltage(&hi2c1, &htim1, 0, 0, &oversamplingVoltages, &tim_elapsed_flag);
 8001134:	4639      	mov	r1, r7
 8001136:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800113a:	f107 039f 	add.w	r3, r7, #159	@ 0x9f
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	2200      	movs	r2, #0
 800114a:	f7ff fc81 	bl	8000a50 <getADCChannelVoltage>
  {
 800114e:	e713      	b.n	8000f78 <main+0x10c>
 8001150:	20000088 	.word	0x20000088
 8001154:	20000260 	.word	0x20000260
 8001158:	20000328 	.word	0x20000328
 800115c:	200002f4 	.word	0x200002f4
 8001160:	2000030c 	.word	0x2000030c
 8001164:	200000fc 	.word	0x200000fc
 8001168:	20000178 	.word	0x20000178
 800116c:	200001c0 	.word	0x200001c0
 8001170:	20000208 	.word	0x20000208
 8001174:	20000360 	.word	0x20000360
 8001178:	20000004 	.word	0x20000004
 800117c:	20000124 	.word	0x20000124
 8001180:	20000259 	.word	0x20000259
 8001184:	2000036c 	.word	0x2000036c
 8001188:	20000364 	.word	0x20000364
 800118c:	20000370 	.word	0x20000370
 8001190:	440c0000 	.word	0x440c0000
 8001194:	452f0000 	.word	0x452f0000
 8001198:	20000388 	.word	0x20000388
 800119c:	447a0000 	.word	0x447a0000
 80011a0:	20000384 	.word	0x20000384
 80011a4:	20000380 	.word	0x20000380
 80011a8:	200003f0 	.word	0x200003f0
 80011ac:	cccccccd 	.word	0xcccccccd
 80011b0:	200003ec 	.word	0x200003ec
 80011b4:	2000038c 	.word	0x2000038c
 80011b8:	200003a0 	.word	0x200003a0
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	200003c8 	.word	0x200003c8

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	@ 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	2228      	movs	r2, #40	@ 0x28
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 f8b6 	bl	8006344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80011fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001212:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001216:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121c:	4618      	mov	r0, r3
 800121e:	f003 ff21 	bl	8005064 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001228:	f000 fd72 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f004 f98d 	bl	8005568 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001254:	f000 fd5c 	bl	8001d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001258:	2302      	movs	r3, #2
 800125a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800125c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001260:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f004 fb0f 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001270:	f000 fd4e 	bl	8001d10 <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	3750      	adds	r7, #80	@ 0x50
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <MX_ADC1_Init+0xec>)
 800128e:	4a37      	ldr	r2, [pc, #220]	@ (800136c <MX_ADC1_Init+0xf0>)
 8001290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001292:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <MX_ADC1_Init+0xec>)
 8001294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001298:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129a:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <MX_ADC1_Init+0xec>)
 800129c:	2201      	movs	r2, #1
 800129e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a0:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a6:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012a8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80012b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012b6:	2205      	movs	r2, #5
 80012b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ba:	482b      	ldr	r0, [pc, #172]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012bc:	f000 fffc 	bl	80022b8 <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012c6:	f000 fd23 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012d2:	2307      	movs	r3, #7
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4823      	ldr	r0, [pc, #140]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012dc:	f001 f9b4 	bl	8002648 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 fd13 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	481c      	ldr	r0, [pc, #112]	@ (8001368 <MX_ADC1_Init+0xec>)
 80012f8:	f001 f9a6 	bl	8002648 <HAL_ADC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001302:	f000 fd05 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001306:	2302      	movs	r3, #2
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800130a:	2303      	movs	r3, #3
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4815      	ldr	r0, [pc, #84]	@ (8001368 <MX_ADC1_Init+0xec>)
 8001314:	f001 f998 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800131e:	f000 fcf7 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001322:	2310      	movs	r3, #16
 8001324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001326:	2304      	movs	r3, #4
 8001328:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800132a:	2305      	movs	r3, #5
 800132c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_ADC1_Init+0xec>)
 8001334:	f001 f988 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800133e:	f000 fce7 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001342:	2311      	movs	r3, #17
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001346:	2305      	movs	r3, #5
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_ADC1_Init+0xec>)
 8001350:	f001 f97a 	bl	8002648 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800135a:	f000 fcd9 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000088 	.word	0x20000088
 800136c:	40012400 	.word	0x40012400

08001370 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001374:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <MX_CAN_Init+0x64>)
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <MX_CAN_Init+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <MX_CAN_Init+0x64>)
 800137c:	2202      	movs	r2, #2
 800137e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <MX_CAN_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_CAN_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_CAN_Init+0x64>)
 800138e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001392:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_CAN_Init+0x64>)
 8001396:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800139a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_CAN_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_CAN_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_CAN_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_CAN_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_CAN_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_CAN_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_CAN_Init+0x64>)
 80013c2:	f001 fbe9 	bl	8002b98 <HAL_CAN_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013cc:	f000 fca0 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200000fc 	.word	0x200000fc
 80013d8:	40006400 	.word	0x40006400

080013dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_I2C1_Init+0x50>)
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <MX_I2C1_Init+0x54>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_I2C1_Init+0x50>)
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <MX_I2C1_Init+0x58>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_I2C1_Init+0x50>)
 80013fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_I2C1_Init+0x50>)
 800141a:	f002 fa93 	bl	8003944 <HAL_I2C_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001424:	f000 fc74 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000124 	.word	0x20000124
 8001430:	40005400 	.word	0x40005400
 8001434:	000186a0 	.word	0x000186a0

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_TIM2_Init+0x98>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_TIM2_Init+0x98>)
 800145e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM2_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_TIM2_Init+0x98>)
 800146c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001470:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_TIM2_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_TIM2_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147e:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <MX_TIM2_Init+0x98>)
 8001480:	f004 fb6e 	bl	8005b60 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800148a:	f000 fc41 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <MX_TIM2_Init+0x98>)
 800149c:	f004 fcf2 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014a6:	f000 fc33 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_TIM2_Init+0x98>)
 80014b8:	f004 fed4 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014c2:	f000 fc25 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000178 	.word	0x20000178

080014d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <MX_TIM3_Init+0x94>)
 80014f2:	4a1e      	ldr	r2, [pc, #120]	@ (800156c <MX_TIM3_Init+0x98>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_TIM3_Init+0x94>)
 80014f8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <MX_TIM3_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <MX_TIM3_Init+0x94>)
 8001506:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_TIM3_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <MX_TIM3_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001518:	4813      	ldr	r0, [pc, #76]	@ (8001568 <MX_TIM3_Init+0x94>)
 800151a:	f004 fb21 	bl	8005b60 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001524:	f000 fbf4 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <MX_TIM3_Init+0x94>)
 8001536:	f004 fca5 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001540:	f000 fbe6 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_TIM3_Init+0x94>)
 8001552:	f004 fe87 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800155c:	f000 fbd8 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200001c0 	.word	0x200001c0
 800156c:	40000400 	.word	0x40000400

08001570 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_TIM4_Init+0x94>)
 800158e:	4a1e      	ldr	r2, [pc, #120]	@ (8001608 <MX_TIM4_Init+0x98>)
 8001590:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <MX_TIM4_Init+0x94>)
 8001594:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001598:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_TIM4_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_TIM4_Init+0x94>)
 80015a2:	22c7      	movs	r2, #199	@ 0xc7
 80015a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <MX_TIM4_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <MX_TIM4_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015b2:	4814      	ldr	r0, [pc, #80]	@ (8001604 <MX_TIM4_Init+0x94>)
 80015b4:	f004 fad4 	bl	8005b60 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 fba7 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	@ (8001604 <MX_TIM4_Init+0x94>)
 80015d0:	f004 fc58 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 fb99 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	@ (8001604 <MX_TIM4_Init+0x94>)
 80015ec:	f004 fe3a 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015f6:	f000 fb8b 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000208 	.word	0x20000208
 8001608:	40000800 	.word	0x40000800

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_DMA_Init+0x38>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <MX_DMA_Init+0x38>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_DMA_Init+0x38>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2106      	movs	r1, #6
 800162e:	200b      	movs	r0, #11
 8001630:	f001 fd97 	bl	8003162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001634:	200b      	movs	r0, #11
 8001636:	f001 fdb0 	bl	800319a <HAL_NVIC_EnableIRQ>

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_GPIO_Init+0x90>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <MX_GPIO_Init+0x90>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_GPIO_Init+0x90>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_GPIO_Init+0x90>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <MX_GPIO_Init+0x90>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_GPIO_Init+0x90>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_GPIO_Init+0x90>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <MX_GPIO_Init+0x90>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_GPIO_Init+0x90>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80016aa:	480c      	ldr	r0, [pc, #48]	@ (80016dc <MX_GPIO_Init+0x94>)
 80016ac:	f002 f919 	bl	80038e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|LED_B_Pin;
 80016b0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80016b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2302      	movs	r3, #2
 80016c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4619      	mov	r1, r3
 80016c8:	4804      	ldr	r0, [pc, #16]	@ (80016dc <MX_GPIO_Init+0x94>)
 80016ca:	f001 ff6f 	bl	80035ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010c00 	.word	0x40010c00

080016e0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//DMA interrupt handler -> Each time DMA completes all conversions save them in a custom circular buffer
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if ((dmaCounter > DMA_EXCLUDED_CYCLES) || (dmaExcludedCyclesState == DMA_EXCLUDED_CYCLES_YES)){
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_ADC_ConvCpltCallback+0xa8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d803      	bhi.n	80016f8 <HAL_ADC_ConvCpltCallback+0x18>
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_ADC_ConvCpltCallback+0xac>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d13c      	bne.n	8001772 <HAL_ADC_ConvCpltCallback+0x92>
		dmaIndex = dmaCounter % DMA_CIRC_BUFF_LEN;
 80016f8:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <HAL_ADC_ConvCpltCallback+0xa8>)
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <HAL_ADC_ConvCpltCallback+0xb0>)
 80016fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001702:	089a      	lsrs	r2, r3, #2
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	1aca      	subs	r2, r1, r3
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001710:	701a      	strb	r2, [r3, #0]
		dmaExcludedCyclesState = DMA_EXCLUDED_CYCLES_YES;
 8001712:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HAL_ADC_ConvCpltCallback+0xac>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
		pcbTempRaw[dmaIndex] = dmaRawADC[0];
 8001718:	4b1f      	ldr	r3, [pc, #124]	@ (8001798 <HAL_ADC_ConvCpltCallback+0xb8>)
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_ADC_ConvCpltCallback+0xb4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	b289      	uxth	r1, r1
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_ADC_ConvCpltCallback+0xbc>)
 8001726:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		pt1Raw[dmaIndex] = dmaRawADC[1];
 800172a:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_ADC_ConvCpltCallback+0xb8>)
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	b289      	uxth	r1, r1
 8001736:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001738:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		pt2Raw[dmaIndex] = dmaRawADC[2];
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_ADC_ConvCpltCallback+0xb8>)
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	b289      	uxth	r1, r1
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_ADC_ConvCpltCallback+0xc4>)
 800174a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		microTempRaw[dmaIndex] = dmaRawADC[3];
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001750:	68d9      	ldr	r1, [r3, #12]
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	b289      	uxth	r1, r1
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <HAL_ADC_ConvCpltCallback+0xc8>)
 800175c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		vRefRaw[dmaIndex] = dmaRawADC[4];
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001762:	6919      	ldr	r1, [r3, #16]
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	b289      	uxth	r1, r1
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_ADC_ConvCpltCallback+0xcc>)
 800176e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}
	dmaCounter++;
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a03      	ldr	r2, [pc, #12]	@ (8001788 <HAL_ADC_ConvCpltCallback+0xa8>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000025c 	.word	0x2000025c
 800178c:	20000000 	.word	0x20000000
 8001790:	cccccccd 	.word	0xcccccccd
 8001794:	2000025a 	.word	0x2000025a
 8001798:	20000260 	.word	0x20000260
 800179c:	2000028c 	.word	0x2000028c
 80017a0:	20000298 	.word	0x20000298
 80017a4:	200002a4 	.word	0x200002a4
 80017a8:	20000280 	.word	0x20000280
 80017ac:	20000274 	.word	0x20000274

080017b0 <HAL_TIM_PeriodElapsedCallback>:

//TIM elapsed callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c0:	d105      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x1e>
		//Tim2 @ 1Hz to blink green led for i'm alive state
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80017c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017c6:	4887      	ldr	r0, [pc, #540]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80017c8:	f002 f8a3 	bl	8003912 <HAL_GPIO_TogglePin>
		pDataHighFreq[6] = (uint8_t) (((uint16_t) tempBrakeSensor2) >> 8); //loHigh
		pDataHighFreq[7] = (uint8_t) tempBrakeSensor2;
		//Send data
		HAL_CAN_AddTxMessage(&hcan, &pHeaderHighFreq, pDataHighFreq, &pTxMailbox);
	}
}
 80017cc:	e24c      	b.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x4b8>
	} else if (htim->Instance == TIM3){
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a85      	ldr	r2, [pc, #532]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	f040 80fc 	bne.w	80019d2 <HAL_TIM_PeriodElapsedCallback+0x222>
		if(dmaCounter > (DMA_EXCLUDED_CYCLES + DMA_CIRC_BUFF_LEN)){
 80017da:	4b84      	ldr	r3, [pc, #528]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	f240 8242 	bls.w	8001c68 <HAL_TIM_PeriodElapsedCallback+0x4b8>
			memcpy(pcbTempBuff, pcbTempRaw, sizeof(pcbTempRaw));
 80017e4:	4b82      	ldr	r3, [pc, #520]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017e6:	4a83      	ldr	r2, [pc, #524]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80017e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ea:	c303      	stmia	r3!, {r0, r1}
 80017ec:	801a      	strh	r2, [r3, #0]
			memcpy(vRefBuff, vRefRaw, sizeof(vRefRaw));
 80017ee:	4b82      	ldr	r3, [pc, #520]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80017f0:	4a82      	ldr	r2, [pc, #520]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f4:	c303      	stmia	r3!, {r0, r1}
 80017f6:	801a      	strh	r2, [r3, #0]
			memcpy(microTempBuff, microTempRaw, sizeof(microTempRaw));
 80017f8:	4b81      	ldr	r3, [pc, #516]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017fa:	4a82      	ldr	r2, [pc, #520]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80017fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017fe:	c303      	stmia	r3!, {r0, r1}
 8001800:	801a      	strh	r2, [r3, #0]
			memcpy(pt1Buff, pt1Raw, sizeof(pt1Raw));
 8001802:	4b81      	ldr	r3, [pc, #516]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001804:	4a81      	ldr	r2, [pc, #516]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001806:	ca07      	ldmia	r2, {r0, r1, r2}
 8001808:	c303      	stmia	r3!, {r0, r1}
 800180a:	801a      	strh	r2, [r3, #0]
			memcpy(pt2Buff, pt2Raw, sizeof(pt2Raw));
 800180c:	4b80      	ldr	r3, [pc, #512]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800180e:	4a81      	ldr	r2, [pc, #516]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001810:	ca07      	ldmia	r2, {r0, r1, r2}
 8001812:	c303      	stmia	r3!, {r0, r1}
 8001814:	801a      	strh	r2, [r3, #0]
			float tmp, fullScale=0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
			for (uint8_t i=0; i < DMA_CIRC_BUFF_LEN; i++){
 800181c:	2300      	movs	r3, #0
 800181e:	75bb      	strb	r3, [r7, #22]
 8001820:	e06f      	b.n	8001902 <HAL_TIM_PeriodElapsedCallback+0x152>
				paperino = i;
 8001822:	4a7d      	ldr	r2, [pc, #500]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001824:	7dbb      	ldrb	r3, [r7, #22]
 8001826:	7013      	strb	r3, [r2, #0]
				pluto = 0;
 8001828:	4b7c      	ldr	r3, [pc, #496]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
				fullScale = getMaxVoltageF103(vRefBuff[i]);
 8001830:	7dbb      	ldrb	r3, [r7, #22]
 8001832:	4a71      	ldr	r2, [pc, #452]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fa9f 	bl	8001d7c <getMaxVoltageF103>
 800183e:	6138      	str	r0, [r7, #16]
				pluto = (((float) pcbTempBuff[i]) / 4095.0f * fullScale);
 8001840:	7dbb      	ldrb	r3, [r7, #22]
 8001842:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fd35 	bl	80002b8 <__aeabi_ui2f>
 800184e:	4603      	mov	r3, r0
 8001850:	4973      	ldr	r1, [pc, #460]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe3c 	bl	80004d0 <__aeabi_fdiv>
 8001858:	4603      	mov	r3, r0
 800185a:	6939      	ldr	r1, [r7, #16]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fd83 	bl	8000368 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001868:	601a      	str	r2, [r3, #0]
				LMT84_getTemperature(LMT84_SQRT_MODE, ((float) pcbTempBuff[i] / 4095.0f * fullScale), &tmp);
 800186a:	7dbb      	ldrb	r3, [r7, #22]
 800186c:	4a60      	ldr	r2, [pc, #384]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800186e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fd20 	bl	80002b8 <__aeabi_ui2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4969      	ldr	r1, [pc, #420]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe27 	bl	80004d0 <__aeabi_fdiv>
 8001882:	4603      	mov	r3, r0
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd6e 	bl	8000368 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	461a      	mov	r2, r3
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff f992 	bl	8000bc0 <LMT84_getTemperature>
				pcbTemp+=tmp;
 800189c:	4b61      	ldr	r3, [pc, #388]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fc57 	bl	8000158 <__addsf3>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018b0:	601a      	str	r2, [r3, #0]
				microTemp += getInternalTemperatureF103(((float) microTempBuff[i]) / 4095.0f * fullScale);
 80018b2:	7dbb      	ldrb	r3, [r7, #22]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80018b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fcfc 	bl	80002b8 <__aeabi_ui2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4957      	ldr	r1, [pc, #348]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe03 	bl	80004d0 <__aeabi_fdiv>
 80018ca:	4603      	mov	r3, r0
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fd4a 	bl	8000368 <__aeabi_fmul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fa2c 	bl	8001d34 <getInternalTemperatureF103>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b52      	ldr	r3, [pc, #328]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7fe fc37 	bl	8000158 <__addsf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018f0:	601a      	str	r2, [r3, #0]
				pippo++;
 80018f2:	4b4e      	ldr	r3, [pc, #312]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a4c      	ldr	r2, [pc, #304]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018fa:	6013      	str	r3, [r2, #0]
			for (uint8_t i=0; i < DMA_CIRC_BUFF_LEN; i++){
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	3301      	adds	r3, #1
 8001900:	75bb      	strb	r3, [r7, #22]
 8001902:	7dbb      	ldrb	r3, [r7, #22]
 8001904:	2b04      	cmp	r3, #4
 8001906:	d98c      	bls.n	8001822 <HAL_TIM_PeriodElapsedCallback+0x72>
			pcbTemp /= DMA_CIRC_BUFF_LEN;
 8001908:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4948      	ldr	r1, [pc, #288]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fdde 	bl	80004d0 <__aeabi_fdiv>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800191a:	601a      	str	r2, [r3, #0]
			microTemp /= DMA_CIRC_BUFF_LEN;
 800191c:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4943      	ldr	r1, [pc, #268]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdd4 	bl	80004d0 <__aeabi_fdiv>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800192e:	601a      	str	r2, [r3, #0]
			pDataLowFreq[0] = (uint8_t) (((uint16_t) (pcbTemp * CAN_PCB_TEMP_SCALE)) >> 8);
 8001930:	4b3c      	ldr	r3, [pc, #240]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	493f      	ldr	r1, [pc, #252]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fd16 	bl	8000368 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe feee 	bl	8000720 <__aeabi_f2uiz>
 8001944:	4603      	mov	r3, r0
 8001946:	b29b      	uxth	r3, r3
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001950:	701a      	strb	r2, [r3, #0]
			pDataLowFreq[1] = (uint8_t) (pcbTemp * CAN_PCB_TEMP_SCALE);
 8001952:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4937      	ldr	r1, [pc, #220]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fd05 	bl	8000368 <__aeabi_fmul>
 800195e:	4603      	mov	r3, r0
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fedd 	bl	8000720 <__aeabi_f2uiz>
 8001966:	4603      	mov	r3, r0
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800196c:	705a      	strb	r2, [r3, #1]
			pDataLowFreq[2] = (uint8_t) (((uint16_t) (microTemp * CAN_MICRO_TEMP_SCALE)) >> 8);
 800196e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4930      	ldr	r1, [pc, #192]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcf7 	bl	8000368 <__aeabi_fmul>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fecf 	bl	8000720 <__aeabi_f2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	b29b      	uxth	r3, r3
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800198e:	709a      	strb	r2, [r3, #2]
			pDataLowFreq[3] = (uint8_t) (microTemp * CAN_MICRO_TEMP_SCALE);
 8001990:	4b25      	ldr	r3, [pc, #148]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4927      	ldr	r1, [pc, #156]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fce6 	bl	8000368 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe febe 	bl	8000720 <__aeabi_f2uiz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019aa:	70da      	strb	r2, [r3, #3]
				pDataLowFreq[4] = 0x00;
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	711a      	strb	r2, [r3, #4]
				pDataLowFreq[5] = 0x00;
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	715a      	strb	r2, [r3, #5]
				pDataLowFreq[6] = 0x00;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	719a      	strb	r2, [r3, #6]
				pDataLowFreq[7] = 0x00;
 80019be:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	71da      	strb	r2, [r3, #7]
			HAL_CAN_AddTxMessage(&hcan, &pHeaderLowFreq, pDataLowFreq, &pTxMailbox);
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80019c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80019c8:	491d      	ldr	r1, [pc, #116]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80019ca:	481e      	ldr	r0, [pc, #120]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80019cc:	f001 fa23 	bl	8002e16 <HAL_CAN_AddTxMessage>
}
 80019d0:	e14a      	b.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x4b8>
	} else if (htim->Instance == TIM4){
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	f040 8145 	bne.w	8001c68 <HAL_TIM_PeriodElapsedCallback+0x4b8>
		for (uint8_t i = 0; i < DMA_CIRC_BUFF_LEN; i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
 80019e2:	e06e      	b.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x312>
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	40000400 	.word	0x40000400
 80019ec:	2000025c 	.word	0x2000025c
 80019f0:	200002b8 	.word	0x200002b8
 80019f4:	2000028c 	.word	0x2000028c
 80019f8:	200002d0 	.word	0x200002d0
 80019fc:	20000274 	.word	0x20000274
 8001a00:	200002c4 	.word	0x200002c4
 8001a04:	20000280 	.word	0x20000280
 8001a08:	200002dc 	.word	0x200002dc
 8001a0c:	20000298 	.word	0x20000298
 8001a10:	200002e8 	.word	0x200002e8
 8001a14:	200002a4 	.word	0x200002a4
 8001a18:	20000258 	.word	0x20000258
 8001a1c:	20000254 	.word	0x20000254
 8001a20:	457ff000 	.word	0x457ff000
 8001a24:	200002b4 	.word	0x200002b4
 8001a28:	200002b0 	.word	0x200002b0
 8001a2c:	20000250 	.word	0x20000250
 8001a30:	40a00000 	.word	0x40a00000
 8001a34:	42c80000 	.word	0x42c80000
 8001a38:	20000350 	.word	0x20000350
 8001a3c:	20000324 	.word	0x20000324
 8001a40:	2000030c 	.word	0x2000030c
 8001a44:	200000fc 	.word	0x200000fc
 8001a48:	40000800 	.word	0x40000800
			adsAverageCh[0] += adsCh0[i];
 8001a4c:	4b88      	ldr	r3, [pc, #544]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	4988      	ldr	r1, [pc, #544]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001a54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7fe fb7c 	bl	8000158 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a66:	601a      	str	r2, [r3, #0]
			adsAverageCh[1] += adsCh1[i];
 8001a68:	4b81      	ldr	r3, [pc, #516]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	4982      	ldr	r1, [pc, #520]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7fe fb6e 	bl	8000158 <__addsf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b7b      	ldr	r3, [pc, #492]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a82:	605a      	str	r2, [r3, #4]
			adsAverageCh[2] += adsCh2[i];
 8001a84:	4b7a      	ldr	r3, [pc, #488]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	497c      	ldr	r1, [pc, #496]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f7fe fb60 	bl	8000158 <__addsf3>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b74      	ldr	r3, [pc, #464]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a9e:	609a      	str	r2, [r3, #8]
			adsAverageCh[3] += adsCh3[i];
 8001aa0:	4b73      	ldr	r3, [pc, #460]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	4976      	ldr	r1, [pc, #472]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f7fe fb52 	bl	8000158 <__addsf3>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b6d      	ldr	r3, [pc, #436]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001aba:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < DMA_CIRC_BUFF_LEN; i++){
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d9c1      	bls.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0x29c>
		adsAverageCh[0] /= DMA_CIRC_BUFF_LEN;
 8001ac8:	4b69      	ldr	r3, [pc, #420]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	496d      	ldr	r1, [pc, #436]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fcfe 	bl	80004d0 <__aeabi_fdiv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b65      	ldr	r3, [pc, #404]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ada:	601a      	str	r2, [r3, #0]
		adsAverageCh[1] /= DMA_CIRC_BUFF_LEN;
 8001adc:	4b64      	ldr	r3, [pc, #400]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4968      	ldr	r1, [pc, #416]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fcf4 	bl	80004d0 <__aeabi_fdiv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b60      	ldr	r3, [pc, #384]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001aee:	605a      	str	r2, [r3, #4]
		adsAverageCh[2] /= DMA_CIRC_BUFF_LEN;
 8001af0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4963      	ldr	r1, [pc, #396]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fcea 	bl	80004d0 <__aeabi_fdiv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001b02:	609a      	str	r2, [r3, #8]
		adsAverageCh[3] /= DMA_CIRC_BUFF_LEN;
 8001b04:	4b5a      	ldr	r3, [pc, #360]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	495e      	ldr	r1, [pc, #376]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fce0 	bl	80004d0 <__aeabi_fdiv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b56      	ldr	r3, [pc, #344]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001b16:	60da      	str	r2, [r3, #12]
		heightSensor1 = ((adsVoltageValues[2]) * (104.0f/(2795.0f-560.0f))-10.0f);
 8001b18:	4b5b      	ldr	r3, [pc, #364]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	495b      	ldr	r1, [pc, #364]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc22 	bl	8000368 <__aeabi_fmul>
 8001b24:	4603      	mov	r3, r0
 8001b26:	495a      	ldr	r1, [pc, #360]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb13 	bl	8000154 <__aeabi_fsub>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b58      	ldr	r3, [pc, #352]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001b34:	601a      	str	r2, [r3, #0]
		heightSensor2 = ((adsVoltageValues[3]) * (104.0f/(2795.0f-560.0f))-10.0f);
 8001b36:	4b54      	ldr	r3, [pc, #336]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4954      	ldr	r1, [pc, #336]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fc13 	bl	8000368 <__aeabi_fmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4952      	ldr	r1, [pc, #328]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb04 	bl	8000154 <__aeabi_fsub>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b51      	ldr	r3, [pc, #324]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001b52:	601a      	str	r2, [r3, #0]
		tempBrakeSensor1 = map(adsVoltageValues[0], 0, 5, 0, 1000);
 8001b54:	4b4c      	ldr	r3, [pc, #304]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4b50      	ldr	r3, [pc, #320]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	4a48      	ldr	r2, [pc, #288]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	f000 f8a7 	bl	8001cb8 <map>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001b6e:	6013      	str	r3, [r2, #0]
		tempBrakeSensor2 = map(adsVoltageValues[1], 0, 5, 0, 1000);
 8001b70:	4b45      	ldr	r3, [pc, #276]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b72:	6858      	ldr	r0, [r3, #4]
 8001b74:	4b49      	ldr	r3, [pc, #292]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	4a41      	ldr	r2, [pc, #260]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	f000 f899 	bl	8001cb8 <map>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a46      	ldr	r2, [pc, #280]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001b8a:	6013      	str	r3, [r2, #0]
		pDataHighFreq[0] = (uint8_t) (((uint16_t) (heightSensor1 * 10)) >> 8); //lohigh
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	493f      	ldr	r1, [pc, #252]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fbe8 	bl	8000368 <__aeabi_fmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fdc0 	bl	8000720 <__aeabi_f2uiz>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bac:	701a      	strb	r2, [r3, #0]
		pDataHighFreq[1] = (uint8_t) (heightSensor1 * 10);
 8001bae:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4937      	ldr	r1, [pc, #220]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fbd7 	bl	8000368 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fdaf 	bl	8000720 <__aeabi_f2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bc8:	705a      	strb	r2, [r3, #1]
		pDataHighFreq[2] = (uint8_t) (((uint16_t) (heightSensor2 * 10)) >> 8); //loHigh
 8001bca:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4930      	ldr	r1, [pc, #192]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fbc9 	bl	8000368 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fda1 	bl	8000720 <__aeabi_f2uiz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bea:	709a      	strb	r2, [r3, #2]
		pDataHighFreq[3] = (uint8_t) (heightSensor2 * 10);
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4927      	ldr	r1, [pc, #156]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fbb8 	bl	8000368 <__aeabi_fmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fd90 	bl	8000720 <__aeabi_f2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c06:	70da      	strb	r2, [r3, #3]
		pDataHighFreq[4] = (uint8_t) (((uint16_t) tempBrakeSensor1) >> 8); //loHigh
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fd87 	bl	8000720 <__aeabi_f2uiz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c1e:	711a      	strb	r2, [r3, #4]
		pDataHighFreq[5] = (uint8_t) (tempBrakeSensor1);
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fd7b 	bl	8000720 <__aeabi_f2uiz>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c30:	715a      	strb	r2, [r3, #5]
		pDataHighFreq[6] = (uint8_t) (((uint16_t) tempBrakeSensor2) >> 8); //loHigh
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fd72 	bl	8000720 <__aeabi_f2uiz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c48:	719a      	strb	r2, [r3, #6]
		pDataHighFreq[7] = (uint8_t) tempBrakeSensor2;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fd66 	bl	8000720 <__aeabi_f2uiz>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c5a:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &pHeaderHighFreq, pDataHighFreq, &pTxMailbox);
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c60:	4913      	ldr	r1, [pc, #76]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001c62:	4814      	ldr	r0, [pc, #80]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001c64:	f001 f8d7 	bl	8002e16 <HAL_CAN_AddTxMessage>
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200003dc 	.word	0x200003dc
 8001c74:	2000038c 	.word	0x2000038c
 8001c78:	200003a0 	.word	0x200003a0
 8001c7c:	200003b4 	.word	0x200003b4
 8001c80:	200003c8 	.word	0x200003c8
 8001c84:	40a00000 	.word	0x40a00000
 8001c88:	20000370 	.word	0x20000370
 8001c8c:	3d3e98cc 	.word	0x3d3e98cc
 8001c90:	41200000 	.word	0x41200000
 8001c94:	200003f4 	.word	0x200003f4
 8001c98:	200003f8 	.word	0x200003f8
 8001c9c:	447a0000 	.word	0x447a0000
 8001ca0:	200003fc 	.word	0x200003fc
 8001ca4:	20000400 	.word	0x20000400
 8001ca8:	20000358 	.word	0x20000358
 8001cac:	20000324 	.word	0x20000324
 8001cb0:	200002f4 	.word	0x200002f4
 8001cb4:	200000fc 	.word	0x200000fc

08001cb8 <map>:
 * out_min e out_max sono i valoi per cui verranno mappati in_min e in_max.
 * es= se in_min = 0 e in_max = 5; out_min = 100 e out_max = 200. allora
 * se x=0 verrà automaticamente mappato a 100
 */
float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
	return(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f7fe fa43 	bl	8000154 <__aeabi_fsub>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461c      	mov	r4, r3
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	6a38      	ldr	r0, [r7, #32]
 8001cd6:	f7fe fa3d 	bl	8000154 <__aeabi_fsub>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7fe fb42 	bl	8000368 <__aeabi_fmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461c      	mov	r4, r3
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fa32 	bl	8000154 <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7fe fbeb 	bl	80004d0 <__aeabi_fdiv>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fa2a 	bl	8000158 <__addsf3>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
	...

08001d10 <Error_Handler>:




void Error_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001d18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d1c:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <Error_Handler+0x20>)
 8001d1e:	f001 fdf8 	bl	8003912 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001d22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d26:	f000 faa3 	bl	8002270 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001d2a:	bf00      	nop
 8001d2c:	e7f4      	b.n	8001d18 <Error_Handler+0x8>
 8001d2e:	bf00      	nop
 8001d30:	40010c00 	.word	0x40010c00

08001d34 <getInternalTemperatureF103>:
 *      Author: lucad
 */

#include "stm32_adc_utils.h"

float getInternalTemperatureF103(float voltage){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	return ((F103_OFFSET - voltage)*1000/F103_SLOPE + 25);
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	480b      	ldr	r0, [pc, #44]	@ (8001d6c <getInternalTemperatureF103+0x38>)
 8001d40:	f7fe fa08 	bl	8000154 <__aeabi_fsub>
 8001d44:	4603      	mov	r3, r0
 8001d46:	490a      	ldr	r1, [pc, #40]	@ (8001d70 <getInternalTemperatureF103+0x3c>)
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb0d 	bl	8000368 <__aeabi_fmul>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4908      	ldr	r1, [pc, #32]	@ (8001d74 <getInternalTemperatureF103+0x40>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbbc 	bl	80004d0 <__aeabi_fdiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4907      	ldr	r1, [pc, #28]	@ (8001d78 <getInternalTemperatureF103+0x44>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe f9fb 	bl	8000158 <__addsf3>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	3fb70a3d 	.word	0x3fb70a3d
 8001d70:	447a0000 	.word	0x447a0000
 8001d74:	4089999a 	.word	0x4089999a
 8001d78:	41c80000 	.word	0x41c80000

08001d7c <getMaxVoltageF103>:

float getMaxVoltageF103(uint16_t adcRaw){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
	return 4095 * F103_VREF/adcRaw;
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa99 	bl	80002c0 <__aeabi_i2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <getMaxVoltageF103+0x28>)
 8001d94:	f7fe fb9c 	bl	80004d0 <__aeabi_fdiv>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	459c1f33 	.word	0x459c1f33

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_MspInit+0x5c>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <HAL_MspInit+0x5c>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6193      	str	r3, [r2, #24]
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_MspInit+0x5c>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <HAL_MspInit+0x5c>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a0e      	ldr	r2, [pc, #56]	@ (8001e04 <HAL_MspInit+0x5c>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_MspInit+0x5c>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_MspInit+0x60>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_MspInit+0x60>)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000

08001e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a29      	ldr	r2, [pc, #164]	@ (8001ecc <HAL_ADC_MspInit+0xc0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d14a      	bne.n	8001ec2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <HAL_ADC_MspInit+0xc4>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_ADC_MspInit+0xc4>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <HAL_ADC_MspInit+0xc4>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <HAL_ADC_MspInit+0xc4>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a21      	ldr	r2, [pc, #132]	@ (8001ed0 <HAL_ADC_MspInit+0xc4>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <HAL_ADC_MspInit+0xc4>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|PT1_Pin|PT2_Pin;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e60:	2303      	movs	r3, #3
 8001e62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481a      	ldr	r0, [pc, #104]	@ (8001ed4 <HAL_ADC_MspInit+0xc8>)
 8001e6c:	f001 fb9e 	bl	80035ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e70:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e72:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_ADC_MspInit+0xd0>)
 8001e74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e76:	4b18      	ldr	r3, [pc, #96]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001ea0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001ea4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ea6:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001ea8:	f001 f992 	bl	80031d0 <HAL_DMA_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001eb2:	f7ff ff2d 	bl	8001d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001eba:	621a      	str	r2, [r3, #32]
 8001ebc:	4a06      	ldr	r2, [pc, #24]	@ (8001ed8 <HAL_ADC_MspInit+0xcc>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40012400 	.word	0x40012400
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	200000b8 	.word	0x200000b8
 8001edc:	40020008 	.word	0x40020008

08001ee0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_CAN_MspInit+0x8c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d131      	bne.n	8001f64 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	61d3      	str	r3, [r2, #28]
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_CAN_MspInit+0x90>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4619      	mov	r1, r3
 8001f44:	480b      	ldr	r0, [pc, #44]	@ (8001f74 <HAL_CAN_MspInit+0x94>)
 8001f46:	f001 fb31 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <HAL_CAN_MspInit+0x94>)
 8001f60:	f001 fb24 	bl	80035ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40006400 	.word	0x40006400
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010800 	.word	0x40010800

08001f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a15      	ldr	r2, [pc, #84]	@ (8001fe8 <HAL_I2C_MspInit+0x70>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d123      	bne.n	8001fe0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_I2C_MspInit+0x74>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a13      	ldr	r2, [pc, #76]	@ (8001fec <HAL_I2C_MspInit+0x74>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_I2C_MspInit+0x74>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fb0:	23c0      	movs	r3, #192	@ 0xc0
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb4:	2312      	movs	r3, #18
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480b      	ldr	r0, [pc, #44]	@ (8001ff0 <HAL_I2C_MspInit+0x78>)
 8001fc4:	f001 faf2 	bl	80035ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <HAL_I2C_MspInit+0x74>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	@ (8001fec <HAL_I2C_MspInit+0x74>)
 8001fce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fd2:	61d3      	str	r3, [r2, #28]
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_I2C_MspInit+0x74>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010c00 	.word	0x40010c00

08001ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002004:	d114      	bne.n	8002030 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4b26      	ldr	r3, [pc, #152]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a25      	ldr	r2, [pc, #148]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	210f      	movs	r1, #15
 8002022:	201c      	movs	r0, #28
 8002024:	f001 f89d 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002028:	201c      	movs	r0, #28
 800202a:	f001 f8b6 	bl	800319a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800202e:	e032      	b.n	8002096 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_TIM_Base_MspInit+0xb0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d114      	bne.n	8002064 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203a:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2104      	movs	r1, #4
 8002056:	201d      	movs	r0, #29
 8002058:	f001 f883 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800205c:	201d      	movs	r0, #29
 800205e:	f001 f89c 	bl	800319a <HAL_NVIC_EnableIRQ>
}
 8002062:	e018      	b.n	8002096 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0f      	ldr	r2, [pc, #60]	@ (80020a8 <HAL_TIM_Base_MspInit+0xb4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d113      	bne.n	8002096 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_TIM_Base_MspInit+0xac>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2103      	movs	r1, #3
 800208a:	201e      	movs	r0, #30
 800208c:	f001 f869 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002090:	201e      	movs	r0, #30
 8002092:	f001 f882 	bl	800319a <HAL_NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <NMI_Handler+0x4>

080020b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <MemManage_Handler+0x4>

080020c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fc:	f000 f89c 	bl	8002238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <DMA1_Channel1_IRQHandler+0x10>)
 800210a:	f001 f91b 	bl	8003344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200000b8 	.word	0x200000b8

08002118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <TIM2_IRQHandler+0x10>)
 800211e:	f003 fdc1 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000178 	.word	0x20000178

0800212c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <TIM3_IRQHandler+0x10>)
 8002132:	f003 fdb7 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200001c0 	.word	0x200001c0

08002140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <TIM4_IRQHandler+0x10>)
 8002146:	f003 fdad 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000208 	.word	0x20000208

08002154 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002160:	f7ff fff8 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480b      	ldr	r0, [pc, #44]	@ (8002194 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002166:	490c      	ldr	r1, [pc, #48]	@ (8002198 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002168:	4a0c      	ldr	r2, [pc, #48]	@ (800219c <LoopFillZerobss+0x16>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800217c:	4c09      	ldr	r4, [pc, #36]	@ (80021a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f004 f8e9 	bl	8006360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218e:	f7fe fe6d 	bl	8000e6c <main>
  bx lr
 8002192:	4770      	bx	lr
  ldr r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002198:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800219c:	08006680 	.word	0x08006680
  ldr r2, =_sbss
 80021a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80021a4:	20000540 	.word	0x20000540

080021a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC1_2_IRQHandler>
	...

080021ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_Init+0x28>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <HAL_Init+0x28>)
 80021b6:	f043 0310 	orr.w	r3, r3, #16
 80021ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f000 ffc5 	bl	800314c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c2:	200f      	movs	r0, #15
 80021c4:	f000 f808 	bl	80021d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c8:	f7ff fdee 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_InitTick+0x54>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_InitTick+0x58>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 ffdd 	bl	80031b6 <HAL_SYSTICK_Config>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e00e      	b.n	8002224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d80a      	bhi.n	8002222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220c:	2200      	movs	r2, #0
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f000 ffa5 	bl	8003162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002218:	4a06      	ldr	r2, [pc, #24]	@ (8002234 <HAL_InitTick+0x5c>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000008 	.word	0x20000008
 8002230:	20000010 	.word	0x20000010
 8002234:	2000000c 	.word	0x2000000c

08002238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_IncTick+0x1c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_IncTick+0x20>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4413      	add	r3, r2
 8002248:	4a03      	ldr	r2, [pc, #12]	@ (8002258 <HAL_IncTick+0x20>)
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000010 	.word	0x20000010
 8002258:	20000404 	.word	0x20000404

0800225c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b02      	ldr	r3, [pc, #8]	@ (800226c <HAL_GetTick+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000404 	.word	0x20000404

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff fff0 	bl	800225c <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <HAL_Delay+0x44>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffe0 	bl	800225c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000010 	.word	0x20000010

080022b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0be      	b.n	8002458 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fd88 	bl	8001e0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 faf5 	bl	80028ec <ADC_ConversionStop_Disable>
 8002302:	4603      	mov	r3, r0
 8002304:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8099 	bne.w	8002446 <HAL_ADC_Init+0x18e>
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 8095 	bne.w	8002446 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002324:	f023 0302 	bic.w	r3, r3, #2
 8002328:	f043 0202 	orr.w	r2, r3, #2
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002338:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7b1b      	ldrb	r3, [r3, #12]
 800233e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002340:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	4313      	orrs	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002350:	d003      	beq.n	800235a <HAL_ADC_Init+0xa2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_ADC_Init+0xa8>
 800235a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235e:	e000      	b.n	8002362 <HAL_ADC_Init+0xaa>
 8002360:	2300      	movs	r3, #0
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7d1b      	ldrb	r3, [r3, #20]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d119      	bne.n	80023a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7b1b      	ldrb	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	3b01      	subs	r3, #1
 800237e:	035a      	lsls	r2, r3, #13
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e00b      	b.n	80023a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_ADC_Init+0x1a8>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023d4:	d003      	beq.n	80023de <HAL_ADC_Init+0x126>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d104      	bne.n	80023e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	051b      	lsls	r3, r3, #20
 80023e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <HAL_ADC_Init+0x1ac>)
 8002404:	4013      	ands	r3, r2
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d10b      	bne.n	8002424 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002422:	e018      	b.n	8002456 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	f023 0312 	bic.w	r3, r3, #18
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002444:	e007      	b.n	8002456 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	ffe1f7fd 	.word	0xffe1f7fd
 8002464:	ff1f0efe 	.word	0xff1f0efe

08002468 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a64      	ldr	r2, [pc, #400]	@ (8002610 <HAL_ADC_Start_DMA+0x1a8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_ADC_Start_DMA+0x24>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a63      	ldr	r2, [pc, #396]	@ (8002614 <HAL_ADC_Start_DMA+0x1ac>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d106      	bne.n	800249a <HAL_ADC_Start_DMA+0x32>
 800248c:	4b60      	ldr	r3, [pc, #384]	@ (8002610 <HAL_ADC_Start_DMA+0x1a8>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 80b3 	bne.w	8002600 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_Start_DMA+0x40>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e0ae      	b.n	8002606 <HAL_ADC_Start_DMA+0x19e>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f9c1 	bl	8002838 <ADC_Enable>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 809a 	bne.w	80025f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a4e      	ldr	r2, [pc, #312]	@ (8002614 <HAL_ADC_Start_DMA+0x1ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Start_DMA+0x84>
 80024e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002610 <HAL_ADC_Start_DMA+0x1a8>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d115      	bne.n	8002518 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d026      	beq.n	8002554 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800250e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002516:	e01d      	b.n	8002554 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a39      	ldr	r2, [pc, #228]	@ (8002610 <HAL_ADC_Start_DMA+0x1a8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d004      	beq.n	8002538 <HAL_ADC_Start_DMA+0xd0>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a38      	ldr	r2, [pc, #224]	@ (8002614 <HAL_ADC_Start_DMA+0x1ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d10d      	bne.n	8002554 <HAL_ADC_Start_DMA+0xec>
 8002538:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <HAL_ADC_Start_DMA+0x1a8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800254c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	f023 0206 	bic.w	r2, r3, #6
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800256c:	e002      	b.n	8002574 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a25      	ldr	r2, [pc, #148]	@ (8002618 <HAL_ADC_Start_DMA+0x1b0>)
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a24      	ldr	r2, [pc, #144]	@ (800261c <HAL_ADC_Start_DMA+0x1b4>)
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a23      	ldr	r2, [pc, #140]	@ (8002620 <HAL_ADC_Start_DMA+0x1b8>)
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0202 	mvn.w	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a18      	ldr	r0, [r3, #32]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	334c      	adds	r3, #76	@ 0x4c
 80025b8:	4619      	mov	r1, r3
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f000 fe61 	bl	8003284 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025cc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025d0:	d108      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025e2:	e00f      	b.n	8002604 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025f4:	e006      	b.n	8002604 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80025fe:	e001      	b.n	8002604 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40012400 	.word	0x40012400
 8002614:	40012800 	.word	0x40012800
 8002618:	0800296f 	.word	0x0800296f
 800261c:	080029eb 	.word	0x080029eb
 8002620:	08002a07 	.word	0x08002a07

08002624 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x20>
 8002664:	2302      	movs	r3, #2
 8002666:	e0dc      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1da>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b06      	cmp	r3, #6
 8002676:	d81c      	bhi.n	80026b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b05      	subs	r3, #5
 800268a:	221f      	movs	r2, #31
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	4019      	ands	r1, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b05      	subs	r3, #5
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80026b0:	e03c      	b.n	800272c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d81c      	bhi.n	80026f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b23      	subs	r3, #35	@ 0x23
 80026cc:	221f      	movs	r2, #31
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	4019      	ands	r1, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b23      	subs	r3, #35	@ 0x23
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f2:	e01b      	b.n	800272c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b41      	subs	r3, #65	@ 0x41
 8002706:	221f      	movs	r2, #31
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	4019      	ands	r1, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b41      	subs	r3, #65	@ 0x41
 8002720:	fa00 f203 	lsl.w	r2, r0, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b09      	cmp	r3, #9
 8002732:	d91c      	bls.n	800276e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68d9      	ldr	r1, [r3, #12]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	3b1e      	subs	r3, #30
 8002746:	2207      	movs	r2, #7
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	4019      	ands	r1, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6898      	ldr	r0, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	3b1e      	subs	r3, #30
 8002760:	fa00 f203 	lsl.w	r2, r0, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	e019      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	2207      	movs	r2, #7
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	4019      	ands	r1, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6898      	ldr	r0, [r3, #8]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	fa00 f203 	lsl.w	r2, r0, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d003      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ae:	2b11      	cmp	r3, #17
 80027b0:	d132      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_ADC_ConfigChannel+0x1e4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d125      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d126      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d11a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_ADC_ConfigChannel+0x1e8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <HAL_ADC_ConfigChannel+0x1ec>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	0c9a      	lsrs	r2, r3, #18
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027f8:	e002      	b.n	8002800 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f9      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x1b2>
 8002806:	e007      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012400 	.word	0x40012400
 8002830:	20000008 	.word	0x20000008
 8002834:	431bde83 	.word	0x431bde83

08002838 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d040      	beq.n	80028d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002866:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <ADC_Enable+0xac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <ADC_Enable+0xb0>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002874:	e002      	b.n	800287c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3b01      	subs	r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f9      	bne.n	8002876 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002882:	f7ff fceb 	bl	800225c <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002888:	e01f      	b.n	80028ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800288a:	f7ff fce7 	bl	800225c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d918      	bls.n	80028ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d011      	beq.n	80028ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e007      	b.n	80028da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d1d8      	bne.n	800288a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000008 	.word	0x20000008
 80028e8:	431bde83 	.word	0x431bde83

080028ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d12e      	bne.n	8002964 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002916:	f7ff fca1 	bl	800225c <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800291c:	e01b      	b.n	8002956 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800291e:	f7ff fc9d 	bl	800225c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d914      	bls.n	8002956 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10d      	bne.n	8002956 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293e:	f043 0210 	orr.w	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	f043 0201 	orr.w	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e007      	b.n	8002966 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d0dc      	beq.n	800291e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002984:	2b00      	cmp	r3, #0
 8002986:	d127      	bne.n	80029d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800299e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029a2:	d115      	bne.n	80029d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe fe85 	bl	80016e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80029d6:	e004      	b.n	80029e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fe13 	bl	8002624 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fe02 	bl	8002636 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e097      	b.n	8002b8a <HAL_ADCEx_Calibration_Start+0x14e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ff42 	bl	80028ec <ADC_ConversionStop_Disable>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fee3 	bl	8002838 <ADC_Enable>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 8081 	bne.w	8002b80 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a86:	f023 0302 	bic.w	r3, r3, #2
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a92:	4b40      	ldr	r3, [pc, #256]	@ (8002b94 <HAL_ADCEx_Calibration_Start+0x158>)
 8002a94:	681c      	ldr	r4, [r3, #0]
 8002a96:	2002      	movs	r0, #2
 8002a98:	f002 ffac 	bl	80059f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002aa2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002aa4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002aa6:	e002      	b.n	8002aae <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0208 	orr.w	r2, r2, #8
 8002ac2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ac4:	f7ff fbca 	bl	800225c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aca:	e01b      	b.n	8002b04 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002acc:	f7ff fbc6 	bl	800225c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b0a      	cmp	r3, #10
 8002ad8:	d914      	bls.n	8002b04 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f023 0312 	bic.w	r3, r3, #18
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e042      	b.n	8002b8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1dc      	bne.n	8002acc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0204 	orr.w	r2, r2, #4
 8002b20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b22:	f7ff fb9b 	bl	800225c <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b28:	e01b      	b.n	8002b62 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b2a:	f7ff fb97 	bl	800225c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b0a      	cmp	r3, #10
 8002b36:	d914      	bls.n	8002b62 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	f023 0312 	bic.w	r3, r3, #18
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e013      	b.n	8002b8a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1dc      	bne.n	8002b2a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	f023 0303 	bic.w	r3, r3, #3
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000008 	.word	0x20000008

08002b98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0ed      	b.n	8002d86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff f992 	bl	8001ee0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bcc:	f7ff fb46 	bl	800225c <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bd2:	e012      	b.n	8002bfa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd4:	f7ff fb42 	bl	800225c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b0a      	cmp	r3, #10
 8002be0:	d90b      	bls.n	8002bfa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0c5      	b.n	8002d86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0e5      	beq.n	8002bd4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0202 	bic.w	r2, r2, #2
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c18:	f7ff fb20 	bl	800225c <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c1e:	e012      	b.n	8002c46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c20:	f7ff fb1c 	bl	800225c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b0a      	cmp	r3, #10
 8002c2c:	d90b      	bls.n	8002c46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e09f      	b.n	8002d86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e5      	bne.n	8002c20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7e1b      	ldrb	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e007      	b.n	8002c7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7e5b      	ldrb	r3, [r3, #25]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e007      	b.n	8002ca8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e9b      	ldrb	r3, [r3, #26]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e007      	b.n	8002cd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0220 	bic.w	r2, r2, #32
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7edb      	ldrb	r3, [r3, #27]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d108      	bne.n	8002cec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0210 	bic.w	r2, r2, #16
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e007      	b.n	8002cfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0210 	orr.w	r2, r2, #16
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7f1b      	ldrb	r3, [r3, #28]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0208 	orr.w	r2, r2, #8
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e007      	b.n	8002d26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0208 	bic.w	r2, r2, #8
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7f5b      	ldrb	r3, [r3, #29]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d108      	bne.n	8002d40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0204 	orr.w	r2, r2, #4
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e007      	b.n	8002d50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0204 	bic.w	r2, r2, #4
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	ea42 0103 	orr.w	r1, r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d12e      	bne.n	8002e00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dba:	f7ff fa4f 	bl	800225c <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dc0:	e012      	b.n	8002de8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002dc2:	f7ff fa4b 	bl	800225c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b0a      	cmp	r3, #10
 8002dce:	d90b      	bls.n	8002de8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2205      	movs	r2, #5
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e012      	b.n	8002e0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e5      	bne.n	8002dc2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e006      	b.n	8002e0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b089      	sub	sp, #36	@ 0x24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d003      	beq.n	8002e42 <HAL_CAN_AddTxMessage+0x2c>
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 80ad 	bne.w	8002f9c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8095 	beq.w	8002f8c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	0e1b      	lsrs	r3, r3, #24
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	409a      	lsls	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e88:	68f9      	ldr	r1, [r7, #12]
 8002e8a:	6809      	ldr	r1, [r1, #0]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3318      	adds	r3, #24
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	440b      	add	r3, r1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e00f      	b.n	8002eba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ea4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002eae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3318      	adds	r3, #24
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	440b      	add	r3, r1
 8002eb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	440b      	add	r3, r1
 8002eca:	3304      	adds	r3, #4
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	7d1b      	ldrb	r3, [r3, #20]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d111      	bne.n	8002efa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3318      	adds	r3, #24
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	6811      	ldr	r1, [r2, #0]
 8002eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3307      	adds	r3, #7
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	061a      	lsls	r2, r3, #24
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3306      	adds	r3, #6
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3305      	adds	r3, #5
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	4313      	orrs	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	3204      	adds	r2, #4
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	6811      	ldr	r1, [r2, #0]
 8002f22:	ea43 0200 	orr.w	r2, r3, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002f30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3303      	adds	r3, #3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	061a      	lsls	r2, r3, #24
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	4610      	mov	r0, r2
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	6811      	ldr	r1, [r2, #0]
 8002f58:	ea43 0200 	orr.w	r2, r3, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002f66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3318      	adds	r3, #24
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	4413      	add	r3, r2
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	6811      	ldr	r1, [r2, #0]
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3318      	adds	r3, #24
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	440b      	add	r3, r1
 8002f86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e00e      	b.n	8002faa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e006      	b.n	8002faa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	@ 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4906      	ldr	r1, [pc, #24]	@ (800304c <__NVIC_EnableIRQ+0x34>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	@ (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	@ (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	@ 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003118:	d301      	bcc.n	800311e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311a:	2301      	movs	r3, #1
 800311c:	e00f      	b.n	800313e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311e:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <SysTick_Config+0x40>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003126:	210f      	movs	r1, #15
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f7ff ff90 	bl	8003050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <SysTick_Config+0x40>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003136:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <SysTick_Config+0x40>)
 8003138:	2207      	movs	r2, #7
 800313a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	e000e010 	.word	0xe000e010

0800314c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff2d 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003174:	f7ff ff42 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 8003178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f7ff ff90 	bl	80030a4 <NVIC_EncodePriority>
 8003184:	4602      	mov	r2, r0
 8003186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ff5f 	bl	8003050 <__NVIC_SetPriority>
}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff35 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffa2 	bl	8003108 <SysTick_Config>
 80031c4:	4603      	mov	r3, r0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e043      	b.n	800326e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <HAL_DMA_Init+0xa8>)
 80031ee:	4413      	add	r3, r2
 80031f0:	4a22      	ldr	r2, [pc, #136]	@ (800327c <HAL_DMA_Init+0xac>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	009a      	lsls	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <HAL_DMA_Init+0xb0>)
 8003202:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800321a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800321e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	bffdfff8 	.word	0xbffdfff8
 800327c:	cccccccd 	.word	0xcccccccd
 8003280:	40020000 	.word	0x40020000

08003284 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_DMA_Start_IT+0x20>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e04b      	b.n	800333c <HAL_DMA_Start_IT+0xb8>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d13a      	bne.n	800332e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f937 	bl	8003550 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 020e 	orr.w	r2, r2, #14
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e00f      	b.n	800331c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 020a 	orr.w	r2, r2, #10
 800331a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e005      	b.n	800333a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	2204      	movs	r2, #4
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d04f      	beq.n	800340c <HAL_DMA_IRQHandler+0xc8>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d04a      	beq.n	800340c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a66      	ldr	r2, [pc, #408]	@ (8003534 <HAL_DMA_IRQHandler+0x1f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d029      	beq.n	80033f2 <HAL_DMA_IRQHandler+0xae>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a65      	ldr	r2, [pc, #404]	@ (8003538 <HAL_DMA_IRQHandler+0x1f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0xaa>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a63      	ldr	r2, [pc, #396]	@ (800353c <HAL_DMA_IRQHandler+0x1f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01a      	beq.n	80033e8 <HAL_DMA_IRQHandler+0xa4>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a62      	ldr	r2, [pc, #392]	@ (8003540 <HAL_DMA_IRQHandler+0x1fc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d012      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x9e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a60      	ldr	r2, [pc, #384]	@ (8003544 <HAL_DMA_IRQHandler+0x200>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00a      	beq.n	80033dc <HAL_DMA_IRQHandler+0x98>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003548 <HAL_DMA_IRQHandler+0x204>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x92>
 80033d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033d4:	e00e      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb0>
 80033d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033da:	e00b      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb0>
 80033dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033e0:	e008      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb0>
 80033e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033e6:	e005      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb0>
 80033e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ec:	e002      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb0>
 80033ee:	2340      	movs	r3, #64	@ 0x40
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_IRQHandler+0xb0>
 80033f2:	2304      	movs	r3, #4
 80033f4:	4a55      	ldr	r2, [pc, #340]	@ (800354c <HAL_DMA_IRQHandler+0x208>)
 80033f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8094 	beq.w	800352a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800340a:	e08e      	b.n	800352a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	2202      	movs	r2, #2
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d056      	beq.n	80034ca <HAL_DMA_IRQHandler+0x186>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d051      	beq.n	80034ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020a 	bic.w	r2, r2, #10
 8003442:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a38      	ldr	r2, [pc, #224]	@ (8003534 <HAL_DMA_IRQHandler+0x1f0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d029      	beq.n	80034aa <HAL_DMA_IRQHandler+0x166>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a37      	ldr	r2, [pc, #220]	@ (8003538 <HAL_DMA_IRQHandler+0x1f4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x162>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a35      	ldr	r2, [pc, #212]	@ (800353c <HAL_DMA_IRQHandler+0x1f8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x15c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_DMA_IRQHandler+0x1fc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d012      	beq.n	800349a <HAL_DMA_IRQHandler+0x156>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <HAL_DMA_IRQHandler+0x200>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00a      	beq.n	8003494 <HAL_DMA_IRQHandler+0x150>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <HAL_DMA_IRQHandler+0x204>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <HAL_DMA_IRQHandler+0x14a>
 8003488:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800348c:	e00e      	b.n	80034ac <HAL_DMA_IRQHandler+0x168>
 800348e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003492:	e00b      	b.n	80034ac <HAL_DMA_IRQHandler+0x168>
 8003494:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003498:	e008      	b.n	80034ac <HAL_DMA_IRQHandler+0x168>
 800349a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800349e:	e005      	b.n	80034ac <HAL_DMA_IRQHandler+0x168>
 80034a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034a4:	e002      	b.n	80034ac <HAL_DMA_IRQHandler+0x168>
 80034a6:	2320      	movs	r3, #32
 80034a8:	e000      	b.n	80034ac <HAL_DMA_IRQHandler+0x168>
 80034aa:	2302      	movs	r3, #2
 80034ac:	4a27      	ldr	r2, [pc, #156]	@ (800354c <HAL_DMA_IRQHandler+0x208>)
 80034ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d034      	beq.n	800352a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034c8:	e02f      	b.n	800352a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2208      	movs	r2, #8
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d028      	beq.n	800352c <HAL_DMA_IRQHandler+0x1e8>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d023      	beq.n	800352c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 020e 	bic.w	r2, r2, #14
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	2b00      	cmp	r3, #0
 8003520:	d004      	beq.n	800352c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
    }
  }
  return;
 800352a:	bf00      	nop
 800352c:	bf00      	nop
}
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40020008 	.word	0x40020008
 8003538:	4002001c 	.word	0x4002001c
 800353c:	40020030 	.word	0x40020030
 8003540:	40020044 	.word	0x40020044
 8003544:	40020058 	.word	0x40020058
 8003548:	4002006c 	.word	0x4002006c
 800354c:	40020000 	.word	0x40020000

08003550 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003566:	2101      	movs	r1, #1
 8003568:	fa01 f202 	lsl.w	r2, r1, r2
 800356c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d108      	bne.n	8003590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800358e:	e007      	b.n	80035a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b08b      	sub	sp, #44	@ 0x2c
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	e169      	b.n	8003894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035c0:	2201      	movs	r2, #1
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	429a      	cmp	r2, r3
 80035da:	f040 8158 	bne.w	800388e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4a9a      	ldr	r2, [pc, #616]	@ (800384c <HAL_GPIO_Init+0x2a0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d05e      	beq.n	80036a6 <HAL_GPIO_Init+0xfa>
 80035e8:	4a98      	ldr	r2, [pc, #608]	@ (800384c <HAL_GPIO_Init+0x2a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d875      	bhi.n	80036da <HAL_GPIO_Init+0x12e>
 80035ee:	4a98      	ldr	r2, [pc, #608]	@ (8003850 <HAL_GPIO_Init+0x2a4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d058      	beq.n	80036a6 <HAL_GPIO_Init+0xfa>
 80035f4:	4a96      	ldr	r2, [pc, #600]	@ (8003850 <HAL_GPIO_Init+0x2a4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d86f      	bhi.n	80036da <HAL_GPIO_Init+0x12e>
 80035fa:	4a96      	ldr	r2, [pc, #600]	@ (8003854 <HAL_GPIO_Init+0x2a8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d052      	beq.n	80036a6 <HAL_GPIO_Init+0xfa>
 8003600:	4a94      	ldr	r2, [pc, #592]	@ (8003854 <HAL_GPIO_Init+0x2a8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d869      	bhi.n	80036da <HAL_GPIO_Init+0x12e>
 8003606:	4a94      	ldr	r2, [pc, #592]	@ (8003858 <HAL_GPIO_Init+0x2ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d04c      	beq.n	80036a6 <HAL_GPIO_Init+0xfa>
 800360c:	4a92      	ldr	r2, [pc, #584]	@ (8003858 <HAL_GPIO_Init+0x2ac>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d863      	bhi.n	80036da <HAL_GPIO_Init+0x12e>
 8003612:	4a92      	ldr	r2, [pc, #584]	@ (800385c <HAL_GPIO_Init+0x2b0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d046      	beq.n	80036a6 <HAL_GPIO_Init+0xfa>
 8003618:	4a90      	ldr	r2, [pc, #576]	@ (800385c <HAL_GPIO_Init+0x2b0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d85d      	bhi.n	80036da <HAL_GPIO_Init+0x12e>
 800361e:	2b12      	cmp	r3, #18
 8003620:	d82a      	bhi.n	8003678 <HAL_GPIO_Init+0xcc>
 8003622:	2b12      	cmp	r3, #18
 8003624:	d859      	bhi.n	80036da <HAL_GPIO_Init+0x12e>
 8003626:	a201      	add	r2, pc, #4	@ (adr r2, 800362c <HAL_GPIO_Init+0x80>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	080036a7 	.word	0x080036a7
 8003630:	08003681 	.word	0x08003681
 8003634:	08003693 	.word	0x08003693
 8003638:	080036d5 	.word	0x080036d5
 800363c:	080036db 	.word	0x080036db
 8003640:	080036db 	.word	0x080036db
 8003644:	080036db 	.word	0x080036db
 8003648:	080036db 	.word	0x080036db
 800364c:	080036db 	.word	0x080036db
 8003650:	080036db 	.word	0x080036db
 8003654:	080036db 	.word	0x080036db
 8003658:	080036db 	.word	0x080036db
 800365c:	080036db 	.word	0x080036db
 8003660:	080036db 	.word	0x080036db
 8003664:	080036db 	.word	0x080036db
 8003668:	080036db 	.word	0x080036db
 800366c:	080036db 	.word	0x080036db
 8003670:	08003689 	.word	0x08003689
 8003674:	0800369d 	.word	0x0800369d
 8003678:	4a79      	ldr	r2, [pc, #484]	@ (8003860 <HAL_GPIO_Init+0x2b4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800367e:	e02c      	b.n	80036da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	623b      	str	r3, [r7, #32]
          break;
 8003686:	e029      	b.n	80036dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	3304      	adds	r3, #4
 800368e:	623b      	str	r3, [r7, #32]
          break;
 8003690:	e024      	b.n	80036dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	3308      	adds	r3, #8
 8003698:	623b      	str	r3, [r7, #32]
          break;
 800369a:	e01f      	b.n	80036dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	330c      	adds	r3, #12
 80036a2:	623b      	str	r3, [r7, #32]
          break;
 80036a4:	e01a      	b.n	80036dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ae:	2304      	movs	r3, #4
 80036b0:	623b      	str	r3, [r7, #32]
          break;
 80036b2:	e013      	b.n	80036dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036bc:	2308      	movs	r3, #8
 80036be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	611a      	str	r2, [r3, #16]
          break;
 80036c6:	e009      	b.n	80036dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036c8:	2308      	movs	r3, #8
 80036ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	615a      	str	r2, [r3, #20]
          break;
 80036d2:	e003      	b.n	80036dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036d4:	2300      	movs	r3, #0
 80036d6:	623b      	str	r3, [r7, #32]
          break;
 80036d8:	e000      	b.n	80036dc <HAL_GPIO_Init+0x130>
          break;
 80036da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2bff      	cmp	r3, #255	@ 0xff
 80036e0:	d801      	bhi.n	80036e6 <HAL_GPIO_Init+0x13a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	e001      	b.n	80036ea <HAL_GPIO_Init+0x13e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2bff      	cmp	r3, #255	@ 0xff
 80036f0:	d802      	bhi.n	80036f8 <HAL_GPIO_Init+0x14c>
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_Init+0x152>
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	3b08      	subs	r3, #8
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	210f      	movs	r1, #15
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	401a      	ands	r2, r3
 8003710:	6a39      	ldr	r1, [r7, #32]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	431a      	orrs	r2, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80b1 	beq.w	800388e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800372c:	4b4d      	ldr	r3, [pc, #308]	@ (8003864 <HAL_GPIO_Init+0x2b8>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	4a4c      	ldr	r2, [pc, #304]	@ (8003864 <HAL_GPIO_Init+0x2b8>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6193      	str	r3, [r2, #24]
 8003738:	4b4a      	ldr	r3, [pc, #296]	@ (8003864 <HAL_GPIO_Init+0x2b8>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003744:	4a48      	ldr	r2, [pc, #288]	@ (8003868 <HAL_GPIO_Init+0x2bc>)
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a40      	ldr	r2, [pc, #256]	@ (800386c <HAL_GPIO_Init+0x2c0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_GPIO_Init+0x1ec>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <HAL_GPIO_Init+0x2c4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00d      	beq.n	8003794 <HAL_GPIO_Init+0x1e8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3e      	ldr	r2, [pc, #248]	@ (8003874 <HAL_GPIO_Init+0x2c8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <HAL_GPIO_Init+0x1e4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3d      	ldr	r2, [pc, #244]	@ (8003878 <HAL_GPIO_Init+0x2cc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_GPIO_Init+0x1e0>
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <HAL_GPIO_Init+0x1ee>
 800378c:	2304      	movs	r3, #4
 800378e:	e004      	b.n	800379a <HAL_GPIO_Init+0x1ee>
 8003790:	2302      	movs	r3, #2
 8003792:	e002      	b.n	800379a <HAL_GPIO_Init+0x1ee>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_GPIO_Init+0x1ee>
 8003798:	2300      	movs	r3, #0
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	f002 0203 	and.w	r2, r2, #3
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	4093      	lsls	r3, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037aa:	492f      	ldr	r1, [pc, #188]	@ (8003868 <HAL_GPIO_Init+0x2bc>)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3302      	adds	r3, #2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d006      	beq.n	80037d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	492c      	ldr	r1, [pc, #176]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
 80037d0:	e006      	b.n	80037e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037d2:	4b2a      	ldr	r3, [pc, #168]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	43db      	mvns	r3, r3
 80037da:	4928      	ldr	r1, [pc, #160]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037dc:	4013      	ands	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037ec:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4922      	ldr	r1, [pc, #136]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
 80037f8:	e006      	b.n	8003808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037fa:	4b20      	ldr	r3, [pc, #128]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	43db      	mvns	r3, r3
 8003802:	491e      	ldr	r1, [pc, #120]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003804:	4013      	ands	r3, r2
 8003806:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d006      	beq.n	8003822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4918      	ldr	r1, [pc, #96]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e006      	b.n	8003830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003822:	4b16      	ldr	r3, [pc, #88]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	43db      	mvns	r3, r3
 800382a:	4914      	ldr	r1, [pc, #80]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 800382c:	4013      	ands	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d021      	beq.n	8003880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800383c:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	490e      	ldr	r1, [pc, #56]	@ (800387c <HAL_GPIO_Init+0x2d0>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e021      	b.n	800388e <HAL_GPIO_Init+0x2e2>
 800384a:	bf00      	nop
 800384c:	10320000 	.word	0x10320000
 8003850:	10310000 	.word	0x10310000
 8003854:	10220000 	.word	0x10220000
 8003858:	10210000 	.word	0x10210000
 800385c:	10120000 	.word	0x10120000
 8003860:	10110000 	.word	0x10110000
 8003864:	40021000 	.word	0x40021000
 8003868:	40010000 	.word	0x40010000
 800386c:	40010800 	.word	0x40010800
 8003870:	40010c00 	.word	0x40010c00
 8003874:	40011000 	.word	0x40011000
 8003878:	40011400 	.word	0x40011400
 800387c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	43db      	mvns	r3, r3
 8003888:	4909      	ldr	r1, [pc, #36]	@ (80038b0 <HAL_GPIO_Init+0x304>)
 800388a:	4013      	ands	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	3301      	adds	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f47f ae8e 	bne.w	80035c0 <HAL_GPIO_Init+0x14>
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	372c      	adds	r7, #44	@ 0x2c
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	40010400 	.word	0x40010400

080038b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
 80038d0:	e001      	b.n	80038d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	807b      	strh	r3, [r7, #2]
 80038ee:	4613      	mov	r3, r2
 80038f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f2:	787b      	ldrb	r3, [r7, #1]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f8:	887a      	ldrh	r2, [r7, #2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038fe:	e003      	b.n	8003908 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	041a      	lsls	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	611a      	str	r2, [r3, #16]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4013      	ands	r3, r2
 800392a:	041a      	lsls	r2, r3, #16
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43d9      	mvns	r1, r3
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	400b      	ands	r3, r1
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e12b      	b.n	8003bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fe fb04 	bl	8001f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2224      	movs	r2, #36	@ 0x24
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a8:	f001 ff28 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 80039ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a81      	ldr	r2, [pc, #516]	@ (8003bb8 <HAL_I2C_Init+0x274>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d807      	bhi.n	80039c8 <HAL_I2C_Init+0x84>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a80      	ldr	r2, [pc, #512]	@ (8003bbc <HAL_I2C_Init+0x278>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf94      	ite	ls
 80039c0:	2301      	movls	r3, #1
 80039c2:	2300      	movhi	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e006      	b.n	80039d6 <HAL_I2C_Init+0x92>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc0 <HAL_I2C_Init+0x27c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0e7      	b.n	8003bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a78      	ldr	r2, [pc, #480]	@ (8003bc4 <HAL_I2C_Init+0x280>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb8 <HAL_I2C_Init+0x274>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d802      	bhi.n	8003a18 <HAL_I2C_Init+0xd4>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	e009      	b.n	8003a2c <HAL_I2C_Init+0xe8>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	4a69      	ldr	r2, [pc, #420]	@ (8003bc8 <HAL_I2C_Init+0x284>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	495c      	ldr	r1, [pc, #368]	@ (8003bb8 <HAL_I2C_Init+0x274>)
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	d819      	bhi.n	8003a80 <HAL_I2C_Init+0x13c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e59      	subs	r1, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a60:	400b      	ands	r3, r1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_I2C_Init+0x138>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e59      	subs	r1, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	e051      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	e04f      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d111      	bne.n	8003aac <HAL_I2C_Init+0x168>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e012      	b.n	8003ad2 <HAL_I2C_Init+0x18e>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	0099      	lsls	r1, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Init+0x196>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e022      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10e      	bne.n	8003b00 <HAL_I2C_Init+0x1bc>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1e58      	subs	r0, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	440b      	add	r3, r1
 8003af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af4:	3301      	adds	r3, #1
 8003af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003afe:	e00f      	b.n	8003b20 <HAL_I2C_Init+0x1dc>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	0099      	lsls	r1, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	6809      	ldr	r1, [r1, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6911      	ldr	r1, [r2, #16]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	000186a0 	.word	0x000186a0
 8003bbc:	001e847f 	.word	0x001e847f
 8003bc0:	003d08ff 	.word	0x003d08ff
 8003bc4:	431bde83 	.word	0x431bde83
 8003bc8:	10624dd3 	.word	0x10624dd3

08003bcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	817b      	strh	r3, [r7, #10]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003be0:	f7fe fb3c 	bl	800225c <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	f040 80e0 	bne.w	8003db4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2319      	movs	r3, #25
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4970      	ldr	r1, [pc, #448]	@ (8003dc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fffa 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0d3      	b.n	8003db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_I2C_Master_Transmit+0x50>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0cc      	b.n	8003db6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d007      	beq.n	8003c42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2221      	movs	r2, #33	@ 0x21
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a50      	ldr	r2, [pc, #320]	@ (8003dc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c84:	8979      	ldrh	r1, [r7, #10]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fd7c 	bl	8004788 <I2C_MasterRequestWrite>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e08d      	b.n	8003db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cb0:	e066      	b.n	8003d80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	6a39      	ldr	r1, [r7, #32]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f001 f8b8 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d107      	bne.n	8003cda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06b      	b.n	8003db6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d11b      	bne.n	8003d54 <HAL_I2C_Master_Transmit+0x188>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d017      	beq.n	8003d54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	6a39      	ldr	r1, [r7, #32]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f001 f8af 	bl	8004ebc <I2C_WaitOnBTFFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d107      	bne.n	8003d7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e01a      	b.n	8003db6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d194      	bne.n	8003cb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	00100002 	.word	0x00100002
 8003dc4:	ffff0000 	.word	0xffff0000

08003dc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	@ 0x30
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	817b      	strh	r3, [r7, #10]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7fe fa3c 	bl	800225c <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	f040 824b 	bne.w	800428a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2319      	movs	r3, #25
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	497f      	ldr	r1, [pc, #508]	@ (8003ffc <HAL_I2C_Master_Receive+0x234>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fefa 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e23e      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2C_Master_Receive+0x54>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e237      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d007      	beq.n	8003e42 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2222      	movs	r2, #34	@ 0x22
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a5f      	ldr	r2, [pc, #380]	@ (8004000 <HAL_I2C_Master_Receive+0x238>)
 8003e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e84:	8979      	ldrh	r1, [r7, #10]
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fcfe 	bl	800488c <I2C_MasterRequestRead>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e1f8      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d113      	bne.n	8003eca <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e1cc      	b.n	8004264 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d11e      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee2:	b672      	cpsid	i
}
 8003ee4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f0c:	b662      	cpsie	i
}
 8003f0e:	e035      	b.n	8003f7c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d11e      	bne.n	8003f56 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f28:	b672      	cpsid	i
}
 8003f2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f52:	b662      	cpsie	i
}
 8003f54:	e012      	b.n	8003f7c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f7c:	e172      	b.n	8004264 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	f200 811f 	bhi.w	80041c6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d123      	bne.n	8003fd8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 ffd9 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e173      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fd6:	e145      	b.n	8004264 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d152      	bne.n	8004086 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	4906      	ldr	r1, [pc, #24]	@ (8004004 <HAL_I2C_Master_Receive+0x23c>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fe04 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e148      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
 8003ffa:	bf00      	nop
 8003ffc:	00100002 	.word	0x00100002
 8004000:	ffff0000 	.word	0xffff0000
 8004004:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004008:	b672      	cpsid	i
}
 800400a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800404e:	b662      	cpsie	i
}
 8004050:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004084:	e0ee      	b.n	8004264 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	2200      	movs	r2, #0
 800408e:	4981      	ldr	r1, [pc, #516]	@ (8004294 <HAL_I2C_Master_Receive+0x4cc>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fdb1 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0f5      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b0:	b672      	cpsid	i
}
 80040b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004298 <HAL_I2C_Master_Receive+0x4d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	08db      	lsrs	r3, r3, #3
 80040ec:	4a6b      	ldr	r2, [pc, #428]	@ (800429c <HAL_I2C_Master_Receive+0x4d4>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0a1a      	lsrs	r2, r3, #8
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00da      	lsls	r2, r3, #3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	3b01      	subs	r3, #1
 8004104:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d118      	bne.n	800413e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800412e:	b662      	cpsie	i
}
 8004130:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0a6      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d1d9      	bne.n	8004100 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800418e:	b662      	cpsie	i
}
 8004190:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041c4:	e04e      	b.n	8004264 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 febe 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e058      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d124      	bne.n	8004264 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004230:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f ae88 	bne.w	8003f7e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	4618      	mov	r0, r3
 800428e:	3728      	adds	r7, #40	@ 0x28
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	00010004 	.word	0x00010004
 8004298:	20000008 	.word	0x20000008
 800429c:	14f8b589 	.word	0x14f8b589

080042a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	@ 0x30
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	817b      	strh	r3, [r7, #10]
 80042b2:	460b      	mov	r3, r1
 80042b4:	813b      	strh	r3, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042be:	f7fd ffcd 	bl	800225c <HAL_GetTick>
 80042c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 8250 	bne.w	8004772 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2319      	movs	r3, #25
 80042d8:	2201      	movs	r2, #1
 80042da:	4982      	ldr	r1, [pc, #520]	@ (80044e4 <HAL_I2C_Mem_Read+0x244>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fc8b 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
 80042ea:	e243      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Read+0x5a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e23c      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d007      	beq.n	8004320 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2222      	movs	r2, #34	@ 0x22
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	@ 0x40
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a62      	ldr	r2, [pc, #392]	@ (80044e8 <HAL_I2C_Mem_Read+0x248>)
 8004360:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004362:	88f8      	ldrh	r0, [r7, #6]
 8004364:	893a      	ldrh	r2, [r7, #8]
 8004366:	8979      	ldrh	r1, [r7, #10]
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fb58 	bl	8004a28 <I2C_RequestMemoryRead>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1f8      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d113      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e1cc      	b.n	800474c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d11e      	bne.n	80043f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ca:	b672      	cpsid	i
}
 80043cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043f4:	b662      	cpsie	i
}
 80043f6:	e035      	b.n	8004464 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d11e      	bne.n	800443e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800440e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004410:	b672      	cpsid	i
}
 8004412:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004438:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800443a:	b662      	cpsie	i
}
 800443c:	e012      	b.n	8004464 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800444c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004464:	e172      	b.n	800474c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	2b03      	cmp	r3, #3
 800446c:	f200 811f 	bhi.w	80046ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	2b01      	cmp	r3, #1
 8004476:	d123      	bne.n	80044c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fd65 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e173      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044be:	e145      	b.n	800474c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d152      	bne.n	800456e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	2200      	movs	r2, #0
 80044d0:	4906      	ldr	r1, [pc, #24]	@ (80044ec <HAL_I2C_Mem_Read+0x24c>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fb90 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e148      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
 80044e2:	bf00      	nop
 80044e4:	00100002 	.word	0x00100002
 80044e8:	ffff0000 	.word	0xffff0000
 80044ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044f0:	b672      	cpsid	i
}
 80044f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004536:	b662      	cpsie	i
}
 8004538:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800456c:	e0ee      	b.n	800474c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2200      	movs	r2, #0
 8004576:	4981      	ldr	r1, [pc, #516]	@ (800477c <HAL_I2C_Mem_Read+0x4dc>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fb3d 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0f5      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004598:	b672      	cpsid	i
}
 800459a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004780 <HAL_I2C_Mem_Read+0x4e0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004784 <HAL_I2C_Mem_Read+0x4e4>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0a1a      	lsrs	r2, r3, #8
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00da      	lsls	r2, r3, #3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d118      	bne.n	8004626 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004616:	b662      	cpsie	i
}
 8004618:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0a6      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b04      	cmp	r3, #4
 8004632:	d1d9      	bne.n	80045e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004676:	b662      	cpsie	i
}
 8004678:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046ac:	e04e      	b.n	800474c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fc4a 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e058      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d124      	bne.n	800474c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004706:	2b03      	cmp	r3, #3
 8004708:	d107      	bne.n	800471a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004718:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	f47f ae88 	bne.w	8004466 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004772:	2302      	movs	r3, #2
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	@ 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010004 	.word	0x00010004
 8004780:	20000008 	.word	0x20000008
 8004784:	14f8b589 	.word	0x14f8b589

08004788 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d006      	beq.n	80047b2 <I2C_MasterRequestWrite+0x2a>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d003      	beq.n	80047b2 <I2C_MasterRequestWrite+0x2a>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047b0:	d108      	bne.n	80047c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e00b      	b.n	80047dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	2b12      	cmp	r3, #18
 80047ca:	d107      	bne.n	80047dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fa05 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004802:	d103      	bne.n	800480c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e035      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004818:	d108      	bne.n	800482c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004828:	611a      	str	r2, [r3, #16]
 800482a:	e01b      	b.n	8004864 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	11db      	asrs	r3, r3, #7
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 0306 	and.w	r3, r3, #6
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f063 030f 	orn	r3, r3, #15
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	490e      	ldr	r1, [pc, #56]	@ (8004884 <I2C_MasterRequestWrite+0xfc>)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fa4e 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e010      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4907      	ldr	r1, [pc, #28]	@ (8004888 <I2C_MasterRequestWrite+0x100>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fa3e 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	00010008 	.word	0x00010008
 8004888:	00010002 	.word	0x00010002

0800488c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d006      	beq.n	80048c6 <I2C_MasterRequestRead+0x3a>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d003      	beq.n	80048c6 <I2C_MasterRequestRead+0x3a>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048c4:	d108      	bne.n	80048d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e00b      	b.n	80048f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	2b11      	cmp	r3, #17
 80048de:	d107      	bne.n	80048f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f97b 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004916:	d103      	bne.n	8004920 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e079      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492c:	d108      	bne.n	8004940 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	611a      	str	r2, [r3, #16]
 800493e:	e05f      	b.n	8004a00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004940:	897b      	ldrh	r3, [r7, #10]
 8004942:	11db      	asrs	r3, r3, #7
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f063 030f 	orn	r3, r3, #15
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4930      	ldr	r1, [pc, #192]	@ (8004a20 <I2C_MasterRequestRead+0x194>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f9c4 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e054      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4929      	ldr	r1, [pc, #164]	@ (8004a24 <I2C_MasterRequestRead+0x198>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f9b4 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e044      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f919 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049da:	d103      	bne.n	80049e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e017      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	11db      	asrs	r3, r3, #7
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f063 030e 	orn	r3, r3, #14
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4907      	ldr	r1, [pc, #28]	@ (8004a24 <I2C_MasterRequestRead+0x198>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f970 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	00010008 	.word	0x00010008
 8004a24:	00010002 	.word	0x00010002

08004a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	4608      	mov	r0, r1
 8004a32:	4611      	mov	r1, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	813b      	strh	r3, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8c2 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a88:	d103      	bne.n	8004a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0aa      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	4952      	ldr	r1, [pc, #328]	@ (8004bf4 <I2C_RequestMemoryRead+0x1cc>)
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f91d 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e097      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f9a8 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e076      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	e021      	b.n	8004b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b20:	6a39      	ldr	r1, [r7, #32]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f982 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00d      	beq.n	8004b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e050      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4a:	893b      	ldrh	r3, [r7, #8]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f967 	bl	8004e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e035      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f82b 	bl	8004bf8 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb6:	d103      	bne.n	8004bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e013      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	4906      	ldr	r1, [pc, #24]	@ (8004bf4 <I2C_RequestMemoryRead+0x1cc>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f886 	bl	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010002 	.word	0x00010002

08004bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c08:	e048      	b.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d044      	beq.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fd fb23 	bl	800225c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d139      	bne.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	e00c      	b.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d116      	bne.n	8004c9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e023      	b.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10d      	bne.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	43da      	mvns	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	e00c      	b.n	8004cdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	43da      	mvns	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d093      	beq.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfa:	e071      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0a:	d123      	bne.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f043 0204 	orr.w	r2, r3, #4
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e067      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d041      	beq.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5c:	f7fd fa7e 	bl	800225c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d136      	bne.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e00b      	b.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4013      	ands	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e021      	b.n	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10c      	bne.n	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e00b      	b.n	8004e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af6d 	bne.w	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e38:	e034      	b.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8e3 	bl	8005006 <I2C_IsAcknowledgeFailed>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e034      	b.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d028      	beq.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fd fa03 	bl	800225c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e72:	2b80      	cmp	r3, #128	@ 0x80
 8004e74:	d016      	beq.n	8004ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eae:	2b80      	cmp	r3, #128	@ 0x80
 8004eb0:	d1c3      	bne.n	8004e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f89b 	bl	8005006 <I2C_IsAcknowledgeFailed>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e034      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d028      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee2:	f7fd f9bb 	bl	800225c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d302      	bcc.n	8004ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11d      	bne.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d016      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d1c3      	bne.n	8004eca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f58:	e049      	b.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d119      	bne.n	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0210 	mvn.w	r2, #16
 8004f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e030      	b.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fd f95e 	bl	800225c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11d      	bne.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d016      	beq.n	8004fee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e007      	b.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d1ae      	bne.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501c:	d11b      	bne.n	8005056 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005026:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
	...

08005064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e272      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8087 	beq.w	8005192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005084:	4b92      	ldr	r3, [pc, #584]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b04      	cmp	r3, #4
 800508e:	d00c      	beq.n	80050aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005090:	4b8f      	ldr	r3, [pc, #572]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b08      	cmp	r3, #8
 800509a:	d112      	bne.n	80050c2 <HAL_RCC_OscConfig+0x5e>
 800509c:	4b8c      	ldr	r3, [pc, #560]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a8:	d10b      	bne.n	80050c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050aa:	4b89      	ldr	r3, [pc, #548]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d06c      	beq.n	8005190 <HAL_RCC_OscConfig+0x12c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d168      	bne.n	8005190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e24c      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x76>
 80050cc:	4b80      	ldr	r3, [pc, #512]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a7f      	ldr	r2, [pc, #508]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	e02e      	b.n	8005138 <HAL_RCC_OscConfig+0xd4>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x98>
 80050e2:	4b7b      	ldr	r3, [pc, #492]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a7a      	ldr	r2, [pc, #488]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b78      	ldr	r3, [pc, #480]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a77      	ldr	r2, [pc, #476]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e01d      	b.n	8005138 <HAL_RCC_OscConfig+0xd4>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0xbc>
 8005106:	4b72      	ldr	r3, [pc, #456]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a71      	ldr	r2, [pc, #452]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800510c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	4b6f      	ldr	r3, [pc, #444]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a6e      	ldr	r2, [pc, #440]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e00b      	b.n	8005138 <HAL_RCC_OscConfig+0xd4>
 8005120:	4b6b      	ldr	r3, [pc, #428]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a6a      	ldr	r2, [pc, #424]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b68      	ldr	r3, [pc, #416]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a67      	ldr	r2, [pc, #412]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fd f88c 	bl	800225c <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005148:	f7fd f888 	bl	800225c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	@ 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e200      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	4b5d      	ldr	r3, [pc, #372]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0xe4>
 8005166:	e014      	b.n	8005192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fd f878 	bl	800225c <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fd f874 	bl	800225c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	@ 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e1ec      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	4b53      	ldr	r3, [pc, #332]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x10c>
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d063      	beq.n	8005266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800519e:	4b4c      	ldr	r3, [pc, #304]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 030c 	and.w	r3, r3, #12
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051aa:	4b49      	ldr	r3, [pc, #292]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d11c      	bne.n	80051f0 <HAL_RCC_OscConfig+0x18c>
 80051b6:	4b46      	ldr	r3, [pc, #280]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d116      	bne.n	80051f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	4b43      	ldr	r3, [pc, #268]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_RCC_OscConfig+0x176>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d001      	beq.n	80051da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e1c0      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051da:	4b3d      	ldr	r3, [pc, #244]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4939      	ldr	r1, [pc, #228]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ee:	e03a      	b.n	8005266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d020      	beq.n	800523a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f8:	4b36      	ldr	r3, [pc, #216]	@ (80052d4 <HAL_RCC_OscConfig+0x270>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fd f82d 	bl	800225c <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005206:	f7fd f829 	bl	800225c <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e1a1      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	4b2d      	ldr	r3, [pc, #180]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b2a      	ldr	r3, [pc, #168]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4927      	ldr	r1, [pc, #156]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]
 8005238:	e015      	b.n	8005266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <HAL_RCC_OscConfig+0x270>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fd f80c 	bl	800225c <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005248:	f7fd f808 	bl	800225c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e180      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d03a      	beq.n	80052e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d019      	beq.n	80052ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527a:	4b17      	ldr	r3, [pc, #92]	@ (80052d8 <HAL_RCC_OscConfig+0x274>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005280:	f7fc ffec 	bl	800225c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005288:	f7fc ffe8 	bl	800225c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e160      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f000 fad0 	bl	800584c <RCC_Delay>
 80052ac:	e01c      	b.n	80052e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ae:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <HAL_RCC_OscConfig+0x274>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b4:	f7fc ffd2 	bl	800225c <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ba:	e00f      	b.n	80052dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052bc:	f7fc ffce 	bl	800225c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d908      	bls.n	80052dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e146      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	42420000 	.word	0x42420000
 80052d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052dc:	4b92      	ldr	r3, [pc, #584]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e9      	bne.n	80052bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80a6 	beq.w	8005442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052fa:	4b8b      	ldr	r3, [pc, #556]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005306:	4b88      	ldr	r3, [pc, #544]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	4a87      	ldr	r2, [pc, #540]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005310:	61d3      	str	r3, [r2, #28]
 8005312:	4b85      	ldr	r3, [pc, #532]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005322:	4b82      	ldr	r3, [pc, #520]	@ (800552c <HAL_RCC_OscConfig+0x4c8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d118      	bne.n	8005360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532e:	4b7f      	ldr	r3, [pc, #508]	@ (800552c <HAL_RCC_OscConfig+0x4c8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a7e      	ldr	r2, [pc, #504]	@ (800552c <HAL_RCC_OscConfig+0x4c8>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533a:	f7fc ff8f 	bl	800225c <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005342:	f7fc ff8b 	bl	800225c <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b64      	cmp	r3, #100	@ 0x64
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e103      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	4b75      	ldr	r3, [pc, #468]	@ (800552c <HAL_RCC_OscConfig+0x4c8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d106      	bne.n	8005376 <HAL_RCC_OscConfig+0x312>
 8005368:	4b6f      	ldr	r3, [pc, #444]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	4a6e      	ldr	r2, [pc, #440]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6213      	str	r3, [r2, #32]
 8005374:	e02d      	b.n	80053d2 <HAL_RCC_OscConfig+0x36e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x334>
 800537e:	4b6a      	ldr	r3, [pc, #424]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	4a69      	ldr	r2, [pc, #420]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	6213      	str	r3, [r2, #32]
 800538a:	4b67      	ldr	r3, [pc, #412]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	4a66      	ldr	r2, [pc, #408]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	6213      	str	r3, [r2, #32]
 8005396:	e01c      	b.n	80053d2 <HAL_RCC_OscConfig+0x36e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b05      	cmp	r3, #5
 800539e:	d10c      	bne.n	80053ba <HAL_RCC_OscConfig+0x356>
 80053a0:	4b61      	ldr	r3, [pc, #388]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	4a60      	ldr	r2, [pc, #384]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6213      	str	r3, [r2, #32]
 80053ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6213      	str	r3, [r2, #32]
 80053b8:	e00b      	b.n	80053d2 <HAL_RCC_OscConfig+0x36e>
 80053ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4a5a      	ldr	r2, [pc, #360]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6213      	str	r3, [r2, #32]
 80053c6:	4b58      	ldr	r3, [pc, #352]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	4a57      	ldr	r2, [pc, #348]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053cc:	f023 0304 	bic.w	r3, r3, #4
 80053d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d015      	beq.n	8005406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fc ff3f 	bl	800225c <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fc ff3b 	bl	800225c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e0b1      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ee      	beq.n	80053e2 <HAL_RCC_OscConfig+0x37e>
 8005404:	e014      	b.n	8005430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005406:	f7fc ff29 	bl	800225c <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fc ff25 	bl	800225c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e09b      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005424:	4b40      	ldr	r3, [pc, #256]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ee      	bne.n	800540e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d105      	bne.n	8005442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005436:	4b3c      	ldr	r3, [pc, #240]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	4a3b      	ldr	r2, [pc, #236]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 800543c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8087 	beq.w	800555a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800544c:	4b36      	ldr	r3, [pc, #216]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 030c 	and.w	r3, r3, #12
 8005454:	2b08      	cmp	r3, #8
 8005456:	d061      	beq.n	800551c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d146      	bne.n	80054ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005460:	4b33      	ldr	r3, [pc, #204]	@ (8005530 <HAL_RCC_OscConfig+0x4cc>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005466:	f7fc fef9 	bl	800225c <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546e:	f7fc fef5 	bl	800225c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e06d      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005480:	4b29      	ldr	r3, [pc, #164]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005494:	d108      	bne.n	80054a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005496:	4b24      	ldr	r3, [pc, #144]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	4921      	ldr	r1, [pc, #132]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a19      	ldr	r1, [r3, #32]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	430b      	orrs	r3, r1
 80054ba:	491b      	ldr	r1, [pc, #108]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <HAL_RCC_OscConfig+0x4cc>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c6:	f7fc fec9 	bl	800225c <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fc fec5 	bl	800225c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e03d      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e0:	4b11      	ldr	r3, [pc, #68]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x46a>
 80054ec:	e035      	b.n	800555a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ee:	4b10      	ldr	r3, [pc, #64]	@ (8005530 <HAL_RCC_OscConfig+0x4cc>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f7fc feb2 	bl	800225c <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fc feae 	bl	800225c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e026      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550e:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <HAL_RCC_OscConfig+0x4c4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x498>
 800551a:	e01e      	b.n	800555a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d107      	bne.n	8005534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e019      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
 8005530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005534:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <HAL_RCC_OscConfig+0x500>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	429a      	cmp	r2, r3
 8005546:	d106      	bne.n	8005556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000

08005568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0d0      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b6a      	ldr	r3, [pc, #424]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d910      	bls.n	80055ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b67      	ldr	r3, [pc, #412]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 0207 	bic.w	r2, r3, #7
 8005592:	4965      	ldr	r1, [pc, #404]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b63      	ldr	r3, [pc, #396]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0b8      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d020      	beq.n	80055fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c4:	4b59      	ldr	r3, [pc, #356]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a58      	ldr	r2, [pc, #352]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055dc:	4b53      	ldr	r3, [pc, #332]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a52      	ldr	r2, [pc, #328]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e8:	4b50      	ldr	r3, [pc, #320]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	494d      	ldr	r1, [pc, #308]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d040      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	4b47      	ldr	r3, [pc, #284]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d115      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e07f      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b41      	ldr	r3, [pc, #260]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e073      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b3d      	ldr	r3, [pc, #244]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e06b      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b39      	ldr	r3, [pc, #228]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4936      	ldr	r1, [pc, #216]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fc fe00 	bl	800225c <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fc fdfc 	bl	800225c <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e053      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b2d      	ldr	r3, [pc, #180]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b27      	ldr	r3, [pc, #156]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d210      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 0207 	bic.w	r2, r3, #7
 800569e:	4922      	ldr	r1, [pc, #136]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a6:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e032      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c4:	4b19      	ldr	r3, [pc, #100]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4916      	ldr	r1, [pc, #88]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056e2:	4b12      	ldr	r3, [pc, #72]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	490e      	ldr	r1, [pc, #56]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056f6:	f000 f821 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	490a      	ldr	r1, [pc, #40]	@ (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 8005708:	5ccb      	ldrb	r3, [r1, r3]
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <HAL_RCC_ClockConfig+0x1cc>)
 8005710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RCC_ClockConfig+0x1d0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc fd5e 	bl	80021d8 <HAL_InitTick>

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40022000 	.word	0x40022000
 800572c:	40021000 	.word	0x40021000
 8005730:	08006638 	.word	0x08006638
 8005734:	20000008 	.word	0x20000008
 8005738:	2000000c 	.word	0x2000000c

0800573c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005756:	4b1e      	ldr	r3, [pc, #120]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b04      	cmp	r3, #4
 8005764:	d002      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x30>
 8005766:	2b08      	cmp	r3, #8
 8005768:	d003      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x36>
 800576a:	e027      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800576c:	4b19      	ldr	r3, [pc, #100]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800576e:	613b      	str	r3, [r7, #16]
      break;
 8005770:	e027      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	0c9b      	lsrs	r3, r3, #18
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800577c:	5cd3      	ldrb	r3, [r2, r3]
 800577e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d010      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800578a:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	0c5b      	lsrs	r3, r3, #17
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a0d      	ldr	r2, [pc, #52]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800579e:	fb03 f202 	mul.w	r2, r3, r2
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	e004      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0c      	ldr	r2, [pc, #48]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	613b      	str	r3, [r7, #16]
      break;
 80057ba:	e002      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80057be:	613b      	str	r3, [r7, #16]
      break;
 80057c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057c2:	693b      	ldr	r3, [r7, #16]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	08006650 	.word	0x08006650
 80057dc:	08006660 	.word	0x08006660
 80057e0:	003d0900 	.word	0x003d0900
 80057e4:	007a1200 	.word	0x007a1200

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b02      	ldr	r3, [pc, #8]	@ (80057f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	20000008 	.word	0x20000008

080057fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005800:	f7ff fff2 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	@ (8005820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	08006648 	.word	0x08006648

08005824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005828:	f7ff ffde 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 800582c:	4602      	mov	r2, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	0adb      	lsrs	r3, r3, #11
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4903      	ldr	r1, [pc, #12]	@ (8005848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	08006648 	.word	0x08006648

0800584c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <RCC_Delay+0x34>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0a      	ldr	r2, [pc, #40]	@ (8005884 <RCC_Delay+0x38>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0a5b      	lsrs	r3, r3, #9
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005868:	bf00      	nop
  }
  while (Delay --);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f9      	bne.n	8005868 <RCC_Delay+0x1c>
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr
 8005880:	20000008 	.word	0x20000008
 8005884:	10624dd3 	.word	0x10624dd3

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d07d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a8:	4b4f      	ldr	r3, [pc, #316]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b4:	4b4c      	ldr	r3, [pc, #304]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4a4b      	ldr	r2, [pc, #300]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058be:	61d3      	str	r3, [r2, #28]
 80058c0:	4b49      	ldr	r3, [pc, #292]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b46      	ldr	r3, [pc, #280]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d118      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058dc:	4b43      	ldr	r3, [pc, #268]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a42      	ldr	r2, [pc, #264]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e8:	f7fc fcb8 	bl	800225c <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f0:	f7fc fcb4 	bl	800225c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	@ 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e06d      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005902:	4b3a      	ldr	r3, [pc, #232]	@ (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800590e:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005916:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d02e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d027      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800592c:	4b2e      	ldr	r3, [pc, #184]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005934:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005936:	4b2e      	ldr	r3, [pc, #184]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800593c:	4b2c      	ldr	r3, [pc, #176]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005942:	4a29      	ldr	r2, [pc, #164]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d014      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fc fc83 	bl	800225c <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fc fc7f 	bl	800225c <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e036      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ee      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4917      	ldr	r1, [pc, #92]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	4313      	orrs	r3, r2
 800598c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005994:	4b14      	ldr	r3, [pc, #80]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	4a13      	ldr	r2, [pc, #76]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	490b      	ldr	r1, [pc, #44]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ca:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	4904      	ldr	r1, [pc, #16]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40007000 	.word	0x40007000
 80059f0:	42420440 	.word	0x42420440

080059f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	f200 8089 	bhi.w	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d045      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d074      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a2a:	e081      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8005a2c:	4b45      	ldr	r3, [pc, #276]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a32:	4b44      	ldr	r3, [pc, #272]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d07a      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0c9b      	lsrs	r3, r3, #18
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	4a40      	ldr	r2, [pc, #256]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a48:	5cd3      	ldrb	r3, [r2, r3]
 8005a4a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d015      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a56:	4b3b      	ldr	r3, [pc, #236]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	0c5b      	lsrs	r3, r3, #17
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	4a3a      	ldr	r2, [pc, #232]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00d      	beq.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a70:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e004      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4a33      	ldr	r2, [pc, #204]	@ (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a98:	d102      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	61bb      	str	r3, [r7, #24]
      break;
 8005a9e:	e049      	b.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
      break;
 8005aae:	e041      	b.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8005ab0:	4b24      	ldr	r3, [pc, #144]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac0:	d108      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e01e      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ade:	d109      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ae0:	4b18      	ldr	r3, [pc, #96]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005aec:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e00e      	b.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005afe:	d11b      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005b00:	4b10      	ldr	r3, [pc, #64]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d015      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8005b0c:	4b13      	ldr	r3, [pc, #76]	@ (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005b0e:	61bb      	str	r3, [r7, #24]
      break;
 8005b10:	e012      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005b12:	e011      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b14:	f7ff fe86 	bl	8005824 <HAL_RCC_GetPCLK2Freq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	0b9b      	lsrs	r3, r3, #14
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	3301      	adds	r3, #1
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	61bb      	str	r3, [r7, #24]
      break;
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005b38:	bf00      	nop
    }
  }
  return (frequency);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40021000 	.word	0x40021000
 8005b48:	08006664 	.word	0x08006664
 8005b4c:	08006674 	.word	0x08006674
 8005b50:	00f42400 	.word	0x00f42400
 8005b54:	003d0900 	.word	0x003d0900
 8005b58:	aaaaaaab 	.word	0xaaaaaaab
 8005b5c:	0001e848 	.word	0x0001e848

08005b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e041      	b.n	8005bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fc fa34 	bl	8001ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f000 fa5c 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d001      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e03a      	b.n	8005c8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a18      	ldr	r2, [pc, #96]	@ (8005c98 <HAL_TIM_Base_Start_IT+0x98>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x58>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c42:	d009      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x58>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a14      	ldr	r2, [pc, #80]	@ (8005c9c <HAL_TIM_Base_Start_IT+0x9c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x58>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d010      	beq.n	8005c8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	e007      	b.n	8005c8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800

08005ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d020      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01b      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0202 	mvn.w	r2, #2
 8005cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f998 	bl	8006024 <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f98b 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f99a 	bl	8006036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d020      	beq.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01b      	beq.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0204 	mvn.w	r2, #4
 8005d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f972 	bl	8006024 <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f965 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f974 	bl	8006036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d020      	beq.n	8005da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01b      	beq.n	8005da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 0208 	mvn.w	r2, #8
 8005d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2204      	movs	r2, #4
 8005d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f94c 	bl	8006024 <HAL_TIM_IC_CaptureCallback>
 8005d8c:	e005      	b.n	8005d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f93f 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f94e 	bl	8006036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d020      	beq.n	8005dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01b      	beq.n	8005dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0210 	mvn.w	r2, #16
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f926 	bl	8006024 <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f919 	bl	8006012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f928 	bl	8006036 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0201 	mvn.w	r2, #1
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fb fcd0 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa7f 	bl	8006332 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8f8 	bl	8006048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0220 	mvn.w	r2, #32
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa52 	bl	8006320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e0b4      	b.n	800600a <HAL_TIM_ConfigClockSource+0x186>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed8:	d03e      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xd4>
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ede:	f200 8087 	bhi.w	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee6:	f000 8086 	beq.w	8005ff6 <HAL_TIM_ConfigClockSource+0x172>
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eee:	d87f      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef0:	2b70      	cmp	r3, #112	@ 0x70
 8005ef2:	d01a      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0xa6>
 8005ef4:	2b70      	cmp	r3, #112	@ 0x70
 8005ef6:	d87b      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef8:	2b60      	cmp	r3, #96	@ 0x60
 8005efa:	d050      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x11a>
 8005efc:	2b60      	cmp	r3, #96	@ 0x60
 8005efe:	d877      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005f00:	2b50      	cmp	r3, #80	@ 0x50
 8005f02:	d03c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0xfa>
 8005f04:	2b50      	cmp	r3, #80	@ 0x50
 8005f06:	d873      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b40      	cmp	r3, #64	@ 0x40
 8005f0a:	d058      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x13a>
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d86f      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	2b30      	cmp	r3, #48	@ 0x30
 8005f12:	d064      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x15a>
 8005f14:	2b30      	cmp	r3, #48	@ 0x30
 8005f16:	d86b      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d060      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x15a>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d867      	bhi.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05c      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x15a>
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d05a      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x15a>
 8005f28:	e062      	b.n	8005ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f3a:	f000 f974 	bl	8006226 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e04f      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f68:	f000 f95d 	bl	8006226 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f7a:	609a      	str	r2, [r3, #8]
      break;
 8005f7c:	e03c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f000 f8d4 	bl	8006138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2150      	movs	r1, #80	@ 0x50
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 f92b 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005f9c:	e02c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005faa:	461a      	mov	r2, r3
 8005fac:	f000 f8f2 	bl	8006194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2160      	movs	r1, #96	@ 0x60
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 f91b 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005fbc:	e01c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f000 f8b4 	bl	8006138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2140      	movs	r1, #64	@ 0x40
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f90b 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005fdc:	e00c      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 f902 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005fee:	e003      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr

08006024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
	...

0800605c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2f      	ldr	r2, [pc, #188]	@ (800612c <TIM_Base_SetConfig+0xd0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0x30>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0x30>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a2c      	ldr	r2, [pc, #176]	@ (8006130 <TIM_Base_SetConfig+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0x30>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a2b      	ldr	r2, [pc, #172]	@ (8006134 <TIM_Base_SetConfig+0xd8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a22      	ldr	r2, [pc, #136]	@ (800612c <TIM_Base_SetConfig+0xd0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00b      	beq.n	80060be <TIM_Base_SetConfig+0x62>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ac:	d007      	beq.n	80060be <TIM_Base_SetConfig+0x62>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <TIM_Base_SetConfig+0xd4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_Base_SetConfig+0x62>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <TIM_Base_SetConfig+0xd8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d108      	bne.n	80060d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a0d      	ldr	r2, [pc, #52]	@ (800612c <TIM_Base_SetConfig+0xd0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d103      	bne.n	8006104 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f023 0201 	bic.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	611a      	str	r2, [r3, #16]
  }
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40000400 	.word	0x40000400
 8006134:	40000800 	.word	0x40000800

08006138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0201 	bic.w	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 030a 	bic.w	r3, r3, #10
 8006174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0210 	bic.w	r2, r3, #16
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	031b      	lsls	r3, r3, #12
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	f043 0307 	orr.w	r3, r3, #7
 8006214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr

08006226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	021a      	lsls	r2, r3, #8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	431a      	orrs	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4313      	orrs	r3, r2
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	609a      	str	r2, [r3, #8]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e046      	b.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c8:	d009      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a12      	ldr	r2, [pc, #72]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a10      	ldr	r2, [pc, #64]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10c      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800

08006320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <memset>:
 8006344:	4603      	mov	r3, r0
 8006346:	4402      	add	r2, r0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <memset+0xa>
 800634c:	4770      	bx	lr
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <memset+0x4>

08006354 <__errno>:
 8006354:	4b01      	ldr	r3, [pc, #4]	@ (800635c <__errno+0x8>)
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000014 	.word	0x20000014

08006360 <__libc_init_array>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	2600      	movs	r6, #0
 8006364:	4d0c      	ldr	r5, [pc, #48]	@ (8006398 <__libc_init_array+0x38>)
 8006366:	4c0d      	ldr	r4, [pc, #52]	@ (800639c <__libc_init_array+0x3c>)
 8006368:	1b64      	subs	r4, r4, r5
 800636a:	10a4      	asrs	r4, r4, #2
 800636c:	42a6      	cmp	r6, r4
 800636e:	d109      	bne.n	8006384 <__libc_init_array+0x24>
 8006370:	f000 f8b2 	bl	80064d8 <_init>
 8006374:	2600      	movs	r6, #0
 8006376:	4d0a      	ldr	r5, [pc, #40]	@ (80063a0 <__libc_init_array+0x40>)
 8006378:	4c0a      	ldr	r4, [pc, #40]	@ (80063a4 <__libc_init_array+0x44>)
 800637a:	1b64      	subs	r4, r4, r5
 800637c:	10a4      	asrs	r4, r4, #2
 800637e:	42a6      	cmp	r6, r4
 8006380:	d105      	bne.n	800638e <__libc_init_array+0x2e>
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	f855 3b04 	ldr.w	r3, [r5], #4
 8006388:	4798      	blx	r3
 800638a:	3601      	adds	r6, #1
 800638c:	e7ee      	b.n	800636c <__libc_init_array+0xc>
 800638e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006392:	4798      	blx	r3
 8006394:	3601      	adds	r6, #1
 8006396:	e7f2      	b.n	800637e <__libc_init_array+0x1e>
 8006398:	08006678 	.word	0x08006678
 800639c:	08006678 	.word	0x08006678
 80063a0:	08006678 	.word	0x08006678
 80063a4:	0800667c 	.word	0x0800667c

080063a8 <memcpy>:
 80063a8:	440a      	add	r2, r1
 80063aa:	4291      	cmp	r1, r2
 80063ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b0:	d100      	bne.n	80063b4 <memcpy+0xc>
 80063b2:	4770      	bx	lr
 80063b4:	b510      	push	{r4, lr}
 80063b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ba:	4291      	cmp	r1, r2
 80063bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c0:	d1f9      	bne.n	80063b6 <memcpy+0xe>
 80063c2:	bd10      	pop	{r4, pc}

080063c4 <sqrtf>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4605      	mov	r5, r0
 80063c8:	f000 f816 	bl	80063f8 <__ieee754_sqrtf>
 80063cc:	4629      	mov	r1, r5
 80063ce:	4604      	mov	r4, r0
 80063d0:	4628      	mov	r0, r5
 80063d2:	f7fa f98f 	bl	80006f4 <__aeabi_fcmpun>
 80063d6:	b968      	cbnz	r0, 80063f4 <sqrtf+0x30>
 80063d8:	2100      	movs	r1, #0
 80063da:	4628      	mov	r0, r5
 80063dc:	f7fa f962 	bl	80006a4 <__aeabi_fcmplt>
 80063e0:	b140      	cbz	r0, 80063f4 <sqrtf+0x30>
 80063e2:	f7ff ffb7 	bl	8006354 <__errno>
 80063e6:	2321      	movs	r3, #33	@ 0x21
 80063e8:	2100      	movs	r1, #0
 80063ea:	6003      	str	r3, [r0, #0]
 80063ec:	4608      	mov	r0, r1
 80063ee:	f7fa f86f 	bl	80004d0 <__aeabi_fdiv>
 80063f2:	4604      	mov	r4, r0
 80063f4:	4620      	mov	r0, r4
 80063f6:	bd38      	pop	{r3, r4, r5, pc}

080063f8 <__ieee754_sqrtf>:
 80063f8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80063fc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	4603      	mov	r3, r0
 8006406:	4604      	mov	r4, r0
 8006408:	d30a      	bcc.n	8006420 <__ieee754_sqrtf+0x28>
 800640a:	4601      	mov	r1, r0
 800640c:	f7f9 ffac 	bl	8000368 <__aeabi_fmul>
 8006410:	4601      	mov	r1, r0
 8006412:	4620      	mov	r0, r4
 8006414:	f7f9 fea0 	bl	8000158 <__addsf3>
 8006418:	4604      	mov	r4, r0
 800641a:	4620      	mov	r0, r4
 800641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006420:	2a00      	cmp	r2, #0
 8006422:	d0fa      	beq.n	800641a <__ieee754_sqrtf+0x22>
 8006424:	2800      	cmp	r0, #0
 8006426:	da06      	bge.n	8006436 <__ieee754_sqrtf+0x3e>
 8006428:	4601      	mov	r1, r0
 800642a:	f7f9 fe93 	bl	8000154 <__aeabi_fsub>
 800642e:	4601      	mov	r1, r0
 8006430:	f7fa f84e 	bl	80004d0 <__aeabi_fdiv>
 8006434:	e7f0      	b.n	8006418 <__ieee754_sqrtf+0x20>
 8006436:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800643a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800643e:	d03e      	beq.n	80064be <__ieee754_sqrtf+0xc6>
 8006440:	2400      	movs	r4, #0
 8006442:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8006446:	07ca      	lsls	r2, r1, #31
 8006448:	f04f 0019 	mov.w	r0, #25
 800644c:	4626      	mov	r6, r4
 800644e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006452:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800645a:	bf58      	it	pl
 800645c:	005b      	lslpl	r3, r3, #1
 800645e:	106d      	asrs	r5, r5, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	1872      	adds	r2, r6, r1
 8006464:	429a      	cmp	r2, r3
 8006466:	bfcf      	iteee	gt
 8006468:	461a      	movgt	r2, r3
 800646a:	1856      	addle	r6, r2, r1
 800646c:	1864      	addle	r4, r4, r1
 800646e:	1a9a      	suble	r2, r3, r2
 8006470:	3801      	subs	r0, #1
 8006472:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006476:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800647a:	d1f2      	bne.n	8006462 <__ieee754_sqrtf+0x6a>
 800647c:	b1ba      	cbz	r2, 80064ae <__ieee754_sqrtf+0xb6>
 800647e:	4e14      	ldr	r6, [pc, #80]	@ (80064d0 <__ieee754_sqrtf+0xd8>)
 8006480:	4f14      	ldr	r7, [pc, #80]	@ (80064d4 <__ieee754_sqrtf+0xdc>)
 8006482:	6830      	ldr	r0, [r6, #0]
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	f7f9 fe65 	bl	8000154 <__aeabi_fsub>
 800648a:	f8d6 8000 	ldr.w	r8, [r6]
 800648e:	4601      	mov	r1, r0
 8006490:	4640      	mov	r0, r8
 8006492:	f7fa f911 	bl	80006b8 <__aeabi_fcmple>
 8006496:	b150      	cbz	r0, 80064ae <__ieee754_sqrtf+0xb6>
 8006498:	6830      	ldr	r0, [r6, #0]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	f7f9 fe5c 	bl	8000158 <__addsf3>
 80064a0:	6836      	ldr	r6, [r6, #0]
 80064a2:	4601      	mov	r1, r0
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7fa f8fd 	bl	80006a4 <__aeabi_fcmplt>
 80064aa:	b168      	cbz	r0, 80064c8 <__ieee754_sqrtf+0xd0>
 80064ac:	3402      	adds	r4, #2
 80064ae:	1064      	asrs	r4, r4, #1
 80064b0:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80064b4:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80064b8:	e7af      	b.n	800641a <__ieee754_sqrtf+0x22>
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	3201      	adds	r2, #1
 80064be:	0218      	lsls	r0, r3, #8
 80064c0:	d5fb      	bpl.n	80064ba <__ieee754_sqrtf+0xc2>
 80064c2:	3a01      	subs	r2, #1
 80064c4:	1a89      	subs	r1, r1, r2
 80064c6:	e7bb      	b.n	8006440 <__ieee754_sqrtf+0x48>
 80064c8:	3401      	adds	r4, #1
 80064ca:	f024 0401 	bic.w	r4, r4, #1
 80064ce:	e7ee      	b.n	80064ae <__ieee754_sqrtf+0xb6>
 80064d0:	20000068 	.word	0x20000068
 80064d4:	20000064 	.word	0x20000064

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
