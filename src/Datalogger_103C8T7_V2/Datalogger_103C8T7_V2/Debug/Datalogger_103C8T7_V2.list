
Datalogger_103C8T7_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  0800664c  0800664c  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800664c  0800664c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006654  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000006c  080066c0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  080066c0  00008590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012415  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acc  00000000  00000000  0001a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  0001e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019250  00000000  00000000  0001ed06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014338  00000000  00000000  00037f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093aac  00000000  00000000  0004c28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfd3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004950  00000000  00000000  000dfd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000e46d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080064ac 	.word	0x080064ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080064ac 	.word	0x080064ac

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2uiz>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	d20e      	bcs.n	8000742 <__aeabi_f2uiz+0x22>
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30b      	bcc.n	8000742 <__aeabi_f2uiz+0x22>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d409      	bmi.n	8000748 <__aeabi_f2uiz+0x28>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	fa23 f002 	lsr.w	r0, r3, r2
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2uiz+0x32>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d102      	bne.n	8000758 <__aeabi_f2uiz+0x38>
 8000752:	f04f 30ff 	mov.w	r0, #4294967295
 8000756:	4770      	bx	lr
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <getI2CAddress>:

#include "functions.h"
#include "constants.h"


uint8_t getI2CAddress(uint8_t address, uint8_t mode){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
	// Left shift to retrieve address in i2c format and add R/W flag
	// I2C_ADDR_ERR -> 0xFF
	// I2C_MODE_ERR -> 0xFE

	if (address > 128){
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b80      	cmp	r3, #128	@ 0x80
 8000774:	d901      	bls.n	800077a <getI2CAddress+0x1a>
		return I2C_ADDR_ERR;
 8000776:	23ff      	movs	r3, #255	@ 0xff
 8000778:	e00a      	b.n	8000790 <getI2CAddress+0x30>
	} else {
		if (mode > 2){
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d901      	bls.n	8000784 <getI2CAddress+0x24>
			return I2C_MODE_ERR;
 8000780:	23fe      	movs	r3, #254	@ 0xfe
 8000782:	e005      	b.n	8000790 <getI2CAddress+0x30>
		} else {
			return ((address << 1) + mode);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	4413      	add	r3, r2
 800078e:	b2db      	uxtb	r3, r3
		}
	}
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <ADCStartSyncCommand>:
		HAL_Delay(1);
		return I2C_ADC_OK;
	}
}

uint8_t ADCStartSyncCommand(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber){
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af02      	add	r7, sp, #8
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	70fb      	strb	r3, [r7, #3]
	// I2C_ADC_TRANSMIT_ERROR -> 0x03
	// I2C_ADC_WRONG_ADDRESS -> 0x02
	// I2C_ADC_WRONG_NUMBER -> 0x01

	// Return error if ADC number is not 1 or 2
	if (!((adcNumber == 1) || (adcNumber == 2))){
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d004      	beq.n	80007b6 <ADCStartSyncCommand+0x1c>
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d001      	beq.n	80007b6 <ADCStartSyncCommand+0x1c>
		return I2C_ADC_WRONG_NUMBER;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e02d      	b.n	8000812 <ADCStartSyncCommand+0x78>
	}
	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10a      	bne.n	80007d2 <ADCStartSyncCommand+0x38>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 80007bc:	2100      	movs	r1, #0
 80007be:	2040      	movs	r0, #64	@ 0x40
 80007c0:	f7ff ffce 	bl	8000760 <getI2CAddress>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2bff      	cmp	r3, #255	@ 0xff
 80007cc:	d10c      	bne.n	80007e8 <ADCStartSyncCommand+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 80007ce:	2302      	movs	r3, #2
 80007d0:	e01f      	b.n	8000812 <ADCStartSyncCommand+0x78>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2045      	movs	r0, #69	@ 0x45
 80007d6:	f7ff ffc3 	bl	8000760 <getI2CAddress>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2bff      	cmp	r3, #255	@ 0xff
 80007e2:	d101      	bne.n	80007e8 <ADCStartSyncCommand+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 80007e4:	2302      	movs	r3, #2
 80007e6:	e014      	b.n	8000812 <ADCStartSyncCommand+0x78>
		}
	}
	//Send reset command to ADC and in case of error retrieve the relative flag
	uint8_t addr = I2C_ADC_START_SYNC_COMMAND;
 80007e8:	2308      	movs	r3, #8
 80007ea:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, &addr, 1, HAL_MAX_DELAY);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	b299      	uxth	r1, r3
 80007f0:	f107 020d 	add.w	r2, r7, #13
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f003 f9cf 	bl	8003ba0 <HAL_I2C_Master_Transmit>
 8000802:	4603      	mov	r3, r0
 8000804:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <ADCStartSyncCommand+0x76>
		return I2C_ADC_TRANSMIT_ERROR;
 800080c:	2303      	movs	r3, #3
 800080e:	e000      	b.n	8000812 <ADCStartSyncCommand+0x78>
	} else {
		return I2C_ADC_OK;
 8000810:	2300      	movs	r3, #0
	}
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <ADCSetRegistersValue>:
		}

	}
}

uint8_t ADCSetRegistersValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, uint8_t regNumber, uint8_t regValue){
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af02      	add	r7, sp, #8
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	4608      	mov	r0, r1
 8000824:	4611      	mov	r1, r2
 8000826:	461a      	mov	r2, r3
 8000828:	4603      	mov	r3, r0
 800082a:	70fb      	strb	r3, [r7, #3]
 800082c:	460b      	mov	r3, r1
 800082e:	70bb      	strb	r3, [r7, #2]
 8000830:	4613      	mov	r3, r2
 8000832:	707b      	strb	r3, [r7, #1]
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	// Check adc number
	if (!((adcNumber == 1) || (adcNumber == 2))){
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d004      	beq.n	8000844 <ADCSetRegistersValue+0x2a>
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d001      	beq.n	8000844 <ADCSetRegistersValue+0x2a>
		return I2C_ADC_WRONG_NUMBER;
 8000840:	2301      	movs	r3, #1
 8000842:	e03c      	b.n	80008be <ADCSetRegistersValue+0xa4>
	}


	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10a      	bne.n	8000860 <ADCSetRegistersValue+0x46>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 800084a:	2100      	movs	r1, #0
 800084c:	2040      	movs	r0, #64	@ 0x40
 800084e:	f7ff ff87 	bl	8000760 <getI2CAddress>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2bff      	cmp	r3, #255	@ 0xff
 800085a:	d10c      	bne.n	8000876 <ADCSetRegistersValue+0x5c>
			return I2C_ADC_WRONG_ADDRESS;
 800085c:	2302      	movs	r3, #2
 800085e:	e02e      	b.n	80008be <ADCSetRegistersValue+0xa4>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 8000860:	2100      	movs	r1, #0
 8000862:	2045      	movs	r0, #69	@ 0x45
 8000864:	f7ff ff7c 	bl	8000760 <getI2CAddress>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2bff      	cmp	r3, #255	@ 0xff
 8000870:	d101      	bne.n	8000876 <ADCSetRegistersValue+0x5c>
			return I2C_ADC_WRONG_ADDRESS;
 8000872:	2302      	movs	r3, #2
 8000874:	e023      	b.n	80008be <ADCSetRegistersValue+0xa4>
		}
	}

	// Check register
	if (regNumber > 3){
 8000876:	78bb      	ldrb	r3, [r7, #2]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d901      	bls.n	8000880 <ADCSetRegistersValue+0x66>
		return I2C_ADC_REG_NUMBER_ERROR;
 800087c:	2305      	movs	r3, #5
 800087e:	e01e      	b.n	80008be <ADCSetRegistersValue+0xa4>
	}

	// Send the command bytes (0100 rrxx dddd dddd)
	uint8_t regCommand[2] = {0};
 8000880:	2300      	movs	r3, #0
 8000882:	81bb      	strh	r3, [r7, #12]
	regCommand[0] = ((I2C_ADC_WRITE_REGISTER_COMMAND << 4) | (regNumber << 2));
 8000884:	78bb      	ldrb	r3, [r7, #2]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	733b      	strb	r3, [r7, #12]
	regCommand[1] = regValue;
 8000894:	787b      	ldrb	r3, [r7, #1]
 8000896:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, regCommand, 2, HAL_MAX_DELAY);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2302      	movs	r3, #2
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f003 f979 	bl	8003ba0 <HAL_I2C_Master_Transmit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <ADCSetRegistersValue+0xa2>
		return I2C_ADC_TRANSMIT_ERROR;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e000      	b.n	80008be <ADCSetRegistersValue+0xa4>
	} else {
		return I2C_ADC_OK;
 80008bc:	2300      	movs	r3, #0
	}
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <ADCGetDataValue>:

uint8_t ADCGetDataValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, int32_t* dataValue, uint8_t dataType){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	460b      	mov	r3, r1
 80008d4:	72fb      	strb	r3, [r7, #11]
 80008d6:	4613      	mov	r3, r2
 80008d8:	72bb      	strb	r3, [r7, #10]
	// I2C_ADC_WRONG_NUMBER -> 0x01
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	if (!((adcNumber == 1) || (adcNumber == 2))){
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d008      	beq.n	80008f2 <ADCGetDataValue+0x2c>
 80008e0:	7afb      	ldrb	r3, [r7, #11]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d005      	beq.n	80008f2 <ADCGetDataValue+0x2c>
		*dataValue = I2C_ADC_DATA_ERROR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f06f 0201 	mvn.w	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e082      	b.n	80009f8 <ADCGetDataValue+0x132>
	}

	if (!((dataType == I2C_ADC_DATA_TEMP) || (dataType == I2C_ADC_DATA_VOLT))){
 80008f2:	7abb      	ldrb	r3, [r7, #10]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d008      	beq.n	800090a <ADCGetDataValue+0x44>
 80008f8:	7abb      	ldrb	r3, [r7, #10]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d005      	beq.n	800090a <ADCGetDataValue+0x44>
		*dataValue = I2C_ADC_DATA_ERROR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f06f 0201 	mvn.w	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_DATA;
 8000906:	2306      	movs	r3, #6
 8000908:	e076      	b.n	80009f8 <ADCGetDataValue+0x132>
	}


	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddressTransmit, adcAddressReceive;
	if (adcNumber == 1){
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d117      	bne.n	8000940 <ADCGetDataValue+0x7a>
		adcAddressTransmit = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 8000910:	2100      	movs	r1, #0
 8000912:	2040      	movs	r0, #64	@ 0x40
 8000914:	f7ff ff24 	bl	8000760 <getI2CAddress>
 8000918:	4603      	mov	r3, r0
 800091a:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC1_ADDR, I2C_MODE_READ);
 800091c:	2101      	movs	r1, #1
 800091e:	2040      	movs	r0, #64	@ 0x40
 8000920:	f7ff ff1e 	bl	8000760 <getI2CAddress>
 8000924:	4603      	mov	r3, r0
 8000926:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	2bff      	cmp	r3, #255	@ 0xff
 800092c:	d002      	beq.n	8000934 <ADCGetDataValue+0x6e>
 800092e:	7dbb      	ldrb	r3, [r7, #22]
 8000930:	2bff      	cmp	r3, #255	@ 0xff
 8000932:	d11d      	bne.n	8000970 <ADCGetDataValue+0xaa>
			*dataValue = I2C_ADC_DATA_ERROR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f06f 0201 	mvn.w	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 800093c:	2302      	movs	r3, #2
 800093e:	e05b      	b.n	80009f8 <ADCGetDataValue+0x132>
		}
	} else {
		adcAddressTransmit = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 8000940:	2100      	movs	r1, #0
 8000942:	2045      	movs	r0, #69	@ 0x45
 8000944:	f7ff ff0c 	bl	8000760 <getI2CAddress>
 8000948:	4603      	mov	r3, r0
 800094a:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC2_ADDR, I2C_MODE_READ);
 800094c:	2101      	movs	r1, #1
 800094e:	2045      	movs	r0, #69	@ 0x45
 8000950:	f7ff ff06 	bl	8000760 <getI2CAddress>
 8000954:	4603      	mov	r3, r0
 8000956:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2bff      	cmp	r3, #255	@ 0xff
 800095c:	d002      	beq.n	8000964 <ADCGetDataValue+0x9e>
 800095e:	7dbb      	ldrb	r3, [r7, #22]
 8000960:	2bff      	cmp	r3, #255	@ 0xff
 8000962:	d105      	bne.n	8000970 <ADCGetDataValue+0xaa>
			*dataValue = I2C_ADC_DATA_ERROR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f06f 0201 	mvn.w	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 800096c:	2302      	movs	r3, #2
 800096e:	e043      	b.n	80009f8 <ADCGetDataValue+0x132>
		}
	}

	// Send the command byte
	uint8_t addr = I2C_ADC_READ_DATA_COMMAND;
 8000970:	2310      	movs	r3, #16
 8000972:	753b      	strb	r3, [r7, #20]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddressTransmit, &addr, 1, HAL_MAX_DELAY);
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	b299      	uxth	r1, r3
 8000978:	f107 0214 	add.w	r2, r7, #20
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f003 f90b 	bl	8003ba0 <HAL_I2C_Master_Transmit>
 800098a:	4603      	mov	r3, r0
 800098c:	757b      	strb	r3, [r7, #21]
	if (ret != HAL_OK){
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d005      	beq.n	80009a0 <ADCGetDataValue+0xda>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f06f 0201 	mvn.w	r2, #1
 800099a:	601a      	str	r2, [r3, #0]
		return I2C_ADC_TRANSMIT_ERROR;
 800099c:	2303      	movs	r3, #3
 800099e:	e02b      	b.n	80009f8 <ADCGetDataValue+0x132>
	} else {
		uint8_t data[2] = {0x00, 0x00};
 80009a0:	2300      	movs	r3, #0
 80009a2:	823b      	strh	r3, [r7, #16]
		ret = HAL_I2C_Master_Receive(hi2c1, (uint16_t) (adcAddressReceive), data, 2, HAL_MAX_DELAY);
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	b299      	uxth	r1, r3
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2302      	movs	r3, #2
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f003 f9f1 	bl	8003d9c <HAL_I2C_Master_Receive>
 80009ba:	4603      	mov	r3, r0
 80009bc:	757b      	strb	r3, [r7, #21]
		if (ret != HAL_OK){
 80009be:	7d7b      	ldrb	r3, [r7, #21]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <ADCGetDataValue+0x10a>
			*dataValue = I2C_ADC_DATA_ERROR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f06f 0201 	mvn.w	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
			return I2C_ADC_RECEIVE_ERROR;
 80009cc:	2304      	movs	r3, #4
 80009ce:	e013      	b.n	80009f8 <ADCGetDataValue+0x132>
		} else {
			// Return 16 bit voltage or 14-bit temperature (left shifted)
			if (dataType == I2C_ADC_DATA_TEMP){
 80009d0:	7abb      	ldrb	r3, [r7, #10]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d109      	bne.n	80009ea <ADCGetDataValue+0x124>
				*dataValue = ((data[0] >> 2) << 8) | (data[1]);
 80009d6:	7c3b      	ldrb	r3, [r7, #16]
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	7c7a      	ldrb	r2, [r7, #17]
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e006      	b.n	80009f8 <ADCGetDataValue+0x132>
			} else {
				*dataValue = data[0] << 8 | data[1];
 80009ea:	7c3b      	ldrb	r3, [r7, #16]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	7c7a      	ldrb	r2, [r7, #17]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 80009f6:	2300      	movs	r3, #0
			}
		}
	}
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <getValueFromVoltageData>:


float getValueFromVoltageData(int32_t data){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	// If data < 0x7FFF i have a negative number else i have a positive one
	// For negative number i have to evaluate the two's complement
	data = (uint16_t) data;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	607b      	str	r3, [r7, #4]
	if (data <= 0x7FFF){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a14:	da09      	bge.n	8000a2a <getValueFromVoltageData+0x2a>
		return (data * 0.000152587890625f);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fc52 	bl	80002c0 <__aeabi_i2f>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	490b      	ldr	r1, [pc, #44]	@ (8000a4c <getValueFromVoltageData+0x4c>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fca1 	bl	8000368 <__aeabi_fmul>
 8000a26:	4603      	mov	r3, r0
 8000a28:	e00c      	b.n	8000a44 <getValueFromVoltageData+0x44>
	} else {
		return ((((~data) + 1) * 0.000152587890625f) * (-1));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fc46 	bl	80002c0 <__aeabi_i2f>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4905      	ldr	r1, [pc, #20]	@ (8000a4c <getValueFromVoltageData+0x4c>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc95 	bl	8000368 <__aeabi_fmul>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
	}
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	39200000 	.word	0x39200000

08000a50 <getADCChannelVoltage>:
		}
	}
}


uint8_t getADCChannelVoltage(I2C_HandleTypeDef* hi2c1, TIM_HandleTypeDef* htim1, uint8_t adcNumber, uint8_t dataChannel, float* dataValue, bool* timElapsedFlag){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	460b      	mov	r3, r1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	4613      	mov	r3, r2
 8000a64:	71bb      	strb	r3, [r7, #6]
	// I2C_ADC_ERRROR_START_SYNC_CMD -> 0x08
	// I2C_ADC_ERROR_RDATA_CMD -> 0x09
	// I2C_ADC_WRONG_CHANNEL -> 0x10

	// Check ADC number
	if (!((adcNumber == 1) || (adcNumber == 2))){
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d008      	beq.n	8000a7e <getADCChannelVoltage+0x2e>
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d005      	beq.n	8000a7e <getADCChannelVoltage+0x2e>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a74:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000a78:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e096      	b.n	8000bac <getADCChannelVoltage+0x15c>
	}

	// Check channel number
	if ((dataChannel < 0) || (dataChannel > 3)){
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d905      	bls.n	8000a90 <getADCChannelVoltage+0x40>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a86:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000a8a:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_CHANNEL;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	e08d      	b.n	8000bac <getADCChannelVoltage+0x15c>
	}

	uint8_t regChannel[4] = {REG_0_CH0, REG_0_CH1, REG_0_CH2, REG_0_CH3};
 8000a90:	4b48      	ldr	r3, [pc, #288]	@ (8000bb4 <getADCChannelVoltage+0x164>)
 8000a92:	61fb      	str	r3, [r7, #28]

	// Check setup is successful
	uint8_t retValues[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	61bb      	str	r3, [r7, #24]
	retValues[0] = ADCSetRegistersValue(hi2c1, adcNumber, 0x00, regChannel[dataChannel]);
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	3320      	adds	r3, #32
 8000a9e:	443b      	add	r3, r7
 8000aa0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000aa4:	79f9      	ldrb	r1, [r7, #7]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f7ff feb6 	bl	800081a <ADCSetRegistersValue>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	763b      	strb	r3, [r7, #24]
	retValues[1] = ADCSetRegistersValue(hi2c1, adcNumber, 0x01, REG_1_DEFAULT);
 8000ab2:	79f9      	ldrb	r1, [r7, #7]
 8000ab4:	23d4      	movs	r3, #212	@ 0xd4
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff feae 	bl	800081a <ADCSetRegistersValue>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	767b      	strb	r3, [r7, #25]
	retValues[2] = ADCSetRegistersValue(hi2c1, adcNumber, 0x02, REG_2_DEFAULT);
 8000ac2:	79f9      	ldrb	r1, [r7, #7]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fea6 	bl	800081a <ADCSetRegistersValue>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	76bb      	strb	r3, [r7, #26]
	retValues[3] = ADCSetRegistersValue(hi2c1, adcNumber, 0x03, REG_3_DEFAULT);
 8000ad2:	79f9      	ldrb	r1, [r7, #7]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe9e 	bl	800081a <ADCSetRegistersValue>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	76fb      	strb	r3, [r7, #27]

	if ((retValues[0] == I2C_ADC_OK) && (retValues[1] == I2C_ADC_OK) && (retValues[2] == I2C_ADC_OK) && (retValues[3] == I2C_ADC_OK)){
 8000ae2:	7e3b      	ldrb	r3, [r7, #24]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d15c      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
 8000ae8:	7e7b      	ldrb	r3, [r7, #25]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d159      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
 8000aee:	7ebb      	ldrb	r3, [r7, #26]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d156      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
 8000af4:	7efb      	ldrb	r3, [r7, #27]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d153      	bne.n	8000ba2 <getADCChannelVoltage+0x152>
		if (ADCStartSyncCommand(hi2c1, adcNumber) == I2C_ADC_OK){
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4619      	mov	r1, r3
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fe4b 	bl	800079a <ADCStartSyncCommand>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d145      	bne.n	8000b96 <getADCChannelVoltage+0x146>
			if (adcNumber == 1){
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d112      	bne.n	8000b36 <getADCChannelVoltage+0xe6>
				while (HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b10:	e009      	b.n	8000b26 <getADCChannelVoltage+0xd6>
					*timElapsedFlag = false;
 8000b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(htim1);
 8000b18:	68b8      	ldr	r0, [r7, #8]
 8000b1a:	f005 f85b 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
					while (timElapsedFlag == false){
 8000b1e:	bf00      	nop
 8000b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0fc      	beq.n	8000b20 <getADCChannelVoltage+0xd0>
				while (HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4823      	ldr	r0, [pc, #140]	@ (8000bb8 <getADCChannelVoltage+0x168>)
 8000b2a:	f002 fead 	bl	8003888 <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1ee      	bne.n	8000b12 <getADCChannelVoltage+0xc2>
 8000b34:	e014      	b.n	8000b60 <getADCChannelVoltage+0x110>
					}
				}
			} else if (adcNumber == 2){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d111      	bne.n	8000b60 <getADCChannelVoltage+0x110>
				while (HAL_GPIO_ReadPin(ADC2_NDRDY_GPIO_Port, ADC2_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b3c:	e009      	b.n	8000b52 <getADCChannelVoltage+0x102>
					*timElapsedFlag = false;
 8000b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(htim1);
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f005 f845 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
					while (timElapsedFlag == false){
 8000b4a:	bf00      	nop
 8000b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0fc      	beq.n	8000b4c <getADCChannelVoltage+0xfc>
				while (HAL_GPIO_ReadPin(ADC2_NDRDY_GPIO_Port, ADC2_NDRDY_Pin) != GPIO_PIN_RESET){
 8000b52:	2140      	movs	r1, #64	@ 0x40
 8000b54:	4819      	ldr	r0, [pc, #100]	@ (8000bbc <getADCChannelVoltage+0x16c>)
 8000b56:	f002 fe97 	bl	8003888 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ee      	bne.n	8000b3e <getADCChannelVoltage+0xee>
					}
				}
			}
			int32_t res = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
			if (ADCGetDataValue(hi2c1, adcNumber, &res, I2C_ADC_DATA_VOLT) != I2C_ADC_OK){
 8000b64:	f107 0214 	add.w	r2, r7, #20
 8000b68:	79f9      	ldrb	r1, [r7, #7]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff feaa 	bl	80008c6 <ADCGetDataValue>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <getADCChannelVoltage+0x134>
				*dataValue = I2C_ADC_DATA_ERROR;
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b7e:	601a      	str	r2, [r3, #0]
				return I2C_ADC_ERROR_RDATA_CMD;
 8000b80:	2309      	movs	r3, #9
 8000b82:	e013      	b.n	8000bac <getADCChannelVoltage+0x15c>
			} else {
				*dataValue = getValueFromVoltageData(res);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff3a 	bl	8000a00 <getValueFromVoltageData>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e00a      	b.n	8000bac <getADCChannelVoltage+0x15c>
			}
		} else {
			*dataValue = I2C_ADC_DATA_ERROR;
 8000b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b98:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000b9c:	601a      	str	r2, [r3, #0]
			return I2C_ADC_ERROR_START_SYNC_CMD;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	e004      	b.n	8000bac <getADCChannelVoltage+0x15c>
		}
	} else {
		*dataValue = I2C_ADC_DATA_ERROR;
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000ba8:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_SETUP;
 8000baa:	2307      	movs	r3, #7
	}
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	b1a19181 	.word	0xb1a19181
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <LMT84_getTemperature>:
 *      Author: lucad
 */

#include "lmt84.h"

float LMT84_getTemperature(uint8_t mode, float voltage, float* temp){
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b0d8      	sub	sp, #352	@ 0x160
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000bce:	6019      	str	r1, [r3, #0]
 8000bd0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bd4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bde:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000be2:	4602      	mov	r2, r0
 8000be4:	701a      	strb	r2, [r3, #0]
	*temp = 0;
 8000be6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bea:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
	if (mode == LMT84_INT_MODE){
 8000bf6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bfa:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 80cf 	bne.w	8000da4 <LMT84_getTemperature+0x1e4>
		if (voltage > LMT84_MAX_VOLT){
 8000c06:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c0a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c0e:	4988      	ldr	r1, [pc, #544]	@ (8000e30 <LMT84_getTemperature+0x270>)
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	f7ff fd65 	bl	80006e0 <__aeabi_fcmpgt>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <LMT84_getTemperature+0x60>
			return LMT84_ERR_V_OVER;
 8000c1c:	4b85      	ldr	r3, [pc, #532]	@ (8000e34 <LMT84_getTemperature+0x274>)
 8000c1e:	e102      	b.n	8000e26 <LMT84_getTemperature+0x266>
		} else if (voltage < LMT84_MIN_VOLT){
 8000c20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c24:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c28:	4983      	ldr	r1, [pc, #524]	@ (8000e38 <LMT84_getTemperature+0x278>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f7ff fd3a 	bl	80006a4 <__aeabi_fcmplt>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <LMT84_getTemperature+0x7a>
			return LMT84_ERR_V_UNDER;
 8000c36:	4b81      	ldr	r3, [pc, #516]	@ (8000e3c <LMT84_getTemperature+0x27c>)
 8000c38:	e0f5      	b.n	8000e26 <LMT84_getTemperature+0x266>
		} else {
			float volts[LMT84_LEN] = {1.299, 1.273, 1.247, 1.221, 1.194, 1.168, 1.141, 1.114, 1.088, 1.061, 1.034, 1.007, 0.980, 0.952, 0.925,
 8000c3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c3e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000c42:	4a7f      	ldr	r2, [pc, #508]	@ (8000e40 <LMT84_getTemperature+0x280>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	4611      	mov	r1, r2
 8000c48:	23a4      	movs	r3, #164	@ 0xa4
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f005 fb96 	bl	800637c <memcpy>
							   0.898, 0.871, 0.843, 0.816, 0.788, 0.760, 0.732, 0.704, 0.676, 0.647, 0.619, 0.591, 0.562, 0.534, 0.505,
							   0.476, 0.448, 0.419, 0.390, 0.361, 0.332, 0.302, 0.273, 0.243, 0.213, 0.183};
			float temps[LMT84_LEN] = {	 -50,   -45,   -40,   -35,   -30,   -25,   -20,   -15,   -10,    -5,     0,     5,    10,    15,    20,
 8000c50:	4a7c      	ldr	r2, [pc, #496]	@ (8000e44 <LMT84_getTemperature+0x284>)
 8000c52:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000c56:	4611      	mov	r1, r2
 8000c58:	22a4      	movs	r2, #164	@ 0xa4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 fb8e 	bl	800637c <memcpy>
								  25,    30,    35,    40,    45,    50,    55,    60,    65,    70,    75,    80,    85,    90,    95,
								 100,   105,   110,   115,   120,   125,   130,   135,   140,   145,   150};
			if ((sizeof(volts)/sizeof(volts[0])) != (sizeof(temps)/sizeof(temps[0]))){
				return LMT84_ERR_INTERPOLATION;
			} else {
				uint8_t index = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
				for (uint8_t i = 0; i < LMT84_LEN; i++){
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8000c6c:	e01c      	b.n	8000ca8 <LMT84_getTemperature+0xe8>
					if (volts[i] <= voltage) {
 8000c6e:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 8000c72:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c7e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c82:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000c86:	4611      	mov	r1, r2
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f7ff fd1f 	bl	80006cc <__aeabi_fcmpge>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <LMT84_getTemperature+0xde>
						index = i;
 8000c94:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000c98:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
						break;
 8000c9c:	e008      	b.n	8000cb0 <LMT84_getTemperature+0xf0>
				for (uint8_t i = 0; i < LMT84_LEN; i++){
 8000c9e:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 8000ca8:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000cac:	2b28      	cmp	r3, #40	@ 0x28
 8000cae:	d9de      	bls.n	8000c6e <LMT84_getTemperature+0xae>
					}
				}
				if (index == 0){
 8000cb0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d107      	bne.n	8000cc8 <LMT84_getTemperature+0x108>
					*temp = -50.0f;
 8000cb8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000cbc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a61      	ldr	r2, [pc, #388]	@ (8000e48 <LMT84_getTemperature+0x288>)
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e066      	b.n	8000d96 <LMT84_getTemperature+0x1d6>
				} else {
					*temp = temp[index-1] + (temp[index-1] - temp[index]) * (voltage - volts[index-1]) / (volts[index-1] - volts[index]);
 8000cc8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000ccc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000cd8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	681c      	ldr	r4, [r3, #0]
 8000ce2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000ce6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cea:	3b01      	subs	r3, #1
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000cf2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000d06:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff fa1f 	bl	8000154 <__aeabi_fsub>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461d      	mov	r5, r3
 8000d1a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d24:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d2c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d30:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000d34:	4611      	mov	r1, r2
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	f7ff fa0c 	bl	8000154 <__aeabi_fsub>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4628      	mov	r0, r5
 8000d42:	f7ff fb11 	bl	8000368 <__aeabi_fmul>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461d      	mov	r5, r3
 8000d4a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d5c:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8000d60:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff f9f1 	bl	8000154 <__aeabi_fsub>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4628      	mov	r0, r5
 8000d78:	f7ff fbaa 	bl	80004d0 <__aeabi_fdiv>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff f9e9 	bl	8000158 <__addsf3>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d8e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	601a      	str	r2, [r3, #0]
				}
				return *temp;
 8000d96:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000d9a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	e040      	b.n	8000e26 <LMT84_getTemperature+0x266>
			}
		}
	} else if (mode == LMT84_SQRT_MODE){
 8000da4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000da8:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d138      	bne.n	8000e24 <LMT84_getTemperature+0x264>
		#include <math.h>
		*temp = (5.506f - sqrtf(30.316036f + 0.00704f * (870.6f - voltage*1000)))/(-0.00352f) + 30;
 8000db2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000db6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000dba:	4924      	ldr	r1, [pc, #144]	@ (8000e4c <LMT84_getTemperature+0x28c>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f7ff fad3 	bl	8000368 <__aeabi_fmul>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <LMT84_getTemperature+0x290>)
 8000dc8:	f7ff f9c4 	bl	8000154 <__aeabi_fsub>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4921      	ldr	r1, [pc, #132]	@ (8000e54 <LMT84_getTemperature+0x294>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fac9 	bl	8000368 <__aeabi_fmul>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	491f      	ldr	r1, [pc, #124]	@ (8000e58 <LMT84_getTemperature+0x298>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff f9bc 	bl	8000158 <__addsf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 fad8 	bl	8006398 <sqrtf>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	481b      	ldr	r0, [pc, #108]	@ (8000e5c <LMT84_getTemperature+0x29c>)
 8000dee:	f7ff f9b1 	bl	8000154 <__aeabi_fsub>
 8000df2:	4603      	mov	r3, r0
 8000df4:	491a      	ldr	r1, [pc, #104]	@ (8000e60 <LMT84_getTemperature+0x2a0>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb6a 	bl	80004d0 <__aeabi_fdiv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4919      	ldr	r1, [pc, #100]	@ (8000e64 <LMT84_getTemperature+0x2a4>)
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9a9 	bl	8000158 <__addsf3>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e0e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	601a      	str	r2, [r3, #0]
		return *temp;
 8000e16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000e1a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	e000      	b.n	8000e26 <LMT84_getTemperature+0x266>
	} else {
		return LMT84_ERR_MODE;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <LMT84_getTemperature+0x2a8>)
	}
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	3fa645a2 	.word	0x3fa645a2
 8000e34:	437f0000 	.word	0x437f0000
 8000e38:	3e3b645a 	.word	0x3e3b645a
 8000e3c:	437e0000 	.word	0x437e0000
 8000e40:	080064c4 	.word	0x080064c4
 8000e44:	08006568 	.word	0x08006568
 8000e48:	c2480000 	.word	0xc2480000
 8000e4c:	447a0000 	.word	0x447a0000
 8000e50:	4459a666 	.word	0x4459a666
 8000e54:	3be6afcd 	.word	0x3be6afcd
 8000e58:	41f2873e 	.word	0x41f2873e
 8000e5c:	40b03127 	.word	0x40b03127
 8000e60:	bb66afcd 	.word	0xbb66afcd
 8000e64:	41f00000 	.word	0x41f00000
 8000e68:	437d0000 	.word	0x437d0000

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e72:	f001 f985 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e76:	f000 f98f 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7a:	f000 fbcf 	bl	800161c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e7e:	f000 fbaf 	bl	80015e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e82:	f000 f9e5 	bl	8001250 <MX_ADC1_Init>
  MX_CAN_Init();
 8000e86:	f000 fa5d 	bl	8001344 <MX_CAN_Init>
  MX_I2C1_Init();
 8000e8a:	f000 fa91 	bl	80013b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e8e:	f000 fabd 	bl	800140c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e92:	f000 fb09 	bl	80014a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e96:	f000 fb55 	bl	8001544 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //ADC setup commands
  while (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){}
 8000e9a:	bf00      	nop
 8000e9c:	489e      	ldr	r0, [pc, #632]	@ (8001118 <main+0x2ac>)
 8000e9e:	f001 fdb7 	bl	8002a10 <HAL_ADCEx_Calibration_Start>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f9      	bne.n	8000e9c <main+0x30>
  HAL_ADC_Start_DMA(&hadc1, dmaRawADC, 5);
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	499c      	ldr	r1, [pc, #624]	@ (800111c <main+0x2b0>)
 8000eac:	489a      	ldr	r0, [pc, #616]	@ (8001118 <main+0x2ac>)
 8000eae:	f001 fac5 	bl	800243c <HAL_ADC_Start_DMA>

  //CAN Bus setup command
  sFilterConfig.FilterActivation = CAN_FILTER_DISABLE;
 8000eb2:	4b9b      	ldr	r3, [pc, #620]	@ (8001120 <main+0x2b4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterBank = 18;
 8000eb8:	4b99      	ldr	r3, [pc, #612]	@ (8001120 <main+0x2b4>)
 8000eba:	2212      	movs	r2, #18
 8000ebc:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ebe:	4b98      	ldr	r3, [pc, #608]	@ (8001120 <main+0x2b4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x446<<5;
 8000ec4:	4b96      	ldr	r3, [pc, #600]	@ (8001120 <main+0x2b4>)
 8000ec6:	f648 02c0 	movw	r2, #35008	@ 0x88c0
 8000eca:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000ecc:	4b94      	ldr	r3, [pc, #592]	@ (8001120 <main+0x2b4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x446<<5;
 8000ed2:	4b93      	ldr	r3, [pc, #588]	@ (8001120 <main+0x2b4>)
 8000ed4:	f648 02c0 	movw	r2, #35008	@ 0x88c0
 8000ed8:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000eda:	4b91      	ldr	r3, [pc, #580]	@ (8001120 <main+0x2b4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8001120 <main+0x2b4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8001120 <main+0x2b4>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	61da      	str	r2, [r3, #28]
  sFilterConfig.SlaveStartFilterBank = 20;
 8000eec:	4b8c      	ldr	r3, [pc, #560]	@ (8001120 <main+0x2b4>)
 8000eee:	2214      	movs	r2, #20
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24

  //HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);

  pHeaderHighFreq.IDE = CAN_ID_STD;
 8000ef2:	4b8c      	ldr	r3, [pc, #560]	@ (8001124 <main+0x2b8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  pHeaderHighFreq.StdId = CAN_FAST_ADDR;
 8000ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8001124 <main+0x2b8>)
 8000efa:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8000efe:	601a      	str	r2, [r3, #0]
  pHeaderHighFreq.RTR = CAN_RTR_DATA;
 8000f00:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <main+0x2b8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  pHeaderHighFreq.DLC = 8;
 8000f06:	4b87      	ldr	r3, [pc, #540]	@ (8001124 <main+0x2b8>)
 8000f08:	2208      	movs	r2, #8
 8000f0a:	611a      	str	r2, [r3, #16]

  pHeaderLowFreq.IDE = CAN_ID_STD;
 8000f0c:	4b86      	ldr	r3, [pc, #536]	@ (8001128 <main+0x2bc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  pHeaderLowFreq.StdId = CAN_SLOW_ADDR;
 8000f12:	4b85      	ldr	r3, [pc, #532]	@ (8001128 <main+0x2bc>)
 8000f14:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000f18:	601a      	str	r2, [r3, #0]
  pHeaderLowFreq.RTR = CAN_RTR_DATA;
 8000f1a:	4b83      	ldr	r3, [pc, #524]	@ (8001128 <main+0x2bc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  pHeaderLowFreq.DLC = 8;
 8000f20:	4b81      	ldr	r3, [pc, #516]	@ (8001128 <main+0x2bc>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	611a      	str	r2, [r3, #16]

  HAL_CAN_Start(&hcan);
 8000f26:	4881      	ldr	r0, [pc, #516]	@ (800112c <main+0x2c0>)
 8000f28:	f001 ff1b 	bl	8002d62 <HAL_CAN_Start>

  //Timers start command
  HAL_TIM_Base_Start_IT(&htim2);
 8000f2c:	4880      	ldr	r0, [pc, #512]	@ (8001130 <main+0x2c4>)
 8000f2e:	f004 fe51 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f32:	4880      	ldr	r0, [pc, #512]	@ (8001134 <main+0x2c8>)
 8000f34:	f004 fe4e 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000f38:	487f      	ldr	r0, [pc, #508]	@ (8001138 <main+0x2cc>)
 8000f3a:	f004 fe4b 	bl	8005bd4 <HAL_TIM_Base_Start_IT>
  //- Traditional comparator mode
  //- Active Low comparator
  //- Non latching comparator
  //- Disable comparator

  adsConfigBuffer[0] = ADS_CONFIGURATION_REGISTER;
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800113c <main+0x2d0>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
  adsConfigBuffer[1] = adsMuxConfiguration[0];
 8000f44:	4b7e      	ldr	r3, [pc, #504]	@ (8001140 <main+0x2d4>)
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	4b7c      	ldr	r3, [pc, #496]	@ (800113c <main+0x2d0>)
 8000f4a:	705a      	strb	r2, [r3, #1]
  adsConfigBuffer[2] = 0b11100011;
 8000f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800113c <main+0x2d0>)
 8000f4e:	22e3      	movs	r2, #227	@ 0xe3
 8000f50:	709a      	strb	r2, [r3, #2]

  if (HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsConfigBuffer, 3, 100) != HAL_OK){
 8000f52:	2364      	movs	r3, #100	@ 0x64
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2303      	movs	r3, #3
 8000f58:	4a78      	ldr	r2, [pc, #480]	@ (800113c <main+0x2d0>)
 8000f5a:	2192      	movs	r1, #146	@ 0x92
 8000f5c:	4879      	ldr	r0, [pc, #484]	@ (8001144 <main+0x2d8>)
 8000f5e:	f002 fe1f 	bl	8003ba0 <HAL_I2C_Master_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <main+0x102>
	  error_I2C_test = 2;
 8000f68:	4b77      	ldr	r3, [pc, #476]	@ (8001148 <main+0x2dc>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
	  //Error_Handler();
  }

  HAL_Delay(50);
 8000f6e:	2032      	movs	r0, #50	@ 0x32
 8000f70:	f001 f968 	bl	8002244 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (uint8_t i = 0; i < 4; i++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	e079      	b.n	800106e <main+0x202>

		//Get conversion data
		if (HAL_I2C_Mem_Read(&hi2c1, ADS_ADDRESS, ADS_CONVERSION_REGISTER, 1, adsRetBuffer, 2, 10) != HAL_OK){
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	4b72      	ldr	r3, [pc, #456]	@ (800114c <main+0x2e0>)
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2192      	movs	r1, #146	@ 0x92
 8000f8c:	486d      	ldr	r0, [pc, #436]	@ (8001144 <main+0x2d8>)
 8000f8e:	f003 f971 	bl	8004274 <HAL_I2C_Mem_Read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <main+0x132>
			error_I2C_test = 3;
 8000f98:	4b6b      	ldr	r3, [pc, #428]	@ (8001148 <main+0x2dc>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
			//Error_Handler();
		}

		//Decode converted data
		adsRawValues[i] = (adsRetBuffer[0] << 8 | adsRetBuffer[1]);
 8000f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800114c <main+0x2e0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b219      	sxth	r1, r3
 8000fa6:	4b69      	ldr	r3, [pc, #420]	@ (800114c <main+0x2e0>)
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	b211      	sxth	r1, r2
 8000fb2:	4a67      	ldr	r2, [pc, #412]	@ (8001150 <main+0x2e4>)
 8000fb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adsVoltageValues[i] = adsRawValues[i] * ADS_CONVERSION_FACTOR;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4a65      	ldr	r2, [pc, #404]	@ (8001150 <main+0x2e4>)
 8000fbc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f97d 	bl	80002c0 <__aeabi_i2f>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	79fc      	ldrb	r4, [r7, #7]
 8000fca:	f04f 5179 	mov.w	r1, #1044381696	@ 0x3e400000
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f9ca 	bl	8000368 <__aeabi_fmul>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001154 <main+0x2e8>)
 8000fda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		if (adsVoltageValues[i] < 560.0f) {
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4a5c      	ldr	r2, [pc, #368]	@ (8001154 <main+0x2e8>)
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	495c      	ldr	r1, [pc, #368]	@ (8001158 <main+0x2ec>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb5b 	bl	80006a4 <__aeabi_fcmplt>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <main+0x194>
			adsVoltageValues[i] = 560.0f;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a57      	ldr	r2, [pc, #348]	@ (8001154 <main+0x2e8>)
 8000ff8:	4957      	ldr	r1, [pc, #348]	@ (8001158 <main+0x2ec>)
 8000ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ffe:	e00f      	b.n	8001020 <main+0x1b4>
		} else if (adsVoltageValues[i] > 2800.0f) {
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a54      	ldr	r2, [pc, #336]	@ (8001154 <main+0x2e8>)
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	4954      	ldr	r1, [pc, #336]	@ (800115c <main+0x2f0>)
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fb68 	bl	80006e0 <__aeabi_fcmpgt>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <main+0x1b4>
	  	  	  adsVoltageValues[i] = 2800.0f;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a4e      	ldr	r2, [pc, #312]	@ (8001154 <main+0x2e8>)
 800101a:	4950      	ldr	r1, [pc, #320]	@ (800115c <main+0x2f0>)
 800101c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  	  	}



		//Prepare for next conversion
		adsNextIndex = (i+1)%4;
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	3301      	adds	r3, #1
 8001024:	425a      	negs	r2, r3
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	bf58      	it	pl
 8001030:	4253      	negpl	r3, r2
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b4a      	ldr	r3, [pc, #296]	@ (8001160 <main+0x2f4>)
 8001036:	701a      	strb	r2, [r3, #0]
		adsConfigBuffer[1] = adsMuxConfiguration[adsNextIndex];
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <main+0x2f4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b40      	ldr	r3, [pc, #256]	@ (8001140 <main+0x2d4>)
 8001040:	5c9a      	ldrb	r2, [r3, r2]
 8001042:	4b3e      	ldr	r3, [pc, #248]	@ (800113c <main+0x2d0>)
 8001044:	705a      	strb	r2, [r3, #1]

		//Send to ADC the configuration for next channel read
		if (HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsConfigBuffer, 3, 10) != HAL_OK){
 8001046:	230a      	movs	r3, #10
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2303      	movs	r3, #3
 800104c:	4a3b      	ldr	r2, [pc, #236]	@ (800113c <main+0x2d0>)
 800104e:	2192      	movs	r1, #146	@ 0x92
 8001050:	483c      	ldr	r0, [pc, #240]	@ (8001144 <main+0x2d8>)
 8001052:	f002 fda5 	bl	8003ba0 <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <main+0x1f6>
			error_I2C_test = 1;
 800105c:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <main+0x2dc>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
			//Error_Handler();
		}

		//Wait for conversion 860sps -> around 1ms minimum wait
		HAL_Delay(2);
 8001062:	2002      	movs	r0, #2
 8001064:	f001 f8ee 	bl	8002244 <HAL_Delay>
	  for (uint8_t i = 0; i < 4; i++){
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3301      	adds	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d982      	bls.n	8000f7a <main+0x10e>
	}

	adsVread2_Left = adsVoltageValues[2]/1000;
 8001074:	4b37      	ldr	r3, [pc, #220]	@ (8001154 <main+0x2e8>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	493a      	ldr	r1, [pc, #232]	@ (8001164 <main+0x2f8>)
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa28 	bl	80004d0 <__aeabi_fdiv>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b38      	ldr	r3, [pc, #224]	@ (8001168 <main+0x2fc>)
 8001086:	601a      	str	r2, [r3, #0]
	adsVread3_Right = adsVoltageValues[3]/1000;
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <main+0x2e8>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4935      	ldr	r1, [pc, #212]	@ (8001164 <main+0x2f8>)
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa1e 	bl	80004d0 <__aeabi_fdiv>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b34      	ldr	r3, [pc, #208]	@ (800116c <main+0x300>)
 800109a:	601a      	str	r2, [r3, #0]

	//Place values in the circular buffer
	adsIndex = adsCounter % DMA_CIRC_BUFF_LEN;
 800109c:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <main+0x304>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <main+0x308>)
 80010a2:	fba3 2301 	umull	r2, r3, r3, r1
 80010a6:	089a      	lsrs	r2, r3, #2
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	1aca      	subs	r2, r1, r3
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <main+0x30c>)
 80010b4:	701a      	strb	r2, [r3, #0]
	adsCh0[adsIndex] = adsVoltageValues[0];
 80010b6:	4b30      	ldr	r3, [pc, #192]	@ (8001178 <main+0x30c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <main+0x2e8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a2e      	ldr	r2, [pc, #184]	@ (800117c <main+0x310>)
 80010c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCh1[adsIndex] = adsVoltageValues[1];
 80010c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <main+0x30c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <main+0x2e8>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001180 <main+0x314>)
 80010d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCh2[adsIndex] = adsVoltageValues[2];
 80010d6:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <main+0x30c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <main+0x2e8>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a28      	ldr	r2, [pc, #160]	@ (8001184 <main+0x318>)
 80010e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCh3[adsIndex] = adsVoltageValues[3];
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <main+0x30c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <main+0x2e8>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a25      	ldr	r2, [pc, #148]	@ (8001188 <main+0x31c>)
 80010f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	adsCounter++;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <main+0x304>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <main+0x304>)
 80010fe:	6013      	str	r3, [r2, #0]

	/////////////////////// NEW ADC



	getADCChannelVoltage(&hi2c1, &htim1, 1, 1, &oversamplingVoltages, &tim_elapsed_flag);
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <main+0x320>)
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <main+0x324>)
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	2201      	movs	r2, #1
 800110c:	4921      	ldr	r1, [pc, #132]	@ (8001194 <main+0x328>)
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <main+0x2d8>)
 8001110:	f7ff fc9e 	bl	8000a50 <getADCChannelVoltage>
	  for (uint8_t i = 0; i < 4; i++){
 8001114:	e72e      	b.n	8000f74 <main+0x108>
 8001116:	bf00      	nop
 8001118:	20000088 	.word	0x20000088
 800111c:	20000260 	.word	0x20000260
 8001120:	20000328 	.word	0x20000328
 8001124:	200002f4 	.word	0x200002f4
 8001128:	2000030c 	.word	0x2000030c
 800112c:	200000fc 	.word	0x200000fc
 8001130:	20000178 	.word	0x20000178
 8001134:	200001c0 	.word	0x200001c0
 8001138:	20000208 	.word	0x20000208
 800113c:	20000360 	.word	0x20000360
 8001140:	20000004 	.word	0x20000004
 8001144:	20000124 	.word	0x20000124
 8001148:	20000259 	.word	0x20000259
 800114c:	2000036c 	.word	0x2000036c
 8001150:	20000364 	.word	0x20000364
 8001154:	20000370 	.word	0x20000370
 8001158:	440c0000 	.word	0x440c0000
 800115c:	452f0000 	.word	0x452f0000
 8001160:	20000388 	.word	0x20000388
 8001164:	447a0000 	.word	0x447a0000
 8001168:	20000384 	.word	0x20000384
 800116c:	20000380 	.word	0x20000380
 8001170:	200003f0 	.word	0x200003f0
 8001174:	cccccccd 	.word	0xcccccccd
 8001178:	200003ec 	.word	0x200003ec
 800117c:	2000038c 	.word	0x2000038c
 8001180:	200003a0 	.word	0x200003a0
 8001184:	200003b4 	.word	0x200003b4
 8001188:	200003c8 	.word	0x200003c8
 800118c:	20000450 	.word	0x20000450
 8001190:	2000044c 	.word	0x2000044c
 8001194:	20000404 	.word	0x20000404

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a2:	2228      	movs	r2, #40	@ 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 f8b6 	bl	8006318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80011d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	2302      	movs	r3, #2
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 ff21 	bl	8005038 <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80011fc:	f000 fd72 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2102      	movs	r1, #2
 800121c:	4618      	mov	r0, r3
 800121e:	f004 f98d 	bl	800553c <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001228:	f000 fd5c 	bl	8001ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122c:	2302      	movs	r3, #2
 800122e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001234:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fb0f 	bl	800585c <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001244:	f000 fd4e 	bl	8001ce4 <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	3750      	adds	r7, #80	@ 0x50
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001260:	4b36      	ldr	r3, [pc, #216]	@ (800133c <MX_ADC1_Init+0xec>)
 8001262:	4a37      	ldr	r2, [pc, #220]	@ (8001340 <MX_ADC1_Init+0xf0>)
 8001264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001266:	4b35      	ldr	r3, [pc, #212]	@ (800133c <MX_ADC1_Init+0xec>)
 8001268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <MX_ADC1_Init+0xec>)
 8001270:	2201      	movs	r2, #1
 8001272:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001274:	4b31      	ldr	r3, [pc, #196]	@ (800133c <MX_ADC1_Init+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <MX_ADC1_Init+0xec>)
 800127c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001282:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <MX_ADC1_Init+0xec>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001288:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <MX_ADC1_Init+0xec>)
 800128a:	2205      	movs	r2, #5
 800128c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128e:	482b      	ldr	r0, [pc, #172]	@ (800133c <MX_ADC1_Init+0xec>)
 8001290:	f000 fffc 	bl	800228c <HAL_ADC_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800129a:	f000 fd23 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012a6:	2307      	movs	r3, #7
 80012a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4823      	ldr	r0, [pc, #140]	@ (800133c <MX_ADC1_Init+0xec>)
 80012b0:	f001 f9b4 	bl	800261c <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 fd13 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012be:	2301      	movs	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	481c      	ldr	r0, [pc, #112]	@ (800133c <MX_ADC1_Init+0xec>)
 80012cc:	f001 f9a6 	bl	800261c <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012d6:	f000 fd05 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012da:	2302      	movs	r3, #2
 80012dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012de:	2303      	movs	r3, #3
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4815      	ldr	r0, [pc, #84]	@ (800133c <MX_ADC1_Init+0xec>)
 80012e8:	f001 f998 	bl	800261c <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012f2:	f000 fcf7 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012f6:	2310      	movs	r3, #16
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012fa:	2304      	movs	r3, #4
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80012fe:	2305      	movs	r3, #5
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_ADC1_Init+0xec>)
 8001308:	f001 f988 	bl	800261c <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001312:	f000 fce7 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001316:	2311      	movs	r3, #17
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800131a:	2305      	movs	r3, #5
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <MX_ADC1_Init+0xec>)
 8001324:	f001 f97a 	bl	800261c <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800132e:	f000 fcd9 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000088 	.word	0x20000088
 8001340:	40012400 	.word	0x40012400

08001344 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_CAN_Init+0x64>)
 800134a:	4a18      	ldr	r2, [pc, #96]	@ (80013ac <MX_CAN_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001350:	2202      	movs	r2, #2
 8001352:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_CAN_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001362:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001366:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_CAN_Init+0x64>)
 800136a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800136e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <MX_CAN_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <MX_CAN_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_CAN_Init+0x64>)
 8001396:	f001 fbe9 	bl	8002b6c <HAL_CAN_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 fca0 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200000fc 	.word	0x200000fc
 80013ac:	40006400 	.word	0x40006400

080013b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013b6:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <MX_I2C1_Init+0x54>)
 80013b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013bc:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_I2C1_Init+0x58>)
 80013be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_I2C1_Init+0x50>)
 80013ee:	f002 fa93 	bl	8003918 <HAL_I2C_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013f8:	f000 fc74 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000124 	.word	0x20000124
 8001404:	40005400 	.word	0x40005400
 8001408:	000186a0 	.word	0x000186a0

0800140c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM2_Init+0x98>)
 800142a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM2_Init+0x98>)
 8001432:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM2_Init+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM2_Init+0x98>)
 8001440:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_TIM2_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_TIM2_Init+0x98>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001452:	4814      	ldr	r0, [pc, #80]	@ (80014a4 <MX_TIM2_Init+0x98>)
 8001454:	f004 fb6e 	bl	8005b34 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800145e:	f000 fc41 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM2_Init+0x98>)
 8001470:	f004 fcf2 	bl	8005e58 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800147a:	f000 fc33 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM2_Init+0x98>)
 800148c:	f004 fed4 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001496:	f000 fc25 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000178 	.word	0x20000178

080014a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_TIM3_Init+0x94>)
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <MX_TIM3_Init+0x98>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <MX_TIM3_Init+0x94>)
 80014cc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_TIM3_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80014d8:	4b18      	ldr	r3, [pc, #96]	@ (800153c <MX_TIM3_Init+0x94>)
 80014da:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_TIM3_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <MX_TIM3_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ec:	4813      	ldr	r0, [pc, #76]	@ (800153c <MX_TIM3_Init+0x94>)
 80014ee:	f004 fb21 	bl	8005b34 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014f8:	f000 fbf4 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <MX_TIM3_Init+0x94>)
 800150a:	f004 fca5 	bl	8005e58 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001514:	f000 fbe6 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_TIM3_Init+0x94>)
 8001526:	f004 fe87 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 fbd8 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001c0 	.word	0x200001c0
 8001540:	40000400 	.word	0x40000400

08001544 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_TIM4_Init+0x94>)
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <MX_TIM4_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8001566:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <MX_TIM4_Init+0x94>)
 8001568:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800156c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_TIM4_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_TIM4_Init+0x94>)
 8001576:	22c7      	movs	r2, #199	@ 0xc7
 8001578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_TIM4_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_TIM4_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001586:	4814      	ldr	r0, [pc, #80]	@ (80015d8 <MX_TIM4_Init+0x94>)
 8001588:	f004 fad4 	bl	8005b34 <HAL_TIM_Base_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001592:	f000 fba7 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	4619      	mov	r1, r3
 80015a2:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <MX_TIM4_Init+0x94>)
 80015a4:	f004 fc58 	bl	8005e58 <HAL_TIM_ConfigClockSource>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 fb99 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_TIM4_Init+0x94>)
 80015c0:	f004 fe3a 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80015ca:	f000 fb8b 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000208 	.word	0x20000208
 80015dc:	40000800 	.word	0x40000800

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_DMA_Init+0x38>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <MX_DMA_Init+0x38>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_DMA_Init+0x38>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2106      	movs	r1, #6
 8001602:	200b      	movs	r0, #11
 8001604:	f001 fd97 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001608:	200b      	movs	r0, #11
 800160a:	f001 fdb0 	bl	800316e <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <MX_GPIO_Init+0x90>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <MX_GPIO_Init+0x90>)
 8001636:	f043 0320 	orr.w	r3, r3, #32
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MX_GPIO_Init+0x90>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <MX_GPIO_Init+0x90>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <MX_GPIO_Init+0x90>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <MX_GPIO_Init+0x90>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <MX_GPIO_Init+0x90>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a11      	ldr	r2, [pc, #68]	@ (80016ac <MX_GPIO_Init+0x90>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_GPIO_Init+0x90>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800167e:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <MX_GPIO_Init+0x94>)
 8001680:	f002 f919 	bl	80038b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|LED_B_Pin;
 8001684:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2302      	movs	r3, #2
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_GPIO_Init+0x94>)
 800169e:	f001 ff6f 	bl	8003580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a2:	bf00      	nop
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010c00 	.word	0x40010c00

080016b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//DMA interrupt handler -> Each time DMA completes all conversions save them in a custom circular buffer
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if ((dmaCounter > DMA_EXCLUDED_CYCLES) || (dmaExcludedCyclesState == DMA_EXCLUDED_CYCLES_YES)){
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_ADC_ConvCpltCallback+0xa8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d803      	bhi.n	80016cc <HAL_ADC_ConvCpltCallback+0x18>
 80016c4:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <HAL_ADC_ConvCpltCallback+0xac>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d13c      	bne.n	8001746 <HAL_ADC_ConvCpltCallback+0x92>
		dmaIndex = dmaCounter % DMA_CIRC_BUFF_LEN;
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <HAL_ADC_ConvCpltCallback+0xa8>)
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_ADC_ConvCpltCallback+0xb0>)
 80016d2:	fba3 2301 	umull	r2, r3, r3, r1
 80016d6:	089a      	lsrs	r2, r3, #2
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	1aca      	subs	r2, r1, r3
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <HAL_ADC_ConvCpltCallback+0xb4>)
 80016e4:	701a      	strb	r2, [r3, #0]
		dmaExcludedCyclesState = DMA_EXCLUDED_CYCLES_YES;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <HAL_ADC_ConvCpltCallback+0xac>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
		pcbTempRaw[dmaIndex] = dmaRawADC[0];
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <HAL_ADC_ConvCpltCallback+0xb8>)
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_ADC_ConvCpltCallback+0xb4>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	b289      	uxth	r1, r1
 80016f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_ADC_ConvCpltCallback+0xbc>)
 80016fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		pt1Raw[dmaIndex] = dmaRawADC[1];
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	b289      	uxth	r1, r1
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <HAL_ADC_ConvCpltCallback+0xc0>)
 800170c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		pt2Raw[dmaIndex] = dmaRawADC[2];
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001712:	6899      	ldr	r1, [r3, #8]
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	b289      	uxth	r1, r1
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_ADC_ConvCpltCallback+0xc4>)
 800171e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		microTempRaw[dmaIndex] = dmaRawADC[3];
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001724:	68d9      	ldr	r1, [r3, #12]
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	b289      	uxth	r1, r1
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_ADC_ConvCpltCallback+0xc8>)
 8001730:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		vRefRaw[dmaIndex] = dmaRawADC[4];
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <HAL_ADC_ConvCpltCallback+0xb8>)
 8001736:	6919      	ldr	r1, [r3, #16]
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_ADC_ConvCpltCallback+0xb4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	b289      	uxth	r1, r1
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001742:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	}
	dmaCounter++;
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_ADC_ConvCpltCallback+0xa8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a03      	ldr	r2, [pc, #12]	@ (800175c <HAL_ADC_ConvCpltCallback+0xa8>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000025c 	.word	0x2000025c
 8001760:	20000000 	.word	0x20000000
 8001764:	cccccccd 	.word	0xcccccccd
 8001768:	2000025a 	.word	0x2000025a
 800176c:	20000260 	.word	0x20000260
 8001770:	2000028c 	.word	0x2000028c
 8001774:	20000298 	.word	0x20000298
 8001778:	200002a4 	.word	0x200002a4
 800177c:	20000280 	.word	0x20000280
 8001780:	20000274 	.word	0x20000274

08001784 <HAL_TIM_PeriodElapsedCallback>:

//TIM elapsed callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af02      	add	r7, sp, #8
 800178a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001794:	d105      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		//Tim2 @ 1Hz to blink green led for i'm alive state
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800179a:	4887      	ldr	r0, [pc, #540]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800179c:	f002 f8a3 	bl	80038e6 <HAL_GPIO_TogglePin>
		pDataHighFreq[6] = (uint8_t) (((uint16_t) tempBrakeSensor2) >> 8); //loHigh
		pDataHighFreq[7] = (uint8_t) tempBrakeSensor2;
		//Send data
		HAL_CAN_AddTxMessage(&hcan, &pHeaderHighFreq, pDataHighFreq, &pTxMailbox);
	}
}
 80017a0:	e24c      	b.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x4b8>
	} else if (htim->Instance == TIM3){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a85      	ldr	r2, [pc, #532]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f040 80fc 	bne.w	80019a6 <HAL_TIM_PeriodElapsedCallback+0x222>
		if(dmaCounter > (DMA_EXCLUDED_CYCLES + DMA_CIRC_BUFF_LEN)){
 80017ae:	4b84      	ldr	r3, [pc, #528]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	f240 8242 	bls.w	8001c3c <HAL_TIM_PeriodElapsedCallback+0x4b8>
			memcpy(pcbTempBuff, pcbTempRaw, sizeof(pcbTempRaw));
 80017b8:	4b82      	ldr	r3, [pc, #520]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017ba:	4a83      	ldr	r2, [pc, #524]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80017bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017be:	c303      	stmia	r3!, {r0, r1}
 80017c0:	801a      	strh	r2, [r3, #0]
			memcpy(vRefBuff, vRefRaw, sizeof(vRefRaw));
 80017c2:	4b82      	ldr	r3, [pc, #520]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x248>)
 80017c4:	4a82      	ldr	r2, [pc, #520]	@ (80019d0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c8:	c303      	stmia	r3!, {r0, r1}
 80017ca:	801a      	strh	r2, [r3, #0]
			memcpy(microTempBuff, microTempRaw, sizeof(microTempRaw));
 80017cc:	4b81      	ldr	r3, [pc, #516]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017ce:	4a82      	ldr	r2, [pc, #520]	@ (80019d8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80017d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d2:	c303      	stmia	r3!, {r0, r1}
 80017d4:	801a      	strh	r2, [r3, #0]
			memcpy(pt1Buff, pt1Raw, sizeof(pt1Raw));
 80017d6:	4b81      	ldr	r3, [pc, #516]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0x258>)
 80017d8:	4a81      	ldr	r2, [pc, #516]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80017da:	ca07      	ldmia	r2, {r0, r1, r2}
 80017dc:	c303      	stmia	r3!, {r0, r1}
 80017de:	801a      	strh	r2, [r3, #0]
			memcpy(pt2Buff, pt2Raw, sizeof(pt2Raw));
 80017e0:	4b80      	ldr	r3, [pc, #512]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80017e2:	4a81      	ldr	r2, [pc, #516]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80017e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017e6:	c303      	stmia	r3!, {r0, r1}
 80017e8:	801a      	strh	r2, [r3, #0]
			float tmp, fullScale=0;
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
			for (uint8_t i=0; i < DMA_CIRC_BUFF_LEN; i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	75bb      	strb	r3, [r7, #22]
 80017f4:	e06f      	b.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x152>
				paperino = i;
 80017f6:	4a7d      	ldr	r2, [pc, #500]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x268>)
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	7013      	strb	r3, [r2, #0]
				pluto = 0;
 80017fc:	4b7c      	ldr	r3, [pc, #496]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
				fullScale = getMaxVoltageF103(vRefBuff[i]);
 8001804:	7dbb      	ldrb	r3, [r7, #22]
 8001806:	4a71      	ldr	r2, [pc, #452]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fa9f 	bl	8001d50 <getMaxVoltageF103>
 8001812:	6138      	str	r0, [r7, #16]
				pluto = (((float) pcbTempBuff[i]) / 4095.0f * fullScale);
 8001814:	7dbb      	ldrb	r3, [r7, #22]
 8001816:	4a6b      	ldr	r2, [pc, #428]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fd4b 	bl	80002b8 <__aeabi_ui2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4973      	ldr	r1, [pc, #460]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe52 	bl	80004d0 <__aeabi_fdiv>
 800182c:	4603      	mov	r3, r0
 800182e:	6939      	ldr	r1, [r7, #16]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fd99 	bl	8000368 <__aeabi_fmul>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b6d      	ldr	r3, [pc, #436]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800183c:	601a      	str	r2, [r3, #0]
				LMT84_getTemperature(LMT84_SQRT_MODE, ((float) pcbTempBuff[i] / 4095.0f * fullScale), &tmp);
 800183e:	7dbb      	ldrb	r3, [r7, #22]
 8001840:	4a60      	ldr	r2, [pc, #384]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fd36 	bl	80002b8 <__aeabi_ui2f>
 800184c:	4603      	mov	r3, r0
 800184e:	4969      	ldr	r1, [pc, #420]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe3d 	bl	80004d0 <__aeabi_fdiv>
 8001856:	4603      	mov	r3, r0
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fd84 	bl	8000368 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	461a      	mov	r2, r3
 800186a:	2001      	movs	r0, #1
 800186c:	f7ff f9a8 	bl	8000bc0 <LMT84_getTemperature>
				pcbTemp+=tmp;
 8001870:	4b61      	ldr	r3, [pc, #388]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fc6d 	bl	8000158 <__addsf3>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001884:	601a      	str	r2, [r3, #0]
				microTemp += getInternalTemperatureF103(((float) microTempBuff[i]) / 4095.0f * fullScale);
 8001886:	7dbb      	ldrb	r3, [r7, #22]
 8001888:	4a52      	ldr	r2, [pc, #328]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800188a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fd12 	bl	80002b8 <__aeabi_ui2f>
 8001894:	4603      	mov	r3, r0
 8001896:	4957      	ldr	r1, [pc, #348]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe19 	bl	80004d0 <__aeabi_fdiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fd60 	bl	8000368 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fa2c 	bl	8001d08 <getInternalTemperatureF103>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b52      	ldr	r3, [pc, #328]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f7fe fc4d 	bl	8000158 <__addsf3>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b4e      	ldr	r3, [pc, #312]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018c4:	601a      	str	r2, [r3, #0]
				pippo++;
 80018c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018ce:	6013      	str	r3, [r2, #0]
			for (uint8_t i=0; i < DMA_CIRC_BUFF_LEN; i++){
 80018d0:	7dbb      	ldrb	r3, [r7, #22]
 80018d2:	3301      	adds	r3, #1
 80018d4:	75bb      	strb	r3, [r7, #22]
 80018d6:	7dbb      	ldrb	r3, [r7, #22]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d98c      	bls.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x72>
			pcbTemp /= DMA_CIRC_BUFF_LEN;
 80018dc:	4b46      	ldr	r3, [pc, #280]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4948      	ldr	r1, [pc, #288]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fdf4 	bl	80004d0 <__aeabi_fdiv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b42      	ldr	r3, [pc, #264]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80018ee:	601a      	str	r2, [r3, #0]
			microTemp /= DMA_CIRC_BUFF_LEN;
 80018f0:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4943      	ldr	r1, [pc, #268]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fdea 	bl	80004d0 <__aeabi_fdiv>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001902:	601a      	str	r2, [r3, #0]
			pDataLowFreq[0] = (uint8_t) (((uint16_t) (pcbTemp * CAN_PCB_TEMP_SCALE)) >> 8);
 8001904:	4b3c      	ldr	r3, [pc, #240]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	493f      	ldr	r1, [pc, #252]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd2c 	bl	8000368 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe ff04 	bl	8000720 <__aeabi_f2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	b29b      	uxth	r3, r3
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001924:	701a      	strb	r2, [r3, #0]
			pDataLowFreq[1] = (uint8_t) (pcbTemp * CAN_PCB_TEMP_SCALE);
 8001926:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4937      	ldr	r1, [pc, #220]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd1b 	bl	8000368 <__aeabi_fmul>
 8001932:	4603      	mov	r3, r0
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fef3 	bl	8000720 <__aeabi_f2uiz>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001940:	705a      	strb	r2, [r3, #1]
			pDataLowFreq[2] = (uint8_t) (((uint16_t) (microTemp * CAN_MICRO_TEMP_SCALE)) >> 8);
 8001942:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4930      	ldr	r1, [pc, #192]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd0d 	bl	8000368 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fee5 	bl	8000720 <__aeabi_f2uiz>
 8001956:	4603      	mov	r3, r0
 8001958:	b29b      	uxth	r3, r3
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001962:	709a      	strb	r2, [r3, #2]
			pDataLowFreq[3] = (uint8_t) (microTemp * CAN_MICRO_TEMP_SCALE);
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4927      	ldr	r1, [pc, #156]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fcfc 	bl	8000368 <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fed4 	bl	8000720 <__aeabi_f2uiz>
 8001978:	4603      	mov	r3, r0
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 800197e:	70da      	strb	r2, [r3, #3]
				pDataLowFreq[4] = 0x00;
 8001980:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001982:	2200      	movs	r2, #0
 8001984:	711a      	strb	r2, [r3, #4]
				pDataLowFreq[5] = 0x00;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001988:	2200      	movs	r2, #0
 800198a:	715a      	strb	r2, [r3, #5]
				pDataLowFreq[6] = 0x00;
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 800198e:	2200      	movs	r2, #0
 8001990:	719a      	strb	r2, [r3, #6]
				pDataLowFreq[7] = 0x00;
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001994:	2200      	movs	r2, #0
 8001996:	71da      	strb	r2, [r3, #7]
			HAL_CAN_AddTxMessage(&hcan, &pHeaderLowFreq, pDataLowFreq, &pTxMailbox);
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 800199c:	491d      	ldr	r1, [pc, #116]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800199e:	481e      	ldr	r0, [pc, #120]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80019a0:	f001 fa23 	bl	8002dea <HAL_CAN_AddTxMessage>
}
 80019a4:	e14a      	b.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x4b8>
	} else if (htim->Instance == TIM4){
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	f040 8145 	bne.w	8001c3c <HAL_TIM_PeriodElapsedCallback+0x4b8>
		for (uint8_t i = 0; i < DMA_CIRC_BUFF_LEN; i++){
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
 80019b6:	e06e      	b.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x312>
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	2000025c 	.word	0x2000025c
 80019c4:	200002b8 	.word	0x200002b8
 80019c8:	2000028c 	.word	0x2000028c
 80019cc:	200002d0 	.word	0x200002d0
 80019d0:	20000274 	.word	0x20000274
 80019d4:	200002c4 	.word	0x200002c4
 80019d8:	20000280 	.word	0x20000280
 80019dc:	200002dc 	.word	0x200002dc
 80019e0:	20000298 	.word	0x20000298
 80019e4:	200002e8 	.word	0x200002e8
 80019e8:	200002a4 	.word	0x200002a4
 80019ec:	20000258 	.word	0x20000258
 80019f0:	20000254 	.word	0x20000254
 80019f4:	457ff000 	.word	0x457ff000
 80019f8:	200002b4 	.word	0x200002b4
 80019fc:	200002b0 	.word	0x200002b0
 8001a00:	20000250 	.word	0x20000250
 8001a04:	40a00000 	.word	0x40a00000
 8001a08:	42c80000 	.word	0x42c80000
 8001a0c:	20000350 	.word	0x20000350
 8001a10:	20000324 	.word	0x20000324
 8001a14:	2000030c 	.word	0x2000030c
 8001a18:	200000fc 	.word	0x200000fc
 8001a1c:	40000800 	.word	0x40000800
			adsAverageCh[0] += adsCh0[i];
 8001a20:	4b88      	ldr	r3, [pc, #544]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	4988      	ldr	r1, [pc, #544]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001a28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f7fe fb92 	bl	8000158 <__addsf3>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b82      	ldr	r3, [pc, #520]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a3a:	601a      	str	r2, [r3, #0]
			adsAverageCh[1] += adsCh1[i];
 8001a3c:	4b81      	ldr	r3, [pc, #516]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	4982      	ldr	r1, [pc, #520]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001a44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f7fe fb84 	bl	8000158 <__addsf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b7b      	ldr	r3, [pc, #492]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a56:	605a      	str	r2, [r3, #4]
			adsAverageCh[2] += adsCh2[i];
 8001a58:	4b7a      	ldr	r3, [pc, #488]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	497c      	ldr	r1, [pc, #496]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001a60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7fe fb76 	bl	8000158 <__addsf3>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b74      	ldr	r3, [pc, #464]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a72:	609a      	str	r2, [r3, #8]
			adsAverageCh[3] += adsCh3[i];
 8001a74:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	4976      	ldr	r1, [pc, #472]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001a7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f7fe fb68 	bl	8000158 <__addsf3>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a8e:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < DMA_CIRC_BUFF_LEN; i++){
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	3301      	adds	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d9c1      	bls.n	8001a20 <HAL_TIM_PeriodElapsedCallback+0x29c>
		adsAverageCh[0] /= DMA_CIRC_BUFF_LEN;
 8001a9c:	4b69      	ldr	r3, [pc, #420]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	496d      	ldr	r1, [pc, #436]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd14 	bl	80004d0 <__aeabi_fdiv>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b65      	ldr	r3, [pc, #404]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001aae:	601a      	str	r2, [r3, #0]
		adsAverageCh[1] /= DMA_CIRC_BUFF_LEN;
 8001ab0:	4b64      	ldr	r3, [pc, #400]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4968      	ldr	r1, [pc, #416]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd0a 	bl	80004d0 <__aeabi_fdiv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b60      	ldr	r3, [pc, #384]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ac2:	605a      	str	r2, [r3, #4]
		adsAverageCh[2] /= DMA_CIRC_BUFF_LEN;
 8001ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4963      	ldr	r1, [pc, #396]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd00 	bl	80004d0 <__aeabi_fdiv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ad6:	609a      	str	r2, [r3, #8]
		adsAverageCh[3] /= DMA_CIRC_BUFF_LEN;
 8001ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	495e      	ldr	r1, [pc, #376]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fcf6 	bl	80004d0 <__aeabi_fdiv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b56      	ldr	r3, [pc, #344]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001aea:	60da      	str	r2, [r3, #12]
		heightSensor1 = ((adsVoltageValues[2]) * (104.0f/(2795.0f-560.0f))-10.0f);
 8001aec:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	495b      	ldr	r1, [pc, #364]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fc38 	bl	8000368 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	495a      	ldr	r1, [pc, #360]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fb29 	bl	8000154 <__aeabi_fsub>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001b08:	601a      	str	r2, [r3, #0]
		heightSensor2 = ((adsVoltageValues[3]) * (104.0f/(2795.0f-560.0f))-10.0f);
 8001b0a:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4954      	ldr	r1, [pc, #336]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fc29 	bl	8000368 <__aeabi_fmul>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4952      	ldr	r1, [pc, #328]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb1a 	bl	8000154 <__aeabi_fsub>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001b26:	601a      	str	r2, [r3, #0]
		tempBrakeSensor1 = map(adsVoltageValues[0], 0, 5, 0, 1000);
 8001b28:	4b4c      	ldr	r3, [pc, #304]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	4a48      	ldr	r2, [pc, #288]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	f000 f8a7 	bl	8001c8c <map>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a4c      	ldr	r2, [pc, #304]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001b42:	6013      	str	r3, [r2, #0]
		tempBrakeSensor2 = map(adsVoltageValues[1], 0, 5, 0, 1000);
 8001b44:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8001b46:	6858      	ldr	r0, [r3, #4]
 8001b48:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	4a41      	ldr	r2, [pc, #260]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	f000 f899 	bl	8001c8c <map>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a46      	ldr	r2, [pc, #280]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001b5e:	6013      	str	r3, [r2, #0]
		pDataHighFreq[0] = (uint8_t) (((uint16_t) (heightSensor1 * 10)) >> 8); //lohigh
 8001b60:	4b41      	ldr	r3, [pc, #260]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	493f      	ldr	r1, [pc, #252]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fbfe 	bl	8000368 <__aeabi_fmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fdd6 	bl	8000720 <__aeabi_f2uiz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001b80:	701a      	strb	r2, [r3, #0]
		pDataHighFreq[1] = (uint8_t) (heightSensor1 * 10);
 8001b82:	4b39      	ldr	r3, [pc, #228]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4937      	ldr	r1, [pc, #220]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fbed 	bl	8000368 <__aeabi_fmul>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fdc5 	bl	8000720 <__aeabi_f2uiz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001b9c:	705a      	strb	r2, [r3, #1]
		pDataHighFreq[2] = (uint8_t) (((uint16_t) (heightSensor2 * 10)) >> 8); //loHigh
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4930      	ldr	r1, [pc, #192]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fbdf 	bl	8000368 <__aeabi_fmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fdb7 	bl	8000720 <__aeabi_f2uiz>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bbe:	709a      	strb	r2, [r3, #2]
		pDataHighFreq[3] = (uint8_t) (heightSensor2 * 10);
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4927      	ldr	r1, [pc, #156]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fbce 	bl	8000368 <__aeabi_fmul>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fda6 	bl	8000720 <__aeabi_f2uiz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bda:	70da      	strb	r2, [r3, #3]
		pDataHighFreq[4] = (uint8_t) (((uint16_t) tempBrakeSensor1) >> 8); //loHigh
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fd9d 	bl	8000720 <__aeabi_f2uiz>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001bf2:	711a      	strb	r2, [r3, #4]
		pDataHighFreq[5] = (uint8_t) (tempBrakeSensor1);
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fd91 	bl	8000720 <__aeabi_f2uiz>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c04:	715a      	strb	r2, [r3, #5]
		pDataHighFreq[6] = (uint8_t) (((uint16_t) tempBrakeSensor2) >> 8); //loHigh
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fd88 	bl	8000720 <__aeabi_f2uiz>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c1c:	719a      	strb	r2, [r3, #6]
		pDataHighFreq[7] = (uint8_t) tempBrakeSensor2;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fd7c 	bl	8000720 <__aeabi_f2uiz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c2e:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &pHeaderHighFreq, pDataHighFreq, &pTxMailbox);
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001c34:	4913      	ldr	r1, [pc, #76]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001c36:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001c38:	f001 f8d7 	bl	8002dea <HAL_CAN_AddTxMessage>
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200003dc 	.word	0x200003dc
 8001c48:	2000038c 	.word	0x2000038c
 8001c4c:	200003a0 	.word	0x200003a0
 8001c50:	200003b4 	.word	0x200003b4
 8001c54:	200003c8 	.word	0x200003c8
 8001c58:	40a00000 	.word	0x40a00000
 8001c5c:	20000370 	.word	0x20000370
 8001c60:	3d3e98cc 	.word	0x3d3e98cc
 8001c64:	41200000 	.word	0x41200000
 8001c68:	200003f4 	.word	0x200003f4
 8001c6c:	200003f8 	.word	0x200003f8
 8001c70:	447a0000 	.word	0x447a0000
 8001c74:	200003fc 	.word	0x200003fc
 8001c78:	20000400 	.word	0x20000400
 8001c7c:	20000358 	.word	0x20000358
 8001c80:	20000324 	.word	0x20000324
 8001c84:	200002f4 	.word	0x200002f4
 8001c88:	200000fc 	.word	0x200000fc

08001c8c <map>:
 * out_min e out_max sono i valoi per cui verranno mappati in_min e in_max.
 * es= se in_min = 0 e in_max = 5; out_min = 100 e out_max = 200. allora
 * se x=0 verrà automaticamente mappato a 100
 */
float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
	return(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7fe fa59 	bl	8000154 <__aeabi_fsub>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	6a38      	ldr	r0, [r7, #32]
 8001caa:	f7fe fa53 	bl	8000154 <__aeabi_fsub>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7fe fb58 	bl	8000368 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461c      	mov	r4, r3
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fa48 	bl	8000154 <__aeabi_fsub>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7fe fc01 	bl	80004d0 <__aeabi_fdiv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fa40 	bl	8000158 <__addsf3>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd90      	pop	{r4, r7, pc}
	...

08001ce4 <Error_Handler>:




void Error_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <Error_Handler+0x20>)
 8001cf2:	f001 fdf8 	bl	80038e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001cf6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cfa:	f000 faa3 	bl	8002244 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001cfe:	bf00      	nop
 8001d00:	e7f4      	b.n	8001cec <Error_Handler+0x8>
 8001d02:	bf00      	nop
 8001d04:	40010c00 	.word	0x40010c00

08001d08 <getInternalTemperatureF103>:
 *      Author: lucad
 */

#include "stm32_adc_utils.h"

float getInternalTemperatureF103(float voltage){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	return ((F103_OFFSET - voltage)*1000/F103_SLOPE + 25);
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <getInternalTemperatureF103+0x38>)
 8001d14:	f7fe fa1e 	bl	8000154 <__aeabi_fsub>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	490a      	ldr	r1, [pc, #40]	@ (8001d44 <getInternalTemperatureF103+0x3c>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fb23 	bl	8000368 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4908      	ldr	r1, [pc, #32]	@ (8001d48 <getInternalTemperatureF103+0x40>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fbd2 	bl	80004d0 <__aeabi_fdiv>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <getInternalTemperatureF103+0x44>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa11 	bl	8000158 <__addsf3>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	3fb70a3d 	.word	0x3fb70a3d
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	4089999a 	.word	0x4089999a
 8001d4c:	41c80000 	.word	0x41c80000

08001d50 <getMaxVoltageF103>:

float getMaxVoltageF103(uint16_t adcRaw){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
	return 4095 * F103_VREF/adcRaw;
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe faaf 	bl	80002c0 <__aeabi_i2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4619      	mov	r1, r3
 8001d66:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <getMaxVoltageF103+0x28>)
 8001d68:	f7fe fbb2 	bl	80004d0 <__aeabi_fdiv>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	459c1f33 	.word	0x459c1f33

08001d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <HAL_MspInit+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <HAL_MspInit+0x5c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_MspInit+0x5c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_MspInit+0x5c>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd8 <HAL_MspInit+0x5c>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_MspInit+0x5c>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_MspInit+0x60>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <HAL_MspInit+0x60>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ea0 <HAL_ADC_MspInit+0xc0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d14a      	bne.n	8001e96 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <HAL_ADC_MspInit+0xc4>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <HAL_ADC_MspInit+0xc4>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <HAL_ADC_MspInit+0xc4>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <HAL_ADC_MspInit+0xc4>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a21      	ldr	r2, [pc, #132]	@ (8001ea4 <HAL_ADC_MspInit+0xc4>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_ADC_MspInit+0xc4>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|PT1_Pin|PT2_Pin;
 8001e30:	2307      	movs	r3, #7
 8001e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e34:	2303      	movs	r3, #3
 8001e36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481a      	ldr	r0, [pc, #104]	@ (8001ea8 <HAL_ADC_MspInit+0xc8>)
 8001e40:	f001 fb9e 	bl	8003580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e46:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <HAL_ADC_MspInit+0xd0>)
 8001e48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e50:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e58:	2280      	movs	r2, #128	@ 0x80
 8001e5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e6e:	2220      	movs	r2, #32
 8001e70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e74:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001e78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e7a:	480c      	ldr	r0, [pc, #48]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e7c:	f001 f992 	bl	80031a4 <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001e86:	f7ff ff2d 	bl	8001ce4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e8e:	621a      	str	r2, [r3, #32]
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <HAL_ADC_MspInit+0xcc>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40012400 	.word	0x40012400
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	200000b8 	.word	0x200000b8
 8001eb0:	40020008 	.word	0x40020008

08001eb4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <HAL_CAN_MspInit+0x8c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d131      	bne.n	8001f38 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_CAN_MspInit+0x90>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f44 <HAL_CAN_MspInit+0x90>)
 8001eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	61d3      	str	r3, [r2, #28]
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_CAN_MspInit+0x90>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_CAN_MspInit+0x90>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_CAN_MspInit+0x90>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_CAN_MspInit+0x90>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4619      	mov	r1, r3
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <HAL_CAN_MspInit+0x94>)
 8001f1a:	f001 fb31 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <HAL_CAN_MspInit+0x94>)
 8001f34:	f001 fb24 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40006400 	.word	0x40006400
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010800 	.word	0x40010800

08001f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a15      	ldr	r2, [pc, #84]	@ (8001fbc <HAL_I2C_MspInit+0x70>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d123      	bne.n	8001fb4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_I2C_MspInit+0x74>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <HAL_I2C_MspInit+0x74>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_I2C_MspInit+0x74>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f84:	23c0      	movs	r3, #192	@ 0xc0
 8001f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f88:	2312      	movs	r3, #18
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4619      	mov	r1, r3
 8001f96:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <HAL_I2C_MspInit+0x78>)
 8001f98:	f001 faf2 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_I2C_MspInit+0x74>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_I2C_MspInit+0x74>)
 8001fa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa6:	61d3      	str	r3, [r2, #28]
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_I2C_MspInit+0x74>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40005400 	.word	0x40005400
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd8:	d114      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a25      	ldr	r2, [pc, #148]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	201c      	movs	r0, #28
 8001ff8:	f001 f89d 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ffc:	201c      	movs	r0, #28
 8001ffe:	f001 f8b6 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002002:	e032      	b.n	800206a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_TIM_Base_MspInit+0xb0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d114      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2104      	movs	r1, #4
 800202a:	201d      	movs	r0, #29
 800202c:	f001 f883 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002030:	201d      	movs	r0, #29
 8002032:	f001 f89c 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 8002036:	e018      	b.n	800206a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0f      	ldr	r2, [pc, #60]	@ (800207c <HAL_TIM_Base_MspInit+0xb4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d113      	bne.n	800206a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_TIM_Base_MspInit+0xac>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2103      	movs	r1, #3
 800205e:	201e      	movs	r0, #30
 8002060:	f001 f869 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002064:	201e      	movs	r0, #30
 8002066:	f001 f882 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <NMI_Handler+0x4>

08002088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <MemManage_Handler+0x4>

08002098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d0:	f000 f89c 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <DMA1_Channel1_IRQHandler+0x10>)
 80020de:	f001 f91b 	bl	8003318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200000b8 	.word	0x200000b8

080020ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <TIM2_IRQHandler+0x10>)
 80020f2:	f003 fdc1 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000178 	.word	0x20000178

08002100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM3_IRQHandler+0x10>)
 8002106:	f003 fdb7 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200001c0 	.word	0x200001c0

08002114 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <TIM4_IRQHandler+0x10>)
 800211a:	f003 fdad 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000208 	.word	0x20000208

08002128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002134:	f7ff fff8 	bl	8002128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002138:	480b      	ldr	r0, [pc, #44]	@ (8002168 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800213a:	490c      	ldr	r1, [pc, #48]	@ (800216c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800213c:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <LoopFillZerobss+0x16>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002150:	4c09      	ldr	r4, [pc, #36]	@ (8002178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215e:	f004 f8e9 	bl	8006334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002162:	f7fe fe83 	bl	8000e6c <main>
  bx lr
 8002166:	4770      	bx	lr
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002170:	08006654 	.word	0x08006654
  ldr r2, =_sbss
 8002174:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002178:	20000590 	.word	0x20000590

0800217c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_2_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <HAL_Init+0x28>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <HAL_Init+0x28>)
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 ffc5 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	200f      	movs	r0, #15
 8002198:	f000 f808 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fdee 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <HAL_InitTick+0x54>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_InitTick+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 ffdd 	bl	800318a <HAL_SYSTICK_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00e      	b.n	80021f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d80a      	bhi.n	80021f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f000 ffa5 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4a06      	ldr	r2, [pc, #24]	@ (8002208 <HAL_InitTick+0x5c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000008 	.word	0x20000008
 8002204:	20000010 	.word	0x20000010
 8002208:	2000000c 	.word	0x2000000c

0800220c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x1c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_IncTick+0x20>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a03      	ldr	r2, [pc, #12]	@ (800222c <HAL_IncTick+0x20>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000010 	.word	0x20000010
 800222c:	20000454 	.word	0x20000454

08002230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b02      	ldr	r3, [pc, #8]	@ (8002240 <HAL_GetTick+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	20000454 	.word	0x20000454

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff fff0 	bl	8002230 <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffe0 	bl	8002230 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000010 	.word	0x20000010

0800228c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0be      	b.n	800242c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fd88 	bl	8001de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 faf5 	bl	80028c0 <ADC_ConversionStop_Disable>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8099 	bne.w	800241a <HAL_ADC_Init+0x18e>
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 8095 	bne.w	800241a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022f8:	f023 0302 	bic.w	r3, r3, #2
 80022fc:	f043 0202 	orr.w	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b1b      	ldrb	r3, [r3, #12]
 8002312:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002314:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002324:	d003      	beq.n	800232e <HAL_ADC_Init+0xa2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_ADC_Init+0xa8>
 800232e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002332:	e000      	b.n	8002336 <HAL_ADC_Init+0xaa>
 8002334:	2300      	movs	r3, #0
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7d1b      	ldrb	r3, [r3, #20]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d119      	bne.n	8002378 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7b1b      	ldrb	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	3b01      	subs	r3, #1
 8002352:	035a      	lsls	r2, r3, #13
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e00b      	b.n	8002378 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <HAL_ADC_Init+0x1a8>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a8:	d003      	beq.n	80023b2 <HAL_ADC_Init+0x126>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d104      	bne.n	80023bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <HAL_ADC_Init+0x1ac>)
 80023d8:	4013      	ands	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10b      	bne.n	80023f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f6:	e018      	b.n	800242a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fc:	f023 0312 	bic.w	r3, r3, #18
 8002400:	f043 0210 	orr.w	r2, r3, #16
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002418:	e007      	b.n	800242a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800242a:	7dfb      	ldrb	r3, [r7, #23]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	ffe1f7fd 	.word	0xffe1f7fd
 8002438:	ff1f0efe 	.word	0xff1f0efe

0800243c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a64      	ldr	r2, [pc, #400]	@ (80025e4 <HAL_ADC_Start_DMA+0x1a8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d004      	beq.n	8002460 <HAL_ADC_Start_DMA+0x24>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a63      	ldr	r2, [pc, #396]	@ (80025e8 <HAL_ADC_Start_DMA+0x1ac>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d106      	bne.n	800246e <HAL_ADC_Start_DMA+0x32>
 8002460:	4b60      	ldr	r3, [pc, #384]	@ (80025e4 <HAL_ADC_Start_DMA+0x1a8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 80b3 	bne.w	80025d4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_ADC_Start_DMA+0x40>
 8002478:	2302      	movs	r3, #2
 800247a:	e0ae      	b.n	80025da <HAL_ADC_Start_DMA+0x19e>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f9c1 	bl	800280c <ADC_Enable>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 809a 	bne.w	80025ca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a4e      	ldr	r2, [pc, #312]	@ (80025e8 <HAL_ADC_Start_DMA+0x1ac>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x84>
 80024b4:	4b4b      	ldr	r3, [pc, #300]	@ (80025e4 <HAL_ADC_Start_DMA+0x1a8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d115      	bne.n	80024ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d026      	beq.n	8002528 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ea:	e01d      	b.n	8002528 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a39      	ldr	r2, [pc, #228]	@ (80025e4 <HAL_ADC_Start_DMA+0x1a8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_Start_DMA+0xd0>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a38      	ldr	r2, [pc, #224]	@ (80025e8 <HAL_ADC_Start_DMA+0x1ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d10d      	bne.n	8002528 <HAL_ADC_Start_DMA+0xec>
 800250c:	4b35      	ldr	r3, [pc, #212]	@ (80025e4 <HAL_ADC_Start_DMA+0x1a8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002520:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	f023 0206 	bic.w	r2, r3, #6
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002540:	e002      	b.n	8002548 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <HAL_ADC_Start_DMA+0x1b0>)
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a24      	ldr	r2, [pc, #144]	@ (80025f0 <HAL_ADC_Start_DMA+0x1b4>)
 800255e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a23      	ldr	r2, [pc, #140]	@ (80025f4 <HAL_ADC_Start_DMA+0x1b8>)
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0202 	mvn.w	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002580:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a18      	ldr	r0, [r3, #32]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	334c      	adds	r3, #76	@ 0x4c
 800258c:	4619      	mov	r1, r3
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f000 fe61 	bl	8003258 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025a0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025a4:	d108      	bne.n	80025b8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025b4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025b6:	e00f      	b.n	80025d8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025c6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025c8:	e006      	b.n	80025d8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40012400 	.word	0x40012400
 80025e8:	40012800 	.word	0x40012800
 80025ec:	08002943 	.word	0x08002943
 80025f0:	080029bf 	.word	0x080029bf
 80025f4:	080029db 	.word	0x080029db

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x20>
 8002638:	2302      	movs	r3, #2
 800263a:	e0dc      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x1da>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b06      	cmp	r3, #6
 800264a:	d81c      	bhi.n	8002686 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b05      	subs	r3, #5
 800265e:	221f      	movs	r2, #31
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	4019      	ands	r1, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b05      	subs	r3, #5
 8002678:	fa00 f203 	lsl.w	r2, r0, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34
 8002684:	e03c      	b.n	8002700 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d81c      	bhi.n	80026c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b23      	subs	r3, #35	@ 0x23
 80026a0:	221f      	movs	r2, #31
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4019      	ands	r1, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b23      	subs	r3, #35	@ 0x23
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c6:	e01b      	b.n	8002700 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b41      	subs	r3, #65	@ 0x41
 80026da:	221f      	movs	r2, #31
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4019      	ands	r1, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	3b41      	subs	r3, #65	@ 0x41
 80026f4:	fa00 f203 	lsl.w	r2, r0, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d91c      	bls.n	8002742 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	3b1e      	subs	r3, #30
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	4019      	ands	r1, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6898      	ldr	r0, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	3b1e      	subs	r3, #30
 8002734:	fa00 f203 	lsl.w	r2, r0, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	e019      	b.n	8002776 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6919      	ldr	r1, [r3, #16]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	2207      	movs	r2, #7
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	4019      	ands	r1, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6898      	ldr	r0, [r3, #8]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b10      	cmp	r3, #16
 800277c:	d003      	beq.n	8002786 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002782:	2b11      	cmp	r3, #17
 8002784:	d132      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <HAL_ADC_ConfigChannel+0x1e4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d125      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d126      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	d11a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_ADC_ConfigChannel+0x1e8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <HAL_ADC_ConfigChannel+0x1ec>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9a      	lsrs	r2, r3, #18
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f9      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x1b2>
 80027da:	e007      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	f043 0220 	orr.w	r2, r3, #32
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40012400 	.word	0x40012400
 8002804:	20000008 	.word	0x20000008
 8002808:	431bde83 	.word	0x431bde83

0800280c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d040      	beq.n	80028ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800283a:	4b1f      	ldr	r3, [pc, #124]	@ (80028b8 <ADC_Enable+0xac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <ADC_Enable+0xb0>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	0c9b      	lsrs	r3, r3, #18
 8002846:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002848:	e002      	b.n	8002850 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3b01      	subs	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002856:	f7ff fceb 	bl	8002230 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800285c:	e01f      	b.n	800289e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800285e:	f7ff fce7 	bl	8002230 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d918      	bls.n	800289e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d011      	beq.n	800289e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e007      	b.n	80028ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d1d8      	bne.n	800285e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000008 	.word	0x20000008
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12e      	bne.n	8002938 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ea:	f7ff fca1 	bl	8002230 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028f0:	e01b      	b.n	800292a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028f2:	f7ff fc9d 	bl	8002230 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d914      	bls.n	800292a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10d      	bne.n	800292a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e007      	b.n	800293a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d0dc      	beq.n	80028f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002958:	2b00      	cmp	r3, #0
 800295a:	d127      	bne.n	80029ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002972:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002976:	d115      	bne.n	80029a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800297c:	2b00      	cmp	r3, #0
 800297e:	d111      	bne.n	80029a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7fe fe85 	bl	80016b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80029aa:	e004      	b.n	80029b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff fe13 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fe02 	bl	800260a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADCEx_Calibration_Start+0x1e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e097      	b.n	8002b5e <HAL_ADCEx_Calibration_Start+0x14e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff42 	bl	80028c0 <ADC_ConversionStop_Disable>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fee3 	bl	800280c <ADC_Enable>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8081 	bne.w	8002b54 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a5a:	f023 0302 	bic.w	r3, r3, #2
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a66:	4b40      	ldr	r3, [pc, #256]	@ (8002b68 <HAL_ADCEx_Calibration_Start+0x158>)
 8002a68:	681c      	ldr	r4, [r3, #0]
 8002a6a:	2002      	movs	r0, #2
 8002a6c:	f002 ffac 	bl	80059c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a70:	4603      	mov	r3, r0
 8002a72:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002a76:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002a78:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002a7a:	e002      	b.n	8002a82 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f9      	bne.n	8002a7c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a98:	f7ff fbca 	bl	8002230 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a9e:	e01b      	b.n	8002ad8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002aa0:	f7ff fbc6 	bl	8002230 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b0a      	cmp	r3, #10
 8002aac:	d914      	bls.n	8002ad8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	f023 0312 	bic.w	r3, r3, #18
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e042      	b.n	8002b5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1dc      	bne.n	8002aa0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0204 	orr.w	r2, r2, #4
 8002af4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002af6:	f7ff fb9b 	bl	8002230 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002afc:	e01b      	b.n	8002b36 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002afe:	f7ff fb97 	bl	8002230 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b0a      	cmp	r3, #10
 8002b0a:	d914      	bls.n	8002b36 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1e:	f023 0312 	bic.w	r3, r3, #18
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e013      	b.n	8002b5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1dc      	bne.n	8002afe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f023 0303 	bic.w	r3, r3, #3
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd90      	pop	{r4, r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000008 	.word	0x20000008

08002b6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0ed      	b.n	8002d5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff f992 	bl	8001eb4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba0:	f7ff fb46 	bl	8002230 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ba6:	e012      	b.n	8002bce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba8:	f7ff fb42 	bl	8002230 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	d90b      	bls.n	8002bce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2205      	movs	r2, #5
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0c5      	b.n	8002d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0e5      	beq.n	8002ba8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0202 	bic.w	r2, r2, #2
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f7ff fb20 	bl	8002230 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bf2:	e012      	b.n	8002c1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf4:	f7ff fb1c 	bl	8002230 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b0a      	cmp	r3, #10
 8002c00:	d90b      	bls.n	8002c1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2205      	movs	r2, #5
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e09f      	b.n	8002d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e5      	bne.n	8002bf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7e1b      	ldrb	r3, [r3, #24]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d108      	bne.n	8002c42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e007      	b.n	8002c52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7e5b      	ldrb	r3, [r3, #25]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7e9b      	ldrb	r3, [r3, #26]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d108      	bne.n	8002c96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e007      	b.n	8002ca6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0220 	bic.w	r2, r2, #32
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7edb      	ldrb	r3, [r3, #27]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d108      	bne.n	8002cc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0210 	bic.w	r2, r2, #16
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e007      	b.n	8002cd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0210 	orr.w	r2, r2, #16
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7f1b      	ldrb	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d108      	bne.n	8002cea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0208 	orr.w	r2, r2, #8
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e007      	b.n	8002cfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0208 	bic.w	r2, r2, #8
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7f5b      	ldrb	r3, [r3, #29]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0204 	orr.w	r2, r2, #4
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e007      	b.n	8002d24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	ea42 0103 	orr.w	r1, r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d12e      	bne.n	8002dd4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d8e:	f7ff fa4f 	bl	8002230 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d94:	e012      	b.n	8002dbc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d96:	f7ff fa4b 	bl	8002230 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b0a      	cmp	r3, #10
 8002da2:	d90b      	bls.n	8002dbc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e012      	b.n	8002de2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e5      	bne.n	8002d96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e006      	b.n	8002de2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b089      	sub	sp, #36	@ 0x24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <HAL_CAN_AddTxMessage+0x2c>
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f040 80ad 	bne.w	8002f70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8095 	beq.w	8002f60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	0e1b      	lsrs	r3, r3, #24
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e40:	2201      	movs	r2, #1
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	409a      	lsls	r2, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	6809      	ldr	r1, [r1, #0]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3318      	adds	r3, #24
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	440b      	add	r3, r1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e00f      	b.n	8002e8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e7e:	68f9      	ldr	r1, [r7, #12]
 8002e80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3318      	adds	r3, #24
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	440b      	add	r3, r1
 8002e8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3318      	adds	r3, #24
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	7d1b      	ldrb	r3, [r3, #20]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d111      	bne.n	8002ece <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	440b      	add	r3, r1
 8002eca:	3304      	adds	r3, #4
 8002ecc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3307      	adds	r3, #7
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	061a      	lsls	r2, r3, #24
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3306      	adds	r3, #6
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3305      	adds	r3, #5
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	3204      	adds	r2, #4
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6811      	ldr	r1, [r2, #0]
 8002ef6:	ea43 0200 	orr.w	r2, r3, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	440b      	add	r3, r1
 8002f00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002f04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3303      	adds	r3, #3
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	061a      	lsls	r2, r3, #24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3302      	adds	r3, #2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	4313      	orrs	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	4610      	mov	r0, r2
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6811      	ldr	r1, [r2, #0]
 8002f2c:	ea43 0200 	orr.w	r2, r3, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	440b      	add	r3, r1
 8002f36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3318      	adds	r3, #24
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4413      	add	r3, r2
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	6811      	ldr	r1, [r2, #0]
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3318      	adds	r3, #24
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	440b      	add	r3, r1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e00e      	b.n	8002f7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e006      	b.n	8002f7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4906      	ldr	r1, [pc, #24]	@ (8003020 <__NVIC_EnableIRQ+0x34>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	@ (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	@ (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff90 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	@ (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff2d 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff ff42 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff90 	bl	8003078 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5f 	bl	8003024 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff35 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa2 	bl	80030dc <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e043      	b.n	8003242 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	4b22      	ldr	r3, [pc, #136]	@ (800324c <HAL_DMA_Init+0xa8>)
 80031c2:	4413      	add	r3, r2
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_DMA_Init+0xac>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	009a      	lsls	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <HAL_DMA_Init+0xb0>)
 80031d6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80031ee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80031f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003208:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003214:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	bffdfff8 	.word	0xbffdfff8
 8003250:	cccccccd 	.word	0xcccccccd
 8003254:	40020000 	.word	0x40020000

08003258 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_DMA_Start_IT+0x20>
 8003274:	2302      	movs	r3, #2
 8003276:	e04b      	b.n	8003310 <HAL_DMA_Start_IT+0xb8>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d13a      	bne.n	8003302 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f937 	bl	8003524 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 020e 	orr.w	r2, r2, #14
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00f      	b.n	80032f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 020a 	orr.w	r2, r2, #10
 80032ee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e005      	b.n	800330e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d04f      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xc8>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d04a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	@ (8003508 <HAL_DMA_IRQHandler+0x1f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d029      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xae>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a65      	ldr	r2, [pc, #404]	@ (800350c <HAL_DMA_IRQHandler+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xaa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a63      	ldr	r2, [pc, #396]	@ (8003510 <HAL_DMA_IRQHandler+0x1f8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01a      	beq.n	80033bc <HAL_DMA_IRQHandler+0xa4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a62      	ldr	r2, [pc, #392]	@ (8003514 <HAL_DMA_IRQHandler+0x1fc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d012      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x9e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a60      	ldr	r2, [pc, #384]	@ (8003518 <HAL_DMA_IRQHandler+0x200>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x98>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_DMA_IRQHandler+0x204>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d102      	bne.n	80033aa <HAL_DMA_IRQHandler+0x92>
 80033a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033a8:	e00e      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033ae:	e00b      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033b4:	e008      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033ba:	e005      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033c0:	e002      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033c2:	2340      	movs	r3, #64	@ 0x40
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_IRQHandler+0xb0>
 80033c6:	2304      	movs	r3, #4
 80033c8:	4a55      	ldr	r2, [pc, #340]	@ (8003520 <HAL_DMA_IRQHandler+0x208>)
 80033ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8094 	beq.w	80034fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033de:	e08e      	b.n	80034fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2202      	movs	r2, #2
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d056      	beq.n	800349e <HAL_DMA_IRQHandler+0x186>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d051      	beq.n	800349e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020a 	bic.w	r2, r2, #10
 8003416:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a38      	ldr	r2, [pc, #224]	@ (8003508 <HAL_DMA_IRQHandler+0x1f0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d029      	beq.n	800347e <HAL_DMA_IRQHandler+0x166>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a37      	ldr	r2, [pc, #220]	@ (800350c <HAL_DMA_IRQHandler+0x1f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_IRQHandler+0x162>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a35      	ldr	r2, [pc, #212]	@ (8003510 <HAL_DMA_IRQHandler+0x1f8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01a      	beq.n	8003474 <HAL_DMA_IRQHandler+0x15c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a34      	ldr	r2, [pc, #208]	@ (8003514 <HAL_DMA_IRQHandler+0x1fc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d012      	beq.n	800346e <HAL_DMA_IRQHandler+0x156>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <HAL_DMA_IRQHandler+0x200>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x150>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a31      	ldr	r2, [pc, #196]	@ (800351c <HAL_DMA_IRQHandler+0x204>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d102      	bne.n	8003462 <HAL_DMA_IRQHandler+0x14a>
 800345c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003460:	e00e      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 8003462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003466:	e00b      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 8003468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800346c:	e008      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 800346e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003472:	e005      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 8003474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003478:	e002      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 800347a:	2320      	movs	r3, #32
 800347c:	e000      	b.n	8003480 <HAL_DMA_IRQHandler+0x168>
 800347e:	2302      	movs	r3, #2
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <HAL_DMA_IRQHandler+0x208>)
 8003482:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d034      	beq.n	80034fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800349c:	e02f      	b.n	80034fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	2208      	movs	r2, #8
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <HAL_DMA_IRQHandler+0x1e8>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020e 	bic.w	r2, r2, #14
 80034c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
    }
  }
  return;
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
}
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40020008 	.word	0x40020008
 800350c:	4002001c 	.word	0x4002001c
 8003510:	40020030 	.word	0x40020030
 8003514:	40020044 	.word	0x40020044
 8003518:	40020058 	.word	0x40020058
 800351c:	4002006c 	.word	0x4002006c
 8003520:	40020000 	.word	0x40020000

08003524 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d108      	bne.n	8003564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003562:	e007      	b.n	8003574 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b08b      	sub	sp, #44	@ 0x2c
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003592:	e169      	b.n	8003868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003594:	2201      	movs	r2, #1
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8158 	bne.w	8003862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003820 <HAL_GPIO_Init+0x2a0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d05e      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035bc:	4a98      	ldr	r2, [pc, #608]	@ (8003820 <HAL_GPIO_Init+0x2a0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d875      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035c2:	4a98      	ldr	r2, [pc, #608]	@ (8003824 <HAL_GPIO_Init+0x2a4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d058      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035c8:	4a96      	ldr	r2, [pc, #600]	@ (8003824 <HAL_GPIO_Init+0x2a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d86f      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035ce:	4a96      	ldr	r2, [pc, #600]	@ (8003828 <HAL_GPIO_Init+0x2a8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d052      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035d4:	4a94      	ldr	r2, [pc, #592]	@ (8003828 <HAL_GPIO_Init+0x2a8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d869      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035da:	4a94      	ldr	r2, [pc, #592]	@ (800382c <HAL_GPIO_Init+0x2ac>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04c      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035e0:	4a92      	ldr	r2, [pc, #584]	@ (800382c <HAL_GPIO_Init+0x2ac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d863      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035e6:	4a92      	ldr	r2, [pc, #584]	@ (8003830 <HAL_GPIO_Init+0x2b0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d046      	beq.n	800367a <HAL_GPIO_Init+0xfa>
 80035ec:	4a90      	ldr	r2, [pc, #576]	@ (8003830 <HAL_GPIO_Init+0x2b0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d85d      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d82a      	bhi.n	800364c <HAL_GPIO_Init+0xcc>
 80035f6:	2b12      	cmp	r3, #18
 80035f8:	d859      	bhi.n	80036ae <HAL_GPIO_Init+0x12e>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <HAL_GPIO_Init+0x80>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	0800367b 	.word	0x0800367b
 8003604:	08003655 	.word	0x08003655
 8003608:	08003667 	.word	0x08003667
 800360c:	080036a9 	.word	0x080036a9
 8003610:	080036af 	.word	0x080036af
 8003614:	080036af 	.word	0x080036af
 8003618:	080036af 	.word	0x080036af
 800361c:	080036af 	.word	0x080036af
 8003620:	080036af 	.word	0x080036af
 8003624:	080036af 	.word	0x080036af
 8003628:	080036af 	.word	0x080036af
 800362c:	080036af 	.word	0x080036af
 8003630:	080036af 	.word	0x080036af
 8003634:	080036af 	.word	0x080036af
 8003638:	080036af 	.word	0x080036af
 800363c:	080036af 	.word	0x080036af
 8003640:	080036af 	.word	0x080036af
 8003644:	0800365d 	.word	0x0800365d
 8003648:	08003671 	.word	0x08003671
 800364c:	4a79      	ldr	r2, [pc, #484]	@ (8003834 <HAL_GPIO_Init+0x2b4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003652:	e02c      	b.n	80036ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	623b      	str	r3, [r7, #32]
          break;
 800365a:	e029      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	3304      	adds	r3, #4
 8003662:	623b      	str	r3, [r7, #32]
          break;
 8003664:	e024      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	3308      	adds	r3, #8
 800366c:	623b      	str	r3, [r7, #32]
          break;
 800366e:	e01f      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	330c      	adds	r3, #12
 8003676:	623b      	str	r3, [r7, #32]
          break;
 8003678:	e01a      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003682:	2304      	movs	r3, #4
 8003684:	623b      	str	r3, [r7, #32]
          break;
 8003686:	e013      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003690:	2308      	movs	r3, #8
 8003692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	611a      	str	r2, [r3, #16]
          break;
 800369a:	e009      	b.n	80036b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800369c:	2308      	movs	r3, #8
 800369e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	615a      	str	r2, [r3, #20]
          break;
 80036a6:	e003      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
          break;
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x130>
          break;
 80036ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d801      	bhi.n	80036ba <HAL_GPIO_Init+0x13a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <HAL_GPIO_Init+0x13e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2bff      	cmp	r3, #255	@ 0xff
 80036c4:	d802      	bhi.n	80036cc <HAL_GPIO_Init+0x14c>
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	e002      	b.n	80036d2 <HAL_GPIO_Init+0x152>
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	3b08      	subs	r3, #8
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	210f      	movs	r1, #15
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80b1 	beq.w	8003862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003700:	4b4d      	ldr	r3, [pc, #308]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	4a4c      	ldr	r2, [pc, #304]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6193      	str	r3, [r2, #24]
 800370c:	4b4a      	ldr	r3, [pc, #296]	@ (8003838 <HAL_GPIO_Init+0x2b8>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003718:	4a48      	ldr	r2, [pc, #288]	@ (800383c <HAL_GPIO_Init+0x2bc>)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	@ (8003840 <HAL_GPIO_Init+0x2c0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_GPIO_Init+0x1ec>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3f      	ldr	r2, [pc, #252]	@ (8003844 <HAL_GPIO_Init+0x2c4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00d      	beq.n	8003768 <HAL_GPIO_Init+0x1e8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3e      	ldr	r2, [pc, #248]	@ (8003848 <HAL_GPIO_Init+0x2c8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <HAL_GPIO_Init+0x1e4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3d      	ldr	r2, [pc, #244]	@ (800384c <HAL_GPIO_Init+0x2cc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_GPIO_Init+0x1e0>
 800375c:	2303      	movs	r3, #3
 800375e:	e006      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003760:	2304      	movs	r3, #4
 8003762:	e004      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003764:	2302      	movs	r3, #2
 8003766:	e002      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_GPIO_Init+0x1ee>
 800376c:	2300      	movs	r3, #0
 800376e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003770:	f002 0203 	and.w	r2, r2, #3
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	4093      	lsls	r3, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800377e:	492f      	ldr	r1, [pc, #188]	@ (800383c <HAL_GPIO_Init+0x2bc>)
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	3302      	adds	r3, #2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	492c      	ldr	r1, [pc, #176]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	4928      	ldr	r1, [pc, #160]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037c0:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4922      	ldr	r1, [pc, #136]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	491e      	ldr	r1, [pc, #120]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4918      	ldr	r1, [pc, #96]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	4914      	ldr	r1, [pc, #80]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003800:	4013      	ands	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d021      	beq.n	8003854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	490e      	ldr	r1, [pc, #56]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e021      	b.n	8003862 <HAL_GPIO_Init+0x2e2>
 800381e:	bf00      	nop
 8003820:	10320000 	.word	0x10320000
 8003824:	10310000 	.word	0x10310000
 8003828:	10220000 	.word	0x10220000
 800382c:	10210000 	.word	0x10210000
 8003830:	10120000 	.word	0x10120000
 8003834:	10110000 	.word	0x10110000
 8003838:	40021000 	.word	0x40021000
 800383c:	40010000 	.word	0x40010000
 8003840:	40010800 	.word	0x40010800
 8003844:	40010c00 	.word	0x40010c00
 8003848:	40011000 	.word	0x40011000
 800384c:	40011400 	.word	0x40011400
 8003850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_GPIO_Init+0x304>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	43db      	mvns	r3, r3
 800385c:	4909      	ldr	r1, [pc, #36]	@ (8003884 <HAL_GPIO_Init+0x304>)
 800385e:	4013      	ands	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	3301      	adds	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	fa22 f303 	lsr.w	r3, r2, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	f47f ae8e 	bne.w	8003594 <HAL_GPIO_Init+0x14>
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	372c      	adds	r7, #44	@ 0x2c
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40010400 	.word	0x40010400

08003888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e001      	b.n	80038aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	807b      	strh	r3, [r7, #2]
 80038c2:	4613      	mov	r3, r2
 80038c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c6:	787b      	ldrb	r3, [r7, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038d2:	e003      	b.n	80038dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	041a      	lsls	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038f8:	887a      	ldrh	r2, [r7, #2]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	041a      	lsls	r2, r3, #16
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43d9      	mvns	r1, r3
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	400b      	ands	r3, r1
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e12b      	b.n	8003b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe fb04 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	@ 0x24
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800396a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800397a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800397c:	f001 ff28 	bl	80057d0 <HAL_RCC_GetPCLK1Freq>
 8003980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4a81      	ldr	r2, [pc, #516]	@ (8003b8c <HAL_I2C_Init+0x274>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d807      	bhi.n	800399c <HAL_I2C_Init+0x84>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a80      	ldr	r2, [pc, #512]	@ (8003b90 <HAL_I2C_Init+0x278>)
 8003990:	4293      	cmp	r3, r2
 8003992:	bf94      	ite	ls
 8003994:	2301      	movls	r3, #1
 8003996:	2300      	movhi	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e006      	b.n	80039aa <HAL_I2C_Init+0x92>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b94 <HAL_I2C_Init+0x27c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	bf94      	ite	ls
 80039a4:	2301      	movls	r3, #1
 80039a6:	2300      	movhi	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0e7      	b.n	8003b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a78      	ldr	r2, [pc, #480]	@ (8003b98 <HAL_I2C_Init+0x280>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0c9b      	lsrs	r3, r3, #18
 80039bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b8c <HAL_I2C_Init+0x274>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d802      	bhi.n	80039ec <HAL_I2C_Init+0xd4>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	e009      	b.n	8003a00 <HAL_I2C_Init+0xe8>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	4a69      	ldr	r2, [pc, #420]	@ (8003b9c <HAL_I2C_Init+0x284>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	3301      	adds	r3, #1
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	495c      	ldr	r1, [pc, #368]	@ (8003b8c <HAL_I2C_Init+0x274>)
 8003a1c:	428b      	cmp	r3, r1
 8003a1e:	d819      	bhi.n	8003a54 <HAL_I2C_Init+0x13c>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e59      	subs	r1, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a34:	400b      	ands	r3, r1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_I2C_Init+0x138>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1e59      	subs	r1, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4e:	e051      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003a50:	2304      	movs	r3, #4
 8003a52:	e04f      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d111      	bne.n	8003a80 <HAL_I2C_Init+0x168>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e012      	b.n	8003aa6 <HAL_I2C_Init+0x18e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Init+0x196>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e022      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_I2C_Init+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e58      	subs	r0, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	440b      	add	r3, r1
 8003ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ad2:	e00f      	b.n	8003af4 <HAL_I2C_Init+0x1dc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	6809      	ldr	r1, [r1, #0]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6911      	ldr	r1, [r2, #16]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	000186a0 	.word	0x000186a0
 8003b90:	001e847f 	.word	0x001e847f
 8003b94:	003d08ff 	.word	0x003d08ff
 8003b98:	431bde83 	.word	0x431bde83
 8003b9c:	10624dd3 	.word	0x10624dd3

08003ba0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	460b      	mov	r3, r1
 8003bae:	817b      	strh	r3, [r7, #10]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb4:	f7fe fb3c 	bl	8002230 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	f040 80e0 	bne.w	8003d88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2319      	movs	r3, #25
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4970      	ldr	r1, [pc, #448]	@ (8003d94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fffa 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0d3      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2C_Master_Transmit+0x50>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0cc      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ea>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d007      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2221      	movs	r2, #33	@ 0x21
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2210      	movs	r2, #16
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	893a      	ldrh	r2, [r7, #8]
 8003c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a50      	ldr	r2, [pc, #320]	@ (8003d98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c58:	8979      	ldrh	r1, [r7, #10]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fd7c 	bl	800475c <I2C_MasterRequestWrite>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e08d      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c84:	e066      	b.n	8003d54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	6a39      	ldr	r1, [r7, #32]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f001 f8b8 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d107      	bne.n	8003cae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e06b      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	781a      	ldrb	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d11b      	bne.n	8003d28 <HAL_I2C_Master_Transmit+0x188>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d017      	beq.n	8003d28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	6a39      	ldr	r1, [r7, #32]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f001 f8af 	bl	8004e90 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d107      	bne.n	8003d50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e01a      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d194      	bne.n	8003c86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	00100002 	.word	0x00100002
 8003d98:	ffff0000 	.word	0xffff0000

08003d9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	@ 0x30
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	461a      	mov	r2, r3
 8003da8:	460b      	mov	r3, r1
 8003daa:	817b      	strh	r3, [r7, #10]
 8003dac:	4613      	mov	r3, r2
 8003dae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003db4:	f7fe fa3c 	bl	8002230 <HAL_GetTick>
 8003db8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	f040 824b 	bne.w	800425e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2319      	movs	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	497f      	ldr	r1, [pc, #508]	@ (8003fd0 <HAL_I2C_Master_Receive+0x234>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fefa 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
 8003de0:	e23e      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_I2C_Master_Receive+0x54>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e237      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d007      	beq.n	8003e16 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2222      	movs	r2, #34	@ 0x22
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2210      	movs	r2, #16
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	893a      	ldrh	r2, [r7, #8]
 8003e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd4 <HAL_I2C_Master_Receive+0x238>)
 8003e56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fcfe 	bl	8004860 <I2C_MasterRequestRead>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1f8      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d113      	bne.n	8003e9e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e1cc      	b.n	8004238 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d11e      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb6:	b672      	cpsid	i
}
 8003eb8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ede:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ee0:	b662      	cpsie	i
}
 8003ee2:	e035      	b.n	8003f50 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d11e      	bne.n	8003f2a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003efc:	b672      	cpsid	i
}
 8003efe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f26:	b662      	cpsie	i
}
 8003f28:	e012      	b.n	8003f50 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f50:	e172      	b.n	8004238 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	f200 811f 	bhi.w	800419a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d123      	bne.n	8003fac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 ffd9 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e173      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003faa:	e145      	b.n	8004238 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d152      	bne.n	800405a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4906      	ldr	r1, [pc, #24]	@ (8003fd8 <HAL_I2C_Master_Receive+0x23c>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fe04 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e148      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
 8003fce:	bf00      	nop
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000
 8003fd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003fdc:	b672      	cpsid	i
}
 8003fde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004022:	b662      	cpsie	i
}
 8004024:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004058:	e0ee      	b.n	8004238 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	4981      	ldr	r1, [pc, #516]	@ (8004268 <HAL_I2C_Master_Receive+0x4cc>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fdb1 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0f5      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004082:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004084:	b672      	cpsid	i
}
 8004086:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040ba:	4b6c      	ldr	r3, [pc, #432]	@ (800426c <HAL_I2C_Master_Receive+0x4d0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004270 <HAL_I2C_Master_Receive+0x4d4>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a1a      	lsrs	r2, r3, #8
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00da      	lsls	r2, r3, #3
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d118      	bne.n	8004112 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004102:	b662      	cpsie	i
}
 8004104:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0a6      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d1d9      	bne.n	80040d4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004162:	b662      	cpsie	i
}
 8004164:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004198:	e04e      	b.n	8004238 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 febe 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e058      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d124      	bne.n	8004238 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d107      	bne.n	8004206 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004204:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f ae88 	bne.w	8003f52 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3728      	adds	r7, #40	@ 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00010004 	.word	0x00010004
 800426c:	20000008 	.word	0x20000008
 8004270:	14f8b589 	.word	0x14f8b589

08004274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	@ 0x30
 8004278:	af02      	add	r7, sp, #8
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	4608      	mov	r0, r1
 800427e:	4611      	mov	r1, r2
 8004280:	461a      	mov	r2, r3
 8004282:	4603      	mov	r3, r0
 8004284:	817b      	strh	r3, [r7, #10]
 8004286:	460b      	mov	r3, r1
 8004288:	813b      	strh	r3, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004292:	f7fd ffcd 	bl	8002230 <HAL_GetTick>
 8004296:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	f040 8250 	bne.w	8004746 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2319      	movs	r3, #25
 80042ac:	2201      	movs	r2, #1
 80042ae:	4982      	ldr	r1, [pc, #520]	@ (80044b8 <HAL_I2C_Mem_Read+0x244>)
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fc8b 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
 80042be:	e243      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Mem_Read+0x5a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e23c      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d007      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2222      	movs	r2, #34	@ 0x22
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2240      	movs	r2, #64	@ 0x40
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a62      	ldr	r2, [pc, #392]	@ (80044bc <HAL_I2C_Mem_Read+0x248>)
 8004334:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004336:	88f8      	ldrh	r0, [r7, #6]
 8004338:	893a      	ldrh	r2, [r7, #8]
 800433a:	8979      	ldrh	r1, [r7, #10]
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4603      	mov	r3, r0
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fb58 	bl	80049fc <I2C_RequestMemoryRead>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e1f8      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d113      	bne.n	8004386 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e1cc      	b.n	8004720 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438a:	2b01      	cmp	r3, #1
 800438c:	d11e      	bne.n	80043cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800439c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800439e:	b672      	cpsid	i
}
 80043a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043c8:	b662      	cpsie	i
}
 80043ca:	e035      	b.n	8004438 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d11e      	bne.n	8004412 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043e4:	b672      	cpsid	i
}
 80043e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800440e:	b662      	cpsie	i
}
 8004410:	e012      	b.n	8004438 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004420:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004438:	e172      	b.n	8004720 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443e:	2b03      	cmp	r3, #3
 8004440:	f200 811f 	bhi.w	8004682 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	2b01      	cmp	r3, #1
 800444a:	d123      	bne.n	8004494 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fd65 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e173      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004492:	e145      	b.n	8004720 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	2b02      	cmp	r3, #2
 800449a:	d152      	bne.n	8004542 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	2200      	movs	r2, #0
 80044a4:	4906      	ldr	r1, [pc, #24]	@ (80044c0 <HAL_I2C_Mem_Read+0x24c>)
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fb90 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e148      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
 80044b6:	bf00      	nop
 80044b8:	00100002 	.word	0x00100002
 80044bc:	ffff0000 	.word	0xffff0000
 80044c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044c4:	b672      	cpsid	i
}
 80044c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800450a:	b662      	cpsie	i
}
 800450c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004540:	e0ee      	b.n	8004720 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	2200      	movs	r2, #0
 800454a:	4981      	ldr	r1, [pc, #516]	@ (8004750 <HAL_I2C_Mem_Read+0x4dc>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb3d 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0f5      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800456c:	b672      	cpsid	i
}
 800456e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004754 <HAL_I2C_Mem_Read+0x4e0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	08db      	lsrs	r3, r3, #3
 80045a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004758 <HAL_I2C_Mem_Read+0x4e4>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	0a1a      	lsrs	r2, r3, #8
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00da      	lsls	r2, r3, #3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	3b01      	subs	r3, #1
 80045c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d118      	bne.n	80045fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045ea:	b662      	cpsie	i
}
 80045ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0a6      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d1d9      	bne.n	80045bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800464a:	b662      	cpsie	i
}
 800464c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004680:	e04e      	b.n	8004720 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fc4a 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e058      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d124      	bne.n	8004720 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d107      	bne.n	80046ee <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f ae88 	bne.w	800443a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3728      	adds	r7, #40	@ 0x28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	00010004 	.word	0x00010004
 8004754:	20000008 	.word	0x20000008
 8004758:	14f8b589 	.word	0x14f8b589

0800475c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	460b      	mov	r3, r1
 800476a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d006      	beq.n	8004786 <I2C_MasterRequestWrite+0x2a>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d003      	beq.n	8004786 <I2C_MasterRequestWrite+0x2a>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004784:	d108      	bne.n	8004798 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e00b      	b.n	80047b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	2b12      	cmp	r3, #18
 800479e:	d107      	bne.n	80047b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fa05 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d6:	d103      	bne.n	80047e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e035      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ec:	d108      	bne.n	8004800 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047fc:	611a      	str	r2, [r3, #16]
 80047fe:	e01b      	b.n	8004838 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004800:	897b      	ldrh	r3, [r7, #10]
 8004802:	11db      	asrs	r3, r3, #7
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f063 030f 	orn	r3, r3, #15
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	490e      	ldr	r1, [pc, #56]	@ (8004858 <I2C_MasterRequestWrite+0xfc>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fa4e 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e010      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4907      	ldr	r1, [pc, #28]	@ (800485c <I2C_MasterRequestWrite+0x100>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa3e 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010008 	.word	0x00010008
 800485c:	00010002 	.word	0x00010002

08004860 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	460b      	mov	r3, r1
 800486e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004884:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d006      	beq.n	800489a <I2C_MasterRequestRead+0x3a>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d003      	beq.n	800489a <I2C_MasterRequestRead+0x3a>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004898:	d108      	bne.n	80048ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e00b      	b.n	80048c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	2b11      	cmp	r3, #17
 80048b2:	d107      	bne.n	80048c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f97b 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ea:	d103      	bne.n	80048f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e079      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004900:	d108      	bne.n	8004914 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]
 8004912:	e05f      	b.n	80049d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004914:	897b      	ldrh	r3, [r7, #10]
 8004916:	11db      	asrs	r3, r3, #7
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f003 0306 	and.w	r3, r3, #6
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f063 030f 	orn	r3, r3, #15
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4930      	ldr	r1, [pc, #192]	@ (80049f4 <I2C_MasterRequestRead+0x194>)
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f9c4 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e054      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4929      	ldr	r1, [pc, #164]	@ (80049f8 <I2C_MasterRequestRead+0x198>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f9b4 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e044      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004986:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f919 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ae:	d103      	bne.n	80049b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e017      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049bc:	897b      	ldrh	r3, [r7, #10]
 80049be:	11db      	asrs	r3, r3, #7
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f063 030e 	orn	r3, r3, #14
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4907      	ldr	r1, [pc, #28]	@ (80049f8 <I2C_MasterRequestRead+0x198>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f970 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	00010008 	.word	0x00010008
 80049f8:	00010002 	.word	0x00010002

080049fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	813b      	strh	r3, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f8c2 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5c:	d103      	bne.n	8004a66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0aa      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	6a3a      	ldr	r2, [r7, #32]
 8004a7e:	4952      	ldr	r1, [pc, #328]	@ (8004bc8 <I2C_RequestMemoryRead+0x1cc>)
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f91d 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e097      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa8:	6a39      	ldr	r1, [r7, #32]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f9a8 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d107      	bne.n	8004ace <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e076      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d105      	bne.n	8004ae4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad8:	893b      	ldrh	r3, [r7, #8]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]
 8004ae2:	e021      	b.n	8004b28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ae4:	893b      	ldrh	r3, [r7, #8]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af4:	6a39      	ldr	r1, [r7, #32]
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f982 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00d      	beq.n	8004b1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d107      	bne.n	8004b1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e050      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b1e:	893b      	ldrh	r3, [r7, #8]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2a:	6a39      	ldr	r1, [r7, #32]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f967 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d107      	bne.n	8004b50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e035      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f82b 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8a:	d103      	bne.n	8004b94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e013      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	6a3a      	ldr	r2, [r7, #32]
 8004bac:	4906      	ldr	r1, [pc, #24]	@ (8004bc8 <I2C_RequestMemoryRead+0x1cc>)
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f886 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	00010002 	.word	0x00010002

08004bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	e048      	b.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d044      	beq.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fd fb23 	bl	8002230 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d139      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10d      	bne.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	43da      	mvns	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	e00c      	b.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d116      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e023      	b.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10d      	bne.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	43da      	mvns	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	e00c      	b.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d093      	beq.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cce:	e071      	b.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d123      	bne.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e067      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d041      	beq.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fd fa7e 	bl	8002230 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d136      	bne.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10c      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	43da      	mvns	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e00b      	b.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	43da      	mvns	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e021      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10c      	bne.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e00b      	b.n	8004df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af6d 	bne.w	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e034      	b.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8e3 	bl	8004fda <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e034      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d028      	beq.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fd fa03 	bl	8002230 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11d      	bne.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	2b80      	cmp	r3, #128	@ 0x80
 8004e48:	d016      	beq.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e007      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e82:	2b80      	cmp	r3, #128	@ 0x80
 8004e84:	d1c3      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e9c:	e034      	b.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f89b 	bl	8004fda <I2C_IsAcknowledgeFailed>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e034      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d028      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fd f9bb 	bl	8002230 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11d      	bne.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d016      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e007      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d1c3      	bne.n	8004e9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f2c:	e049      	b.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d119      	bne.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0210 	mvn.w	r2, #16
 8004f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e030      	b.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f70:	f7fd f95e 	bl	8002230 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d11d      	bne.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d016      	beq.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e007      	b.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d1ae      	bne.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff0:	d11b      	bne.n	800502a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ffa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr
	...

08005038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e272      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8087 	beq.w	8005166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005058:	4b92      	ldr	r3, [pc, #584]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b04      	cmp	r3, #4
 8005062:	d00c      	beq.n	800507e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005064:	4b8f      	ldr	r3, [pc, #572]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d112      	bne.n	8005096 <HAL_RCC_OscConfig+0x5e>
 8005070:	4b8c      	ldr	r3, [pc, #560]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d10b      	bne.n	8005096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507e:	4b89      	ldr	r3, [pc, #548]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d06c      	beq.n	8005164 <HAL_RCC_OscConfig+0x12c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d168      	bne.n	8005164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e24c      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x76>
 80050a0:	4b80      	ldr	r3, [pc, #512]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a7f      	ldr	r2, [pc, #508]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e02e      	b.n	800510c <HAL_RCC_OscConfig+0xd4>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x98>
 80050b6:	4b7b      	ldr	r3, [pc, #492]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7a      	ldr	r2, [pc, #488]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b78      	ldr	r3, [pc, #480]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a77      	ldr	r2, [pc, #476]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xd4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0xbc>
 80050da:	4b72      	ldr	r3, [pc, #456]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a71      	ldr	r2, [pc, #452]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b6f      	ldr	r3, [pc, #444]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6e      	ldr	r2, [pc, #440]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xd4>
 80050f4:	4b6b      	ldr	r3, [pc, #428]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6a      	ldr	r2, [pc, #424]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b68      	ldr	r3, [pc, #416]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a67      	ldr	r2, [pc, #412]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd f88c 	bl	8002230 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511c:	f7fd f888 	bl	8002230 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	@ 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e200      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b5d      	ldr	r3, [pc, #372]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xe4>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd f878 	bl	8002230 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd f874 	bl	8002230 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1ec      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b53      	ldr	r3, [pc, #332]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x10c>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005172:	4b4c      	ldr	r3, [pc, #304]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800517e:	4b49      	ldr	r3, [pc, #292]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x18c>
 800518a:	4b46      	ldr	r3, [pc, #280]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b43      	ldr	r3, [pc, #268]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_RCC_OscConfig+0x176>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e1c0      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ae:	4b3d      	ldr	r3, [pc, #244]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4939      	ldr	r1, [pc, #228]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e03a      	b.n	800523a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b36      	ldr	r3, [pc, #216]	@ (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fd f82d 	bl	8002230 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051da:	f7fd f829 	bl	8002230 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1a1      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ec:	4b2d      	ldr	r3, [pc, #180]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4927      	ldr	r1, [pc, #156]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
 800520c:	e015      	b.n	800523a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520e:	4b26      	ldr	r3, [pc, #152]	@ (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd f80c 	bl	8002230 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521c:	f7fd f808 	bl	8002230 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e180      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d03a      	beq.n	80052bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d019      	beq.n	8005282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <HAL_RCC_OscConfig+0x274>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005254:	f7fc ffec 	bl	8002230 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525c:	f7fc ffe8 	bl	8002230 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e160      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800527a:	2001      	movs	r0, #1
 800527c:	f000 fad0 	bl	8005820 <RCC_Delay>
 8005280:	e01c      	b.n	80052bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_OscConfig+0x274>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005288:	f7fc ffd2 	bl	8002230 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528e:	e00f      	b.n	80052b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005290:	f7fc ffce 	bl	8002230 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d908      	bls.n	80052b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e146      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	42420000 	.word	0x42420000
 80052ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	4b92      	ldr	r3, [pc, #584]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e9      	bne.n	8005290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80a6 	beq.w	8005416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ce:	4b8b      	ldr	r3, [pc, #556]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052da:	4b88      	ldr	r3, [pc, #544]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4a87      	ldr	r2, [pc, #540]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	61d3      	str	r3, [r2, #28]
 80052e6:	4b85      	ldr	r3, [pc, #532]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f6:	4b82      	ldr	r3, [pc, #520]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d118      	bne.n	8005334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005302:	4b7f      	ldr	r3, [pc, #508]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7e      	ldr	r2, [pc, #504]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530e:	f7fc ff8f 	bl	8002230 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fc ff8b 	bl	8002230 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	@ 0x64
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e103      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	4b75      	ldr	r3, [pc, #468]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x312>
 800533c:	4b6f      	ldr	r3, [pc, #444]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4a6e      	ldr	r2, [pc, #440]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6213      	str	r3, [r2, #32]
 8005348:	e02d      	b.n	80053a6 <HAL_RCC_OscConfig+0x36e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x334>
 8005352:	4b6a      	ldr	r3, [pc, #424]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4a69      	ldr	r2, [pc, #420]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6213      	str	r3, [r2, #32]
 800535e:	4b67      	ldr	r3, [pc, #412]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a66      	ldr	r2, [pc, #408]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	6213      	str	r3, [r2, #32]
 800536a:	e01c      	b.n	80053a6 <HAL_RCC_OscConfig+0x36e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d10c      	bne.n	800538e <HAL_RCC_OscConfig+0x356>
 8005374:	4b61      	ldr	r3, [pc, #388]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4a60      	ldr	r2, [pc, #384]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	6213      	str	r3, [r2, #32]
 8005380:	4b5e      	ldr	r3, [pc, #376]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	4a5d      	ldr	r2, [pc, #372]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6213      	str	r3, [r2, #32]
 800538c:	e00b      	b.n	80053a6 <HAL_RCC_OscConfig+0x36e>
 800538e:	4b5b      	ldr	r3, [pc, #364]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4a5a      	ldr	r2, [pc, #360]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6213      	str	r3, [r2, #32]
 800539a:	4b58      	ldr	r3, [pc, #352]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4a57      	ldr	r2, [pc, #348]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d015      	beq.n	80053da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ae:	f7fc ff3f 	bl	8002230 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	e00a      	b.n	80053cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fc ff3b 	bl	8002230 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e0b1      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	4b4b      	ldr	r3, [pc, #300]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ee      	beq.n	80053b6 <HAL_RCC_OscConfig+0x37e>
 80053d8:	e014      	b.n	8005404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fc ff29 	bl	8002230 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fc ff25 	bl	8002230 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e09b      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	4b40      	ldr	r3, [pc, #256]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ee      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d105      	bne.n	8005416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540a:	4b3c      	ldr	r3, [pc, #240]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4a3b      	ldr	r2, [pc, #236]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8087 	beq.w	800552e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d061      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d146      	bne.n	80054c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b33      	ldr	r3, [pc, #204]	@ (8005504 <HAL_RCC_OscConfig+0x4cc>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543a:	f7fc fef9 	bl	8002230 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005442:	f7fc fef5 	bl	8002230 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e06d      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005454:	4b29      	ldr	r3, [pc, #164]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005468:	d108      	bne.n	800547c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800546a:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	4921      	ldr	r1, [pc, #132]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547c:	4b1f      	ldr	r3, [pc, #124]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a19      	ldr	r1, [r3, #32]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	430b      	orrs	r3, r1
 800548e:	491b      	ldr	r1, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x4cc>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fc fec9 	bl	8002230 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fc fec5 	bl	8002230 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e03d      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b4:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x46a>
 80054c0:	e035      	b.n	800552e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <HAL_RCC_OscConfig+0x4cc>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc feb2 	bl	8002230 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fc feae 	bl	8002230 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e026      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x498>
 80054ee:	e01e      	b.n	800552e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e019      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
 8005504:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCC_OscConfig+0x500>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	429a      	cmp	r2, r3
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000

0800553c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0d0      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005550:	4b6a      	ldr	r3, [pc, #424]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d910      	bls.n	8005580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b67      	ldr	r3, [pc, #412]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 0207 	bic.w	r2, r3, #7
 8005566:	4965      	ldr	r1, [pc, #404]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b63      	ldr	r3, [pc, #396]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005598:	4b59      	ldr	r3, [pc, #356]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800559e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b0:	4b53      	ldr	r3, [pc, #332]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a52      	ldr	r2, [pc, #328]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055bc:	4b50      	ldr	r3, [pc, #320]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	494d      	ldr	r1, [pc, #308]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d040      	beq.n	800565c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b47      	ldr	r3, [pc, #284]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d115      	bne.n	800561a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d107      	bne.n	800560a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fa:	4b41      	ldr	r3, [pc, #260]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e073      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560a:	4b3d      	ldr	r3, [pc, #244]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e06b      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800561a:	4b39      	ldr	r3, [pc, #228]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f023 0203 	bic.w	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4936      	ldr	r1, [pc, #216]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800562c:	f7fc fe00 	bl	8002230 <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005632:	e00a      	b.n	800564a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005634:	f7fc fdfc 	bl	8002230 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e053      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	4b2d      	ldr	r3, [pc, #180]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 020c 	and.w	r2, r3, #12
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	429a      	cmp	r2, r3
 800565a:	d1eb      	bne.n	8005634 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800565c:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d210      	bcs.n	800568c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 0207 	bic.w	r2, r3, #7
 8005672:	4922      	ldr	r1, [pc, #136]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e032      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005698:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4916      	ldr	r1, [pc, #88]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056b6:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	490e      	ldr	r1, [pc, #56]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ca:	f000 f821 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ce:	4602      	mov	r2, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	490a      	ldr	r1, [pc, #40]	@ (8005704 <HAL_RCC_ClockConfig+0x1c8>)
 80056dc:	5ccb      	ldrb	r3, [r1, r3]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <HAL_RCC_ClockConfig+0x1cc>)
 80056e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056e6:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_RCC_ClockConfig+0x1d0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fc fd5e 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
 8005704:	0800660c 	.word	0x0800660c
 8005708:	20000008 	.word	0x20000008
 800570c:	2000000c 	.word	0x2000000c

08005710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800572a:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b04      	cmp	r3, #4
 8005738:	d002      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x30>
 800573a:	2b08      	cmp	r3, #8
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0x36>
 800573e:	e027      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005740:	4b19      	ldr	r3, [pc, #100]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005742:	613b      	str	r3, [r7, #16]
      break;
 8005744:	e027      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	0c9b      	lsrs	r3, r3, #18
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005750:	5cd3      	ldrb	r3, [r2, r3]
 8005752:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800575e:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	0c5b      	lsrs	r3, r3, #17
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	4a11      	ldr	r2, [pc, #68]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800576a:	5cd3      	ldrb	r3, [r2, r3]
 800576c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005772:	fb03 f202 	mul.w	r2, r3, r2
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e004      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0c      	ldr	r2, [pc, #48]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	613b      	str	r3, [r7, #16]
      break;
 800578e:	e002      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005790:	4b09      	ldr	r3, [pc, #36]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005792:	613b      	str	r3, [r7, #16]
      break;
 8005794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005796:	693b      	ldr	r3, [r7, #16]
}
 8005798:	4618      	mov	r0, r3
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40021000 	.word	0x40021000
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	08006624 	.word	0x08006624
 80057b0:	08006634 	.word	0x08006634
 80057b4:	003d0900 	.word	0x003d0900
 80057b8:	007a1200 	.word	0x007a1200

080057bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c0:	4b02      	ldr	r3, [pc, #8]	@ (80057cc <HAL_RCC_GetHCLKFreq+0x10>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr
 80057cc:	20000008 	.word	0x20000008

080057d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057d4:	f7ff fff2 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4903      	ldr	r1, [pc, #12]	@ (80057f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	0800661c 	.word	0x0800661c

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057fc:	f7ff ffde 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	0adb      	lsrs	r3, r3, #11
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4903      	ldr	r1, [pc, #12]	@ (800581c <HAL_RCC_GetPCLK2Freq+0x24>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	0800661c 	.word	0x0800661c

08005820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005828:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <RCC_Delay+0x34>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a0a      	ldr	r2, [pc, #40]	@ (8005858 <RCC_Delay+0x38>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	0a5b      	lsrs	r3, r3, #9
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800583c:	bf00      	nop
  }
  while (Delay --);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1e5a      	subs	r2, r3, #1
 8005842:	60fa      	str	r2, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f9      	bne.n	800583c <RCC_Delay+0x1c>
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr
 8005854:	20000008 	.word	0x20000008
 8005858:	10624dd3 	.word	0x10624dd3

0800585c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d07d      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005878:	2300      	movs	r3, #0
 800587a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800587c:	4b4f      	ldr	r3, [pc, #316]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005888:	4b4c      	ldr	r3, [pc, #304]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4a4b      	ldr	r2, [pc, #300]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005892:	61d3      	str	r3, [r2, #28]
 8005894:	4b49      	ldr	r3, [pc, #292]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a4:	4b46      	ldr	r3, [pc, #280]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d118      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058b0:	4b43      	ldr	r3, [pc, #268]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a42      	ldr	r2, [pc, #264]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058bc:	f7fc fcb8 	bl	8002230 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c2:	e008      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c4:	f7fc fcb4 	bl	8002230 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b64      	cmp	r3, #100	@ 0x64
 80058d0:	d901      	bls.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e06d      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	4b3a      	ldr	r3, [pc, #232]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f0      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058e2:	4b36      	ldr	r3, [pc, #216]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d02e      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d027      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005900:	4b2e      	ldr	r3, [pc, #184]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005908:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800590a:	4b2e      	ldr	r3, [pc, #184]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005910:	4b2c      	ldr	r3, [pc, #176]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005916:	4a29      	ldr	r2, [pc, #164]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d014      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005926:	f7fc fc83 	bl	8002230 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fc fc7f 	bl	8002230 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e036      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	4b1d      	ldr	r3, [pc, #116]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	4b1a      	ldr	r3, [pc, #104]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4917      	ldr	r1, [pc, #92]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595e:	4313      	orrs	r3, r2
 8005960:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b14      	ldr	r3, [pc, #80]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	4a13      	ldr	r2, [pc, #76]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005972:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005980:	4b0e      	ldr	r3, [pc, #56]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	490b      	ldr	r1, [pc, #44]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598e:	4313      	orrs	r3, r2
 8005990:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800599e:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	4904      	ldr	r1, [pc, #16]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40007000 	.word	0x40007000
 80059c4:	42420440 	.word	0x42420440

080059c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	f200 8089 	bhi.w	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d045      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d074      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80059fe:	e081      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8005a00:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a06:	4b44      	ldr	r3, [pc, #272]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d07a      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	0c9b      	lsrs	r3, r3, #18
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	4a40      	ldr	r2, [pc, #256]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a1c:	5cd3      	ldrb	r3, [r2, r3]
 8005a1e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d015      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	0c5b      	lsrs	r3, r3, #17
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	4a3a      	ldr	r2, [pc, #232]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00d      	beq.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a44:	4a37      	ldr	r2, [pc, #220]	@ (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e004      	b.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4a33      	ldr	r2, [pc, #204]	@ (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a60:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a6c:	d102      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	61bb      	str	r3, [r7, #24]
      break;
 8005a72:	e049      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4a2c      	ldr	r2, [pc, #176]	@ (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	61bb      	str	r3, [r7, #24]
      break;
 8005a82:	e041      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8005a84:	4b24      	ldr	r3, [pc, #144]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e01e      	b.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab2:	d109      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ac0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e00e      	b.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ad2:	d11b      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005ad4:	4b10      	ldr	r3, [pc, #64]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8005ae0:	4b13      	ldr	r3, [pc, #76]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005ae2:	61bb      	str	r3, [r7, #24]
      break;
 8005ae4:	e012      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8005ae6:	e011      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ae8:	f7ff fe86 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8005aec:	4602      	mov	r2, r0
 8005aee:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	0b9b      	lsrs	r3, r3, #14
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	3301      	adds	r3, #1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	61bb      	str	r3, [r7, #24]
      break;
 8005b02:	e004      	b.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005b04:	bf00      	nop
 8005b06:	e002      	b.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005b08:	bf00      	nop
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8005b0c:	bf00      	nop
    }
  }
  return (frequency);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	08006638 	.word	0x08006638
 8005b20:	08006648 	.word	0x08006648
 8005b24:	00f42400 	.word	0x00f42400
 8005b28:	003d0900 	.word	0x003d0900
 8005b2c:	aaaaaaab 	.word	0xaaaaaaab
 8005b30:	0001e848 	.word	0x0001e848

08005b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e041      	b.n	8005bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc fa34 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 fa5c 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d001      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e03a      	b.n	8005c62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <HAL_TIM_Base_Start_IT+0x98>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	@ (8005c70 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x58>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d111      	bne.n	8005c50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b06      	cmp	r3, #6
 8005c3c:	d010      	beq.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	e007      	b.n	8005c60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800

08005c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d020      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01b      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0202 	mvn.w	r2, #2
 8005cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f998 	bl	8005ff8 <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f98b 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f99a 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d020      	beq.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0204 	mvn.w	r2, #4
 8005cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f972 	bl	8005ff8 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f965 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f974 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0208 	mvn.w	r2, #8
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f94c 	bl	8005ff8 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f93f 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f94e 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d020      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0210 	mvn.w	r2, #16
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2208      	movs	r2, #8
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f926 	bl	8005ff8 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f919 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f928 	bl	800600a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00c      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0201 	mvn.w	r2, #1
 8005ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb fcd0 	bl	8001784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa7f 	bl	8006306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00c      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8f8 	bl	800601c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0220 	mvn.w	r2, #32
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa52 	bl	80062f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e0b4      	b.n	8005fde <HAL_TIM_ConfigClockSource+0x186>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eac:	d03e      	beq.n	8005f2c <HAL_TIM_ConfigClockSource+0xd4>
 8005eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb2:	f200 8087 	bhi.w	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eba:	f000 8086 	beq.w	8005fca <HAL_TIM_ConfigClockSource+0x172>
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec2:	d87f      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b70      	cmp	r3, #112	@ 0x70
 8005ec6:	d01a      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0xa6>
 8005ec8:	2b70      	cmp	r3, #112	@ 0x70
 8005eca:	d87b      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b60      	cmp	r3, #96	@ 0x60
 8005ece:	d050      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x11a>
 8005ed0:	2b60      	cmp	r3, #96	@ 0x60
 8005ed2:	d877      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b50      	cmp	r3, #80	@ 0x50
 8005ed6:	d03c      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0xfa>
 8005ed8:	2b50      	cmp	r3, #80	@ 0x50
 8005eda:	d873      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b40      	cmp	r3, #64	@ 0x40
 8005ede:	d058      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x13a>
 8005ee0:	2b40      	cmp	r3, #64	@ 0x40
 8005ee2:	d86f      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b30      	cmp	r3, #48	@ 0x30
 8005ee6:	d064      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ee8:	2b30      	cmp	r3, #48	@ 0x30
 8005eea:	d86b      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d060      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d867      	bhi.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d05c      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d05a      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8005efc:	e062      	b.n	8005fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	f000 f974 	bl	80061fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	609a      	str	r2, [r3, #8]
      break;
 8005f2a:	e04f      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	f000 f95d 	bl	80061fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f4e:	609a      	str	r2, [r3, #8]
      break;
 8005f50:	e03c      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 f8d4 	bl	800610c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2150      	movs	r1, #80	@ 0x50
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f92b 	bl	80061c6 <TIM_ITRx_SetConfig>
      break;
 8005f70:	e02c      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 f8f2 	bl	8006168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2160      	movs	r1, #96	@ 0x60
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 f91b 	bl	80061c6 <TIM_ITRx_SetConfig>
      break;
 8005f90:	e01c      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f000 f8b4 	bl	800610c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2140      	movs	r1, #64	@ 0x40
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f90b 	bl	80061c6 <TIM_ITRx_SetConfig>
      break;
 8005fb0:	e00c      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f000 f902 	bl	80061c6 <TIM_ITRx_SetConfig>
      break;
 8005fc2:	e003      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc8:	e000      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr

0800600a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
	...

08006030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a2f      	ldr	r2, [pc, #188]	@ (8006100 <TIM_Base_SetConfig+0xd0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00b      	beq.n	8006060 <TIM_Base_SetConfig+0x30>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0x30>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a2c      	ldr	r2, [pc, #176]	@ (8006104 <TIM_Base_SetConfig+0xd4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0x30>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a2b      	ldr	r2, [pc, #172]	@ (8006108 <TIM_Base_SetConfig+0xd8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a22      	ldr	r2, [pc, #136]	@ (8006100 <TIM_Base_SetConfig+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_Base_SetConfig+0x62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006080:	d007      	beq.n	8006092 <TIM_Base_SetConfig+0x62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <TIM_Base_SetConfig+0xd4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_Base_SetConfig+0x62>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1e      	ldr	r2, [pc, #120]	@ (8006108 <TIM_Base_SetConfig+0xd8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006100 <TIM_Base_SetConfig+0xd0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d103      	bne.n	80060d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	611a      	str	r2, [r3, #16]
  }
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800

0800610c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 030a 	bic.w	r3, r3, #10
 8006148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0210 	bic.w	r2, r3, #16
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	031b      	lsls	r3, r3, #12
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	621a      	str	r2, [r3, #32]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f043 0307 	orr.w	r3, r3, #7
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	609a      	str	r2, [r3, #8]
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	021a      	lsls	r2, r3, #8
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	431a      	orrs	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4313      	orrs	r3, r2
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	609a      	str	r2, [r3, #8]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e046      	b.n	80062de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a16      	ldr	r2, [pc, #88]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629c:	d009      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a12      	ldr	r2, [pc, #72]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a10      	ldr	r2, [pc, #64]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10c      	bne.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800

080062f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <memset>:
 8006318:	4603      	mov	r3, r0
 800631a:	4402      	add	r2, r0
 800631c:	4293      	cmp	r3, r2
 800631e:	d100      	bne.n	8006322 <memset+0xa>
 8006320:	4770      	bx	lr
 8006322:	f803 1b01 	strb.w	r1, [r3], #1
 8006326:	e7f9      	b.n	800631c <memset+0x4>

08006328 <__errno>:
 8006328:	4b01      	ldr	r3, [pc, #4]	@ (8006330 <__errno+0x8>)
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000014 	.word	0x20000014

08006334 <__libc_init_array>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	2600      	movs	r6, #0
 8006338:	4d0c      	ldr	r5, [pc, #48]	@ (800636c <__libc_init_array+0x38>)
 800633a:	4c0d      	ldr	r4, [pc, #52]	@ (8006370 <__libc_init_array+0x3c>)
 800633c:	1b64      	subs	r4, r4, r5
 800633e:	10a4      	asrs	r4, r4, #2
 8006340:	42a6      	cmp	r6, r4
 8006342:	d109      	bne.n	8006358 <__libc_init_array+0x24>
 8006344:	f000 f8b2 	bl	80064ac <_init>
 8006348:	2600      	movs	r6, #0
 800634a:	4d0a      	ldr	r5, [pc, #40]	@ (8006374 <__libc_init_array+0x40>)
 800634c:	4c0a      	ldr	r4, [pc, #40]	@ (8006378 <__libc_init_array+0x44>)
 800634e:	1b64      	subs	r4, r4, r5
 8006350:	10a4      	asrs	r4, r4, #2
 8006352:	42a6      	cmp	r6, r4
 8006354:	d105      	bne.n	8006362 <__libc_init_array+0x2e>
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	f855 3b04 	ldr.w	r3, [r5], #4
 800635c:	4798      	blx	r3
 800635e:	3601      	adds	r6, #1
 8006360:	e7ee      	b.n	8006340 <__libc_init_array+0xc>
 8006362:	f855 3b04 	ldr.w	r3, [r5], #4
 8006366:	4798      	blx	r3
 8006368:	3601      	adds	r6, #1
 800636a:	e7f2      	b.n	8006352 <__libc_init_array+0x1e>
 800636c:	0800664c 	.word	0x0800664c
 8006370:	0800664c 	.word	0x0800664c
 8006374:	0800664c 	.word	0x0800664c
 8006378:	08006650 	.word	0x08006650

0800637c <memcpy>:
 800637c:	440a      	add	r2, r1
 800637e:	4291      	cmp	r1, r2
 8006380:	f100 33ff 	add.w	r3, r0, #4294967295
 8006384:	d100      	bne.n	8006388 <memcpy+0xc>
 8006386:	4770      	bx	lr
 8006388:	b510      	push	{r4, lr}
 800638a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638e:	4291      	cmp	r1, r2
 8006390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006394:	d1f9      	bne.n	800638a <memcpy+0xe>
 8006396:	bd10      	pop	{r4, pc}

08006398 <sqrtf>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	f000 f816 	bl	80063cc <__ieee754_sqrtf>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4604      	mov	r4, r0
 80063a4:	4628      	mov	r0, r5
 80063a6:	f7fa f9a5 	bl	80006f4 <__aeabi_fcmpun>
 80063aa:	b968      	cbnz	r0, 80063c8 <sqrtf+0x30>
 80063ac:	2100      	movs	r1, #0
 80063ae:	4628      	mov	r0, r5
 80063b0:	f7fa f978 	bl	80006a4 <__aeabi_fcmplt>
 80063b4:	b140      	cbz	r0, 80063c8 <sqrtf+0x30>
 80063b6:	f7ff ffb7 	bl	8006328 <__errno>
 80063ba:	2321      	movs	r3, #33	@ 0x21
 80063bc:	2100      	movs	r1, #0
 80063be:	6003      	str	r3, [r0, #0]
 80063c0:	4608      	mov	r0, r1
 80063c2:	f7fa f885 	bl	80004d0 <__aeabi_fdiv>
 80063c6:	4604      	mov	r4, r0
 80063c8:	4620      	mov	r0, r4
 80063ca:	bd38      	pop	{r3, r4, r5, pc}

080063cc <__ieee754_sqrtf>:
 80063cc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80063d0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80063d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d8:	4603      	mov	r3, r0
 80063da:	4604      	mov	r4, r0
 80063dc:	d30a      	bcc.n	80063f4 <__ieee754_sqrtf+0x28>
 80063de:	4601      	mov	r1, r0
 80063e0:	f7f9 ffc2 	bl	8000368 <__aeabi_fmul>
 80063e4:	4601      	mov	r1, r0
 80063e6:	4620      	mov	r0, r4
 80063e8:	f7f9 feb6 	bl	8000158 <__addsf3>
 80063ec:	4604      	mov	r4, r0
 80063ee:	4620      	mov	r0, r4
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f4:	2a00      	cmp	r2, #0
 80063f6:	d0fa      	beq.n	80063ee <__ieee754_sqrtf+0x22>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	da06      	bge.n	800640a <__ieee754_sqrtf+0x3e>
 80063fc:	4601      	mov	r1, r0
 80063fe:	f7f9 fea9 	bl	8000154 <__aeabi_fsub>
 8006402:	4601      	mov	r1, r0
 8006404:	f7fa f864 	bl	80004d0 <__aeabi_fdiv>
 8006408:	e7f0      	b.n	80063ec <__ieee754_sqrtf+0x20>
 800640a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800640e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006412:	d03e      	beq.n	8006492 <__ieee754_sqrtf+0xc6>
 8006414:	2400      	movs	r4, #0
 8006416:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800641a:	07ca      	lsls	r2, r1, #31
 800641c:	f04f 0019 	mov.w	r0, #25
 8006420:	4626      	mov	r6, r4
 8006422:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006426:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800642a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800642e:	bf58      	it	pl
 8006430:	005b      	lslpl	r3, r3, #1
 8006432:	106d      	asrs	r5, r5, #1
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	1872      	adds	r2, r6, r1
 8006438:	429a      	cmp	r2, r3
 800643a:	bfcf      	iteee	gt
 800643c:	461a      	movgt	r2, r3
 800643e:	1856      	addle	r6, r2, r1
 8006440:	1864      	addle	r4, r4, r1
 8006442:	1a9a      	suble	r2, r3, r2
 8006444:	3801      	subs	r0, #1
 8006446:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800644a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800644e:	d1f2      	bne.n	8006436 <__ieee754_sqrtf+0x6a>
 8006450:	b1ba      	cbz	r2, 8006482 <__ieee754_sqrtf+0xb6>
 8006452:	4e14      	ldr	r6, [pc, #80]	@ (80064a4 <__ieee754_sqrtf+0xd8>)
 8006454:	4f14      	ldr	r7, [pc, #80]	@ (80064a8 <__ieee754_sqrtf+0xdc>)
 8006456:	6830      	ldr	r0, [r6, #0]
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	f7f9 fe7b 	bl	8000154 <__aeabi_fsub>
 800645e:	f8d6 8000 	ldr.w	r8, [r6]
 8006462:	4601      	mov	r1, r0
 8006464:	4640      	mov	r0, r8
 8006466:	f7fa f927 	bl	80006b8 <__aeabi_fcmple>
 800646a:	b150      	cbz	r0, 8006482 <__ieee754_sqrtf+0xb6>
 800646c:	6830      	ldr	r0, [r6, #0]
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	f7f9 fe72 	bl	8000158 <__addsf3>
 8006474:	6836      	ldr	r6, [r6, #0]
 8006476:	4601      	mov	r1, r0
 8006478:	4630      	mov	r0, r6
 800647a:	f7fa f913 	bl	80006a4 <__aeabi_fcmplt>
 800647e:	b168      	cbz	r0, 800649c <__ieee754_sqrtf+0xd0>
 8006480:	3402      	adds	r4, #2
 8006482:	1064      	asrs	r4, r4, #1
 8006484:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006488:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800648c:	e7af      	b.n	80063ee <__ieee754_sqrtf+0x22>
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	3201      	adds	r2, #1
 8006492:	0218      	lsls	r0, r3, #8
 8006494:	d5fb      	bpl.n	800648e <__ieee754_sqrtf+0xc2>
 8006496:	3a01      	subs	r2, #1
 8006498:	1a89      	subs	r1, r1, r2
 800649a:	e7bb      	b.n	8006414 <__ieee754_sqrtf+0x48>
 800649c:	3401      	adds	r4, #1
 800649e:	f024 0401 	bic.w	r4, r4, #1
 80064a2:	e7ee      	b.n	8006482 <__ieee754_sqrtf+0xb6>
 80064a4:	20000068 	.word	0x20000068
 80064a8:	20000064 	.word	0x20000064

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
