
Temperature_Board_V6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800747c  0800747c  00020488  2**0
                  CONTENTS
  4 .ARM          00000008  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007484  08007484  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000488  20000000  0800748c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000488  08007914  00020488  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08007914  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a57  00000000  00000000  000204fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f46  00000000  00000000  00039f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001220  00000000  00000000  0003e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023766  00000000  00000000  0003f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aebe  00000000  00000000  00062f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfa7a  00000000  00000000  0007ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006464  00000000  00000000  0015d870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00163cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000488 	.word	0x20000488
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080073e4 	.word	0x080073e4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000048c 	.word	0x2000048c
 80001c8:	080073e4 	.word	0x080073e4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <getI2CAddress>:

#include "functions.h"
#include "constants.h"


uint8_t getI2CAddress(uint8_t address, uint8_t mode){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	// Left shift to retrieve address in i2c format and add R/W flag
	// I2C_ADDR_ERR -> 0xFF
	// I2C_MODE_ERR -> 0xFE

	if (address > 128){
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b80      	cmp	r3, #128	; 0x80
 80004dc:	d901      	bls.n	80004e2 <getI2CAddress+0x1a>
		return I2C_ADDR_ERR;
 80004de:	23ff      	movs	r3, #255	; 0xff
 80004e0:	e00a      	b.n	80004f8 <getI2CAddress+0x30>
	} else {
		if (mode > 2){
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d901      	bls.n	80004ec <getI2CAddress+0x24>
			return I2C_MODE_ERR;
 80004e8:	23fe      	movs	r3, #254	; 0xfe
 80004ea:	e005      	b.n	80004f8 <getI2CAddress+0x30>
		} else {
			return ((address << 1) + mode);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	4413      	add	r3, r2
 80004f6:	b2db      	uxtb	r3, r3
		}
	}
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <scanForI2CDevices>:

void scanForI2CDevices(I2C_HandleTypeDef* hi2c1, uint8_t* ret){
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
	// HAL_OK -> 0
	// HAL_ERROR -> 1
	// HAL_BUSY -> 2
	// HAL_TIMEOUT -> 3

	for (uint8_t i = 0; i < 128; i++){
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e014      	b.n	800053e <scanForI2CDevices+0x3a>
		ret[i] = HAL_I2C_IsDeviceReady(hi2c1, (uint16_t) getI2CAddress(i, I2C_MODE_WRITE), 3, HAL_MAX_DELAY);
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffd5 	bl	80004c8 <getI2CAddress>
 800051e:	4603      	mov	r3, r0
 8000520:	b299      	uxth	r1, r3
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	18d4      	adds	r4, r2, r3
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	2203      	movs	r2, #3
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f004 f8e2 	bl	80046f8 <HAL_I2C_IsDeviceReady>
 8000534:	4603      	mov	r3, r0
 8000536:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < 128; i++){
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3301      	adds	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	dae6      	bge.n	8000514 <scanForI2CDevices+0x10>
	}
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <areDevicesReady>:

bool areDevicesReady(uint8_t* allAddresses){
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	// Returns true if all devices with address in allAddresses array are ready

	uint8_t I2CDevices[I2C_DEVICE_NUMBER] = {ADC1_ADDR, ADC2_ADDR};
 8000558:	f244 5340 	movw	r3, #17728	; 0x4540
 800055c:	81bb      	strh	r3, [r7, #12]
	bool allDevicesOk = true;
 800055e:	2301      	movs	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < I2C_DEVICE_NUMBER; i++){
 8000562:	2300      	movs	r3, #0
 8000564:	73bb      	strb	r3, [r7, #14]
 8000566:	e00f      	b.n	8000588 <areDevicesReady+0x38>
		if (allAddresses[I2CDevices[i]] != HAL_OK){
 8000568:	7bbb      	ldrb	r3, [r7, #14]
 800056a:	3310      	adds	r3, #16
 800056c:	443b      	add	r3, r7
 800056e:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <areDevicesReady+0x32>
			allDevicesOk = false;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < I2C_DEVICE_NUMBER; i++){
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	3301      	adds	r3, #1
 8000586:	73bb      	strb	r3, [r7, #14]
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d9ec      	bls.n	8000568 <areDevicesReady+0x18>
		}
	}
	return allDevicesOk;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <ADCSoftwareReset>:

uint8_t ADCSoftwareReset(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber){
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	// I2C_ADC_TRANSMIT_ERROR -> 0x03
	// I2C_ADC_WRONG_ADDRESS -> 0x02
	// I2C_ADC_WRONG_NUMBER -> 0x01

	// Return error if ADC number is not 1 or 2
	if (!((adcNumber == 1) || (adcNumber == 2))){
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d004      	beq.n	80005b8 <ADCSoftwareReset+0x1c>
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d001      	beq.n	80005b8 <ADCSoftwareReset+0x1c>
		return I2C_ADC_WRONG_NUMBER;
 80005b4:	2301      	movs	r3, #1
 80005b6:	e030      	b.n	800061a <ADCSoftwareReset+0x7e>
	}
	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d10a      	bne.n	80005d4 <ADCSoftwareReset+0x38>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 80005be:	2100      	movs	r1, #0
 80005c0:	2040      	movs	r0, #64	; 0x40
 80005c2:	f7ff ff81 	bl	80004c8 <getI2CAddress>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d10c      	bne.n	80005ea <ADCSoftwareReset+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 80005d0:	2302      	movs	r3, #2
 80005d2:	e022      	b.n	800061a <ADCSoftwareReset+0x7e>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 80005d4:	2100      	movs	r1, #0
 80005d6:	2045      	movs	r0, #69	; 0x45
 80005d8:	f7ff ff76 	bl	80004c8 <getI2CAddress>
 80005dc:	4603      	mov	r3, r0
 80005de:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d101      	bne.n	80005ea <ADCSoftwareReset+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 80005e6:	2302      	movs	r3, #2
 80005e8:	e017      	b.n	800061a <ADCSoftwareReset+0x7e>
		}
	}
	//Send reset command to ADC and in case of error retrieve the relative flag
	uint8_t addr = I2C_ADC_RESET_COMMAND;
 80005ea:	2306      	movs	r3, #6
 80005ec:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, &addr, 1, HAL_MAX_DELAY);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	b299      	uxth	r1, r3
 80005f2:	f107 020d 	add.w	r2, r7, #13
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f003 fe90 	bl	8004324 <HAL_I2C_Master_Transmit>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <ADCSoftwareReset+0x76>
		return I2C_ADC_TRANSMIT_ERROR;
 800060e:	2303      	movs	r3, #3
 8000610:	e003      	b.n	800061a <ADCSoftwareReset+0x7e>
	} else {
		HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f001 fe94 	bl	8002340 <HAL_Delay>
		return I2C_ADC_OK;
 8000618:	2300      	movs	r3, #0
	}
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <ADCStartSyncCommand>:

uint8_t ADCStartSyncCommand(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber){
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af02      	add	r7, sp, #8
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	460b      	mov	r3, r1
 800062c:	70fb      	strb	r3, [r7, #3]
	// I2C_ADC_TRANSMIT_ERROR -> 0x03
	// I2C_ADC_WRONG_ADDRESS -> 0x02
	// I2C_ADC_WRONG_NUMBER -> 0x01

	// Return error if ADC number is not 1 or 2
	if (!((adcNumber == 1) || (adcNumber == 2))){
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d004      	beq.n	800063e <ADCStartSyncCommand+0x1c>
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d001      	beq.n	800063e <ADCStartSyncCommand+0x1c>
		return I2C_ADC_WRONG_NUMBER;
 800063a:	2301      	movs	r3, #1
 800063c:	e02d      	b.n	800069a <ADCStartSyncCommand+0x78>
	}
	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10a      	bne.n	800065a <ADCStartSyncCommand+0x38>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 8000644:	2100      	movs	r1, #0
 8000646:	2040      	movs	r0, #64	; 0x40
 8000648:	f7ff ff3e 	bl	80004c8 <getI2CAddress>
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	d10c      	bne.n	8000670 <ADCStartSyncCommand+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 8000656:	2302      	movs	r3, #2
 8000658:	e01f      	b.n	800069a <ADCStartSyncCommand+0x78>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 800065a:	2100      	movs	r1, #0
 800065c:	2045      	movs	r0, #69	; 0x45
 800065e:	f7ff ff33 	bl	80004c8 <getI2CAddress>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2bff      	cmp	r3, #255	; 0xff
 800066a:	d101      	bne.n	8000670 <ADCStartSyncCommand+0x4e>
			return I2C_ADC_WRONG_ADDRESS;
 800066c:	2302      	movs	r3, #2
 800066e:	e014      	b.n	800069a <ADCStartSyncCommand+0x78>
		}
	}
	//Send reset command to ADC and in case of error retrieve the relative flag
	uint8_t addr = I2C_ADC_START_SYNC_COMMAND;
 8000670:	2308      	movs	r3, #8
 8000672:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, &addr, 1, HAL_MAX_DELAY);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	b299      	uxth	r1, r3
 8000678:	f107 020d 	add.w	r2, r7, #13
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f003 fe4d 	bl	8004324 <HAL_I2C_Master_Transmit>
 800068a:	4603      	mov	r3, r0
 800068c:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <ADCStartSyncCommand+0x76>
		return I2C_ADC_TRANSMIT_ERROR;
 8000694:	2303      	movs	r3, #3
 8000696:	e000      	b.n	800069a <ADCStartSyncCommand+0x78>
	} else {
		return I2C_ADC_OK;
 8000698:	2300      	movs	r3, #0
	}
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <ADCGetRegistersValue>:

uint8_t ADCGetRegistersValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, uint8_t regNumber, int16_t* regValue){
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b088      	sub	sp, #32
 80006a6:	af02      	add	r7, sp, #8
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	72fb      	strb	r3, [r7, #11]
 80006b0:	4613      	mov	r3, r2
 80006b2:	72bb      	strb	r3, [r7, #10]
	// I2C_ADC_WRONG_NUMBER -> 0x01
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	if (!((adcNumber == 1) || (adcNumber == 2))){
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d008      	beq.n	80006cc <ADCGetRegistersValue+0x2a>
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d005      	beq.n	80006cc <ADCGetRegistersValue+0x2a>
		*regValue = I2C_ADC_REG_ERROR;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c6:	801a      	strh	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e072      	b.n	80007b2 <ADCGetRegistersValue+0x110>
	}
	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddressTransmit, adcAddressReceive;
	if (adcNumber == 1){
 80006cc:	7afb      	ldrb	r3, [r7, #11]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d117      	bne.n	8000702 <ADCGetRegistersValue+0x60>
		adcAddressTransmit = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 80006d2:	2100      	movs	r1, #0
 80006d4:	2040      	movs	r0, #64	; 0x40
 80006d6:	f7ff fef7 	bl	80004c8 <getI2CAddress>
 80006da:	4603      	mov	r3, r0
 80006dc:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC1_ADDR, I2C_MODE_READ);
 80006de:	2101      	movs	r1, #1
 80006e0:	2040      	movs	r0, #64	; 0x40
 80006e2:	f7ff fef1 	bl	80004c8 <getI2CAddress>
 80006e6:	4603      	mov	r3, r0
 80006e8:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
 80006ec:	2bff      	cmp	r3, #255	; 0xff
 80006ee:	d002      	beq.n	80006f6 <ADCGetRegistersValue+0x54>
 80006f0:	7dbb      	ldrb	r3, [r7, #22]
 80006f2:	2bff      	cmp	r3, #255	; 0xff
 80006f4:	d11d      	bne.n	8000732 <ADCGetRegistersValue+0x90>
			*regValue = I2C_ADC_REG_ERROR;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fc:	801a      	strh	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 80006fe:	2302      	movs	r3, #2
 8000700:	e057      	b.n	80007b2 <ADCGetRegistersValue+0x110>
		}
	} else {
		adcAddressTransmit = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 8000702:	2100      	movs	r1, #0
 8000704:	2045      	movs	r0, #69	; 0x45
 8000706:	f7ff fedf 	bl	80004c8 <getI2CAddress>
 800070a:	4603      	mov	r3, r0
 800070c:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC2_ADDR, I2C_MODE_READ);
 800070e:	2101      	movs	r1, #1
 8000710:	2045      	movs	r0, #69	; 0x45
 8000712:	f7ff fed9 	bl	80004c8 <getI2CAddress>
 8000716:	4603      	mov	r3, r0
 8000718:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	2bff      	cmp	r3, #255	; 0xff
 800071e:	d002      	beq.n	8000726 <ADCGetRegistersValue+0x84>
 8000720:	7dbb      	ldrb	r3, [r7, #22]
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d105      	bne.n	8000732 <ADCGetRegistersValue+0x90>
			*regValue = I2C_ADC_REG_ERROR;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072c:	801a      	strh	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 800072e:	2302      	movs	r3, #2
 8000730:	e03f      	b.n	80007b2 <ADCGetRegistersValue+0x110>
		}
	}

	// Check register
	if (regNumber > 3){
 8000732:	7abb      	ldrb	r3, [r7, #10]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d905      	bls.n	8000744 <ADCGetRegistersValue+0xa2>
		*regValue = I2C_ADC_REG_ERROR;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	801a      	strh	r2, [r3, #0]
		return I2C_ADC_REG_NUMBER_ERROR;
 8000740:	2305      	movs	r3, #5
 8000742:	e036      	b.n	80007b2 <ADCGetRegistersValue+0x110>
	}

	// Send the command byte
	uint8_t regCommand = ((I2C_ADC_READ_REGISTER_COMMAND << 4) | (regNumber << 2));
 8000744:	7abb      	ldrb	r3, [r7, #10]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	b25b      	sxtb	r3, r3
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	b25b      	sxtb	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	753b      	strb	r3, [r7, #20]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddressTransmit, &regCommand, 1, HAL_MAX_DELAY);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	b299      	uxth	r1, r3
 8000758:	f107 0214 	add.w	r2, r7, #20
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f003 fddd 	bl	8004324 <HAL_I2C_Master_Transmit>
 800076a:	4603      	mov	r3, r0
 800076c:	757b      	strb	r3, [r7, #21]
	if (ret != HAL_OK){
 800076e:	7d7b      	ldrb	r3, [r7, #21]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d005      	beq.n	8000780 <ADCGetRegistersValue+0xde>
		*regValue = I2C_ADC_REG_ERROR;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077a:	801a      	strh	r2, [r3, #0]
		return I2C_ADC_TRANSMIT_ERROR;
 800077c:	2303      	movs	r3, #3
 800077e:	e018      	b.n	80007b2 <ADCGetRegistersValue+0x110>
	} else {
		HAL_Delay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f001 fddd 	bl	8002340 <HAL_Delay>
		ret = HAL_I2C_Master_Receive(hi2c1, (uint16_t) (adcAddressReceive), (uint8_t*) regValue, 1, HAL_MAX_DELAY);
 8000786:	7dbb      	ldrb	r3, [r7, #22]
 8000788:	b299      	uxth	r1, r3
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f003 feb9 	bl	800450c <HAL_I2C_Master_Receive>
 800079a:	4603      	mov	r3, r0
 800079c:	757b      	strb	r3, [r7, #21]
		if (ret != HAL_OK){
 800079e:	7d7b      	ldrb	r3, [r7, #21]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <ADCGetRegistersValue+0x10e>
			*regValue = I2C_ADC_REG_ERROR;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007aa:	801a      	strh	r2, [r3, #0]
			return I2C_ADC_RECEIVE_ERROR;
 80007ac:	2304      	movs	r3, #4
 80007ae:	e000      	b.n	80007b2 <ADCGetRegistersValue+0x110>
		} else {
			return I2C_ADC_OK;
 80007b0:	2300      	movs	r3, #0
		}

	}
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <ADCSetRegistersValue>:

uint8_t ADCSetRegistersValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, uint8_t regNumber, uint8_t regValue){
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af02      	add	r7, sp, #8
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	4608      	mov	r0, r1
 80007c4:	4611      	mov	r1, r2
 80007c6:	461a      	mov	r2, r3
 80007c8:	4603      	mov	r3, r0
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70bb      	strb	r3, [r7, #2]
 80007d0:	4613      	mov	r3, r2
 80007d2:	707b      	strb	r3, [r7, #1]
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	// Check adc number
	if (!((adcNumber == 1) || (adcNumber == 2))){
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d004      	beq.n	80007e4 <ADCSetRegistersValue+0x2a>
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d001      	beq.n	80007e4 <ADCSetRegistersValue+0x2a>
		return I2C_ADC_WRONG_NUMBER;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e03c      	b.n	800085e <ADCSetRegistersValue+0xa4>
	}


	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddress;
	if (adcNumber == 1){
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10a      	bne.n	8000800 <ADCSetRegistersValue+0x46>
		adcAddress = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2040      	movs	r0, #64	; 0x40
 80007ee:	f7ff fe6b 	bl	80004c8 <getI2CAddress>
 80007f2:	4603      	mov	r3, r0
 80007f4:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2bff      	cmp	r3, #255	; 0xff
 80007fa:	d10c      	bne.n	8000816 <ADCSetRegistersValue+0x5c>
			return I2C_ADC_WRONG_ADDRESS;
 80007fc:	2302      	movs	r3, #2
 80007fe:	e02e      	b.n	800085e <ADCSetRegistersValue+0xa4>
		}
	} else {
		adcAddress = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 8000800:	2100      	movs	r1, #0
 8000802:	2045      	movs	r0, #69	; 0x45
 8000804:	f7ff fe60 	bl	80004c8 <getI2CAddress>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
		if (adcAddress == I2C_ADDR_ERR){
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	d101      	bne.n	8000816 <ADCSetRegistersValue+0x5c>
			return I2C_ADC_WRONG_ADDRESS;
 8000812:	2302      	movs	r3, #2
 8000814:	e023      	b.n	800085e <ADCSetRegistersValue+0xa4>
		}
	}

	// Check register
	if (regNumber > 3){
 8000816:	78bb      	ldrb	r3, [r7, #2]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d901      	bls.n	8000820 <ADCSetRegistersValue+0x66>
		return I2C_ADC_REG_NUMBER_ERROR;
 800081c:	2305      	movs	r3, #5
 800081e:	e01e      	b.n	800085e <ADCSetRegistersValue+0xa4>
	}

	// Send the command bytes (0100 rrxx dddd dddd)
	uint8_t regCommand[2] = {0};
 8000820:	2300      	movs	r3, #0
 8000822:	81bb      	strh	r3, [r7, #12]
	regCommand[0] = ((I2C_ADC_WRITE_REGISTER_COMMAND << 4) | (regNumber << 2));
 8000824:	78bb      	ldrb	r3, [r7, #2]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	b25b      	sxtb	r3, r3
 800082a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082e:	b25b      	sxtb	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	733b      	strb	r3, [r7, #12]
	regCommand[1] = regValue;
 8000834:	787b      	ldrb	r3, [r7, #1]
 8000836:	737b      	strb	r3, [r7, #13]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddress, regCommand, 2, HAL_MAX_DELAY);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	b299      	uxth	r1, r3
 800083c:	f107 020c 	add.w	r2, r7, #12
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f003 fd6b 	bl	8004324 <HAL_I2C_Master_Transmit>
 800084e:	4603      	mov	r3, r0
 8000850:	73bb      	strb	r3, [r7, #14]
	if (ret != HAL_OK){
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <ADCSetRegistersValue+0xa2>
		return I2C_ADC_TRANSMIT_ERROR;
 8000858:	2303      	movs	r3, #3
 800085a:	e000      	b.n	800085e <ADCSetRegistersValue+0xa4>
	} else {
		return I2C_ADC_OK;
 800085c:	2300      	movs	r3, #0
	}
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <ADCGetDataValue>:

uint8_t ADCGetDataValue(I2C_HandleTypeDef* hi2c1, uint8_t adcNumber, int32_t* dataValue, uint8_t dataType){
 8000866:	b580      	push	{r7, lr}
 8000868:	b088      	sub	sp, #32
 800086a:	af02      	add	r7, sp, #8
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	461a      	mov	r2, r3
 8000872:	460b      	mov	r3, r1
 8000874:	72fb      	strb	r3, [r7, #11]
 8000876:	4613      	mov	r3, r2
 8000878:	72bb      	strb	r3, [r7, #10]
	// I2C_ADC_WRONG_NUMBER -> 0x01
	// I2C_ADC_RECEIVE_ERROR -> 0x04
	// I2C_ADC_REG_NUMBER_ERROR -> 0x05


	if (!((adcNumber == 1) || (adcNumber == 2))){
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d008      	beq.n	8000892 <ADCGetDataValue+0x2c>
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d005      	beq.n	8000892 <ADCGetDataValue+0x2c>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f06f 0201 	mvn.w	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 800088e:	2301      	movs	r3, #1
 8000890:	e082      	b.n	8000998 <ADCGetDataValue+0x132>
	}

	if (!((dataType == I2C_ADC_DATA_TEMP) || (dataType == I2C_ADC_DATA_VOLT))){
 8000892:	7abb      	ldrb	r3, [r7, #10]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d008      	beq.n	80008aa <ADCGetDataValue+0x44>
 8000898:	7abb      	ldrb	r3, [r7, #10]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d005      	beq.n	80008aa <ADCGetDataValue+0x44>
		*dataValue = I2C_ADC_DATA_ERROR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f06f 0201 	mvn.w	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_DATA;
 80008a6:	2306      	movs	r3, #6
 80008a8:	e076      	b.n	8000998 <ADCGetDataValue+0x132>
	}


	// Get address of relative ADC and in case of error retrieve an error flag
	uint8_t adcAddressTransmit, adcAddressReceive;
	if (adcNumber == 1){
 80008aa:	7afb      	ldrb	r3, [r7, #11]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d117      	bne.n	80008e0 <ADCGetDataValue+0x7a>
		adcAddressTransmit = getI2CAddress(ADC1_ADDR, I2C_MODE_WRITE);
 80008b0:	2100      	movs	r1, #0
 80008b2:	2040      	movs	r0, #64	; 0x40
 80008b4:	f7ff fe08 	bl	80004c8 <getI2CAddress>
 80008b8:	4603      	mov	r3, r0
 80008ba:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC1_ADDR, I2C_MODE_READ);
 80008bc:	2101      	movs	r1, #1
 80008be:	2040      	movs	r0, #64	; 0x40
 80008c0:	f7ff fe02 	bl	80004c8 <getI2CAddress>
 80008c4:	4603      	mov	r3, r0
 80008c6:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d002      	beq.n	80008d4 <ADCGetDataValue+0x6e>
 80008ce:	7dbb      	ldrb	r3, [r7, #22]
 80008d0:	2bff      	cmp	r3, #255	; 0xff
 80008d2:	d11d      	bne.n	8000910 <ADCGetDataValue+0xaa>
			*dataValue = I2C_ADC_DATA_ERROR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f06f 0201 	mvn.w	r2, #1
 80008da:	601a      	str	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 80008dc:	2302      	movs	r3, #2
 80008de:	e05b      	b.n	8000998 <ADCGetDataValue+0x132>
		}
	} else {
		adcAddressTransmit = getI2CAddress(ADC2_ADDR, I2C_MODE_WRITE);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2045      	movs	r0, #69	; 0x45
 80008e4:	f7ff fdf0 	bl	80004c8 <getI2CAddress>
 80008e8:	4603      	mov	r3, r0
 80008ea:	75fb      	strb	r3, [r7, #23]
		adcAddressReceive = getI2CAddress(ADC2_ADDR, I2C_MODE_READ);
 80008ec:	2101      	movs	r1, #1
 80008ee:	2045      	movs	r0, #69	; 0x45
 80008f0:	f7ff fdea 	bl	80004c8 <getI2CAddress>
 80008f4:	4603      	mov	r3, r0
 80008f6:	75bb      	strb	r3, [r7, #22]
		if ((adcAddressTransmit == I2C_ADDR_ERR) || (adcAddressReceive == I2C_ADDR_ERR)){
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	2bff      	cmp	r3, #255	; 0xff
 80008fc:	d002      	beq.n	8000904 <ADCGetDataValue+0x9e>
 80008fe:	7dbb      	ldrb	r3, [r7, #22]
 8000900:	2bff      	cmp	r3, #255	; 0xff
 8000902:	d105      	bne.n	8000910 <ADCGetDataValue+0xaa>
			*dataValue = I2C_ADC_DATA_ERROR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f06f 0201 	mvn.w	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
			return I2C_ADC_WRONG_ADDRESS;
 800090c:	2302      	movs	r3, #2
 800090e:	e043      	b.n	8000998 <ADCGetDataValue+0x132>
		}
	}

	// Send the command byte
	uint8_t addr = I2C_ADC_READ_DATA_COMMAND;
 8000910:	2310      	movs	r3, #16
 8000912:	753b      	strb	r3, [r7, #20]
	uint8_t ret = HAL_I2C_Master_Transmit(hi2c1, (uint16_t) adcAddressTransmit, &addr, 1, HAL_MAX_DELAY);
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	b299      	uxth	r1, r3
 8000918:	f107 0214 	add.w	r2, r7, #20
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2301      	movs	r3, #1
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f003 fcfd 	bl	8004324 <HAL_I2C_Master_Transmit>
 800092a:	4603      	mov	r3, r0
 800092c:	757b      	strb	r3, [r7, #21]
	if (ret != HAL_OK){
 800092e:	7d7b      	ldrb	r3, [r7, #21]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <ADCGetDataValue+0xda>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f06f 0201 	mvn.w	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
		return I2C_ADC_TRANSMIT_ERROR;
 800093c:	2303      	movs	r3, #3
 800093e:	e02b      	b.n	8000998 <ADCGetDataValue+0x132>
	} else {
		uint8_t data[2] = {0x00, 0x00};
 8000940:	2300      	movs	r3, #0
 8000942:	823b      	strh	r3, [r7, #16]
		ret = HAL_I2C_Master_Receive(hi2c1, (uint16_t) (adcAddressReceive), data, 2, HAL_MAX_DELAY);
 8000944:	7dbb      	ldrb	r3, [r7, #22]
 8000946:	b299      	uxth	r1, r3
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2302      	movs	r3, #2
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f003 fdd9 	bl	800450c <HAL_I2C_Master_Receive>
 800095a:	4603      	mov	r3, r0
 800095c:	757b      	strb	r3, [r7, #21]
		if (ret != HAL_OK){
 800095e:	7d7b      	ldrb	r3, [r7, #21]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d005      	beq.n	8000970 <ADCGetDataValue+0x10a>
			*dataValue = I2C_ADC_DATA_ERROR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f06f 0201 	mvn.w	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
			return I2C_ADC_RECEIVE_ERROR;
 800096c:	2304      	movs	r3, #4
 800096e:	e013      	b.n	8000998 <ADCGetDataValue+0x132>
		} else {
			// Return 16 bit voltage or 14-bit temperature (left shifted)
			if (dataType == I2C_ADC_DATA_TEMP){
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d109      	bne.n	800098a <ADCGetDataValue+0x124>
				*dataValue = ((data[0] >> 2) << 8) | (data[1]);
 8000976:	7c3b      	ldrb	r3, [r7, #16]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	7c7a      	ldrb	r2, [r7, #17]
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e006      	b.n	8000998 <ADCGetDataValue+0x132>
			} else {
				*dataValue = data[0] << 8 | data[1];
 800098a:	7c3b      	ldrb	r3, [r7, #16]
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	7c7a      	ldrb	r2, [r7, #17]
 8000990:	431a      	orrs	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
				return I2C_ADC_OK;
 8000996:	2300      	movs	r3, #0
			}
		}
	}
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <setLEDColor>:

void setLEDColor(uint8_t ledColor){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	switch (ledColor){
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d068      	beq.n	8000a82 <setLEDColor+0xe2>
 80009b0:	2bff      	cmp	r3, #255	; 0xff
 80009b2:	f300 808e 	bgt.w	8000ad2 <setLEDColor+0x132>
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	dc10      	bgt.n	80009dc <setLEDColor+0x3c>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f2c0 8089 	blt.w	8000ad2 <setLEDColor+0x132>
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	f200 8086 	bhi.w	8000ad2 <setLEDColor+0x132>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <setLEDColor+0x2c>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009e3 	.word	0x080009e3
 80009d0:	08000a33 	.word	0x08000a33
 80009d4:	08000a0b 	.word	0x08000a0b
 80009d8:	08000a5b 	.word	0x08000a5b
 80009dc:	2bfe      	cmp	r3, #254	; 0xfe
 80009de:	d064      	beq.n	8000aaa <setLEDColor+0x10a>
 80009e0:	e077      	b.n	8000ad2 <setLEDColor+0x132>
		case LED_RGB_RED:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f003 fbb6 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2102      	movs	r1, #2
 80009f4:	4842      	ldr	r0, [pc, #264]	; (8000b00 <setLEDColor+0x160>)
 80009f6:	f003 fbb1 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f003 fbaa 	bl	800415c <HAL_GPIO_WritePin>
			return;
 8000a08:	e076      	b.n	8000af8 <setLEDColor+0x158>
		case LED_RGB_BLUE:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f003 fba2 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4838      	ldr	r0, [pc, #224]	; (8000b00 <setLEDColor+0x160>)
 8000a1e:	f003 fb9d 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f003 fb96 	bl	800415c <HAL_GPIO_WritePin>
			return;
 8000a30:	e062      	b.n	8000af8 <setLEDColor+0x158>
		case LED_RGB_GREEN:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f003 fb8e 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	482e      	ldr	r0, [pc, #184]	; (8000b00 <setLEDColor+0x160>)
 8000a46:	f003 fb89 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f003 fb82 	bl	800415c <HAL_GPIO_WritePin>
			return;
 8000a58:	e04e      	b.n	8000af8 <setLEDColor+0x158>
		case LED_RGB_GREEN_BLUE:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f003 fb7a 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4824      	ldr	r0, [pc, #144]	; (8000b00 <setLEDColor+0x160>)
 8000a6e:	f003 fb75 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f003 fb6e 	bl	800415c <HAL_GPIO_WritePin>
			return;
 8000a80:	e03a      	b.n	8000af8 <setLEDColor+0x158>
		case LED_RGB_OFF:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f003 fb66 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2102      	movs	r1, #2
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <setLEDColor+0x160>)
 8000a96:	f003 fb61 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f003 fb5a 	bl	800415c <HAL_GPIO_WritePin>
			return;
 8000aa8:	e026      	b.n	8000af8 <setLEDColor+0x158>
		case LED_RGB_ON:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f003 fb52 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2102      	movs	r1, #2
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <setLEDColor+0x160>)
 8000abe:	f003 fb4d 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f003 fb46 	bl	800415c <HAL_GPIO_WritePin>
			return;
 8000ad0:	e012      	b.n	8000af8 <setLEDColor+0x158>
		default:
			HAL_GPIO_WritePin(RGB_LED_R_GPIO_Port, RGB_LED_R_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f003 fb3e 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <setLEDColor+0x160>)
 8000ae6:	f003 fb39 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RGB_LED_B_GPIO_Port, RGB_LED_B_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f003 fb32 	bl	800415c <HAL_GPIO_WritePin>
	}
}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	48000400 	.word	0x48000400

08000b04 <getValueFromVoltageData>:

float getValueFromVoltageData(int32_t data){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	// If data < 0x7FFF i have a negative number else i have a positive one
	// For negative number i have to evaluate the two's complement
	data = (uint16_t) data;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	607b      	str	r3, [r7, #4]
	if (data <= 0x7FFF){
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b18:	da09      	bge.n	8000b2e <getValueFromVoltageData+0x2a>
		return (data * 0.000152587890625f);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	ee07 3a90 	vmov	s15, r3
 8000b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b24:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000b54 <getValueFromVoltageData+0x50>
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	e00b      	b.n	8000b46 <getValueFromVoltageData+0x42>
	} else {
		return ((((~data) + 1) * 0.000152587890625f) * (-1));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	425b      	negs	r3, r3
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000b54 <getValueFromVoltageData+0x50>
 8000b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b42:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 8000b46:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	39200000 	.word	0x39200000

08000b58 <linearInterpolation>:
	} else {
		return ((((~data) + 1) * 0.00025f) * (-1));
	}
}

uint8_t linearInterpolation(float* yValues, uint8_t syValues, float* xValues, uint8_t sxValues, float x, float* res){
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	461a      	mov	r2, r3
 8000b64:	ed87 0a00 	vstr	s0, [r7]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	72fb      	strb	r3, [r7, #11]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	72bb      	strb	r3, [r7, #10]
	// yValues -> Temperature Array
	// xValues -> Voltage Array
	// x       -> Voltage read by the ADC

	// Check if all arrays are the same length
	if (syValues != sxValues){
 8000b70:	7afa      	ldrb	r2, [r7, #11]
 8000b72:	7abb      	ldrb	r3, [r7, #10]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d004      	beq.n	8000b82 <linearInterpolation+0x2a>
		*res = -1.0f;
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	4a42      	ldr	r2, [pc, #264]	; (8000c84 <linearInterpolation+0x12c>)
 8000b7c:	601a      	str	r2, [r3, #0]
		return INT_ERR_LEN_ARRAYS;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e079      	b.n	8000c76 <linearInterpolation+0x11e>
	} else {
		if ((x <= ADC_MIN_VOLTAGE) || (x >= ADC_MAX_VOLTAGE)){
 8000b82:	edd7 7a00 	vldr	s15, [r7]
 8000b86:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000c88 <linearInterpolation+0x130>
 8000b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	d908      	bls.n	8000ba6 <linearInterpolation+0x4e>
 8000b94:	edd7 7a00 	vldr	s15, [r7]
 8000b98:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000c8c <linearInterpolation+0x134>
 8000b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba4:	db04      	blt.n	8000bb0 <linearInterpolation+0x58>
			*res = -1.0f;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <linearInterpolation+0x12c>)
 8000baa:	601a      	str	r2, [r3, #0]
			return INT_ERR_VOLTAGE;
 8000bac:	23ff      	movs	r3, #255	; 0xff
 8000bae:	e062      	b.n	8000c76 <linearInterpolation+0x11e>
		}

		uint8_t index1, index2 = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	75fb      	strb	r3, [r7, #23]
		// index 1 is the index before the target
		// index 2 is the index after the target

		for (uint8_t j = 0; j < sxValues; j++)	{
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	75bb      	strb	r3, [r7, #22]
 8000bb8:	e013      	b.n	8000be2 <linearInterpolation+0x8a>
			// Find the interval between the x value is found
			if (x >= xValues[j]) {
 8000bba:	7dbb      	ldrb	r3, [r7, #22]
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	edd3 7a00 	vldr	s15, [r3]
 8000bc6:	ed97 7a00 	vldr	s14, [r7]
 8000bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	da00      	bge.n	8000bd6 <linearInterpolation+0x7e>
				index2++;
			} else {
				break;
 8000bd4:	e009      	b.n	8000bea <linearInterpolation+0x92>
				index2++;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	75fb      	strb	r3, [r7, #23]
		for (uint8_t j = 0; j < sxValues; j++)	{
 8000bdc:	7dbb      	ldrb	r3, [r7, #22]
 8000bde:	3301      	adds	r3, #1
 8000be0:	75bb      	strb	r3, [r7, #22]
 8000be2:	7dba      	ldrb	r2, [r7, #22]
 8000be4:	7abb      	ldrb	r3, [r7, #10]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3e7      	bcc.n	8000bba <linearInterpolation+0x62>
			}
		}

		// Evaluate indexes
		index1 = index2 - 1;
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	757b      	strb	r3, [r7, #21]

		// Check indexes if are lower than zero or higher than the size of the array
		if (index1 >= 0 && index2 >= 0 && index1 < sxValues && index2 < sxValues){
 8000bf0:	7d7a      	ldrb	r2, [r7, #21]
 8000bf2:	7abb      	ldrb	r3, [r7, #10]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d23a      	bcs.n	8000c6e <linearInterpolation+0x116>
 8000bf8:	7dfa      	ldrb	r2, [r7, #23]
 8000bfa:	7abb      	ldrb	r3, [r7, #10]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d236      	bcs.n	8000c6e <linearInterpolation+0x116>
			*res = yValues[index1] + ((x - xValues[index1])/(xValues[index2] - xValues[index1]))*(yValues[index2] - yValues[index1]);
 8000c00:	7d7b      	ldrb	r3, [r7, #21]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	7d7b      	ldrb	r3, [r7, #21]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	edd7 6a00 	vldr	s13, [r7]
 8000c1c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	edd3 6a00 	vldr	s13, [r3]
 8000c2c:	7d7b      	ldrb	r3, [r7, #21]
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	edd3 7a00 	vldr	s15, [r3]
 8000c38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c3c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	ed93 6a00 	vldr	s12, [r3]
 8000c4c:	7d7b      	ldrb	r3, [r7, #21]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	edc3 7a00 	vstr	s15, [r3]
			return INT_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e003      	b.n	8000c76 <linearInterpolation+0x11e>
		} else {
			*res = -1.0f;
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <linearInterpolation+0x12c>)
 8000c72:	601a      	str	r2, [r3, #0]
			return INT_ERR_INDEX;
 8000c74:	2302      	movs	r3, #2
		}
	}
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	371c      	adds	r7, #28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	bf800000 	.word	0xbf800000
 8000c88:	3dcccccd 	.word	0x3dcccccd
 8000c8c:	409ccccd 	.word	0x409ccccd

08000c90 <getADCChannelVoltage>:
		*dataValue = I2C_ADC_DATA_ERROR;
		return I2C_ADC_WRONG_SETUP;
	}
}

uint8_t getADCChannelVoltage(I2C_HandleTypeDef* hi2c1, TIM_HandleTypeDef* htim1, uint8_t adcNumber, uint8_t dataChannel, float* dataValue, bool* timElapsedFlag){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	71bb      	strb	r3, [r7, #6]
	// I2C_ADC_ERRROR_START_SYNC_CMD -> 0x08
	// I2C_ADC_ERROR_RDATA_CMD -> 0x09
	// I2C_ADC_WRONG_CHANNEL -> 0x10

	// Check ADC number
	if (!((adcNumber == 1) || (adcNumber == 2))){
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d008      	beq.n	8000cbe <getADCChannelVoltage+0x2e>
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d005      	beq.n	8000cbe <getADCChannelVoltage+0x2e>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000cb8:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_NUMBER;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e099      	b.n	8000df2 <getADCChannelVoltage+0x162>
	}

	// Check channel number
	if ((dataChannel < 0) || (dataChannel > 3)){
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d905      	bls.n	8000cd0 <getADCChannelVoltage+0x40>
		*dataValue = I2C_ADC_DATA_ERROR;
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000cca:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_CHANNEL;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	e090      	b.n	8000df2 <getADCChannelVoltage+0x162>
	}

	uint8_t regChannel[4] = {REG_0_CH0, REG_0_CH1, REG_0_CH2, REG_0_CH3};
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <getADCChannelVoltage+0x16c>)
 8000cd2:	61fb      	str	r3, [r7, #28]

	// Check setup is successful
	uint8_t retValues[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	61bb      	str	r3, [r7, #24]
	retValues[0] = ADCSetRegistersValue(hi2c1, adcNumber, 0x00, regChannel[dataChannel]);
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	3320      	adds	r3, #32
 8000cde:	443b      	add	r3, r7
 8000ce0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000ce4:	79f9      	ldrb	r1, [r7, #7]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fd66 	bl	80007ba <ADCSetRegistersValue>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	763b      	strb	r3, [r7, #24]
	retValues[1] = ADCSetRegistersValue(hi2c1, adcNumber, 0x01, REG_1_DEFAULT);
 8000cf2:	79f9      	ldrb	r1, [r7, #7]
 8000cf4:	23d4      	movs	r3, #212	; 0xd4
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff fd5e 	bl	80007ba <ADCSetRegistersValue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	767b      	strb	r3, [r7, #25]
	retValues[2] = ADCSetRegistersValue(hi2c1, adcNumber, 0x02, REG_2_DEFAULT);
 8000d02:	79f9      	ldrb	r1, [r7, #7]
 8000d04:	2300      	movs	r3, #0
 8000d06:	2202      	movs	r2, #2
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fd56 	bl	80007ba <ADCSetRegistersValue>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	76bb      	strb	r3, [r7, #26]
	retValues[3] = ADCSetRegistersValue(hi2c1, adcNumber, 0x03, REG_3_DEFAULT);
 8000d12:	79f9      	ldrb	r1, [r7, #7]
 8000d14:	2300      	movs	r3, #0
 8000d16:	2203      	movs	r2, #3
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff fd4e 	bl	80007ba <ADCSetRegistersValue>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	76fb      	strb	r3, [r7, #27]

	if ((retValues[0] == I2C_ADC_OK) && (retValues[1] == I2C_ADC_OK) && (retValues[2] == I2C_ADC_OK) && (retValues[3] == I2C_ADC_OK)){
 8000d22:	7e3b      	ldrb	r3, [r7, #24]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d15f      	bne.n	8000de8 <getADCChannelVoltage+0x158>
 8000d28:	7e7b      	ldrb	r3, [r7, #25]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d15c      	bne.n	8000de8 <getADCChannelVoltage+0x158>
 8000d2e:	7ebb      	ldrb	r3, [r7, #26]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d159      	bne.n	8000de8 <getADCChannelVoltage+0x158>
 8000d34:	7efb      	ldrb	r3, [r7, #27]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d156      	bne.n	8000de8 <getADCChannelVoltage+0x158>
		if (ADCStartSyncCommand(hi2c1, adcNumber) == I2C_ADC_OK){
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fc6f 	bl	8000622 <ADCStartSyncCommand>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d148      	bne.n	8000ddc <getADCChannelVoltage+0x14c>
			if (adcNumber == 1){
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d112      	bne.n	8000d76 <getADCChannelVoltage+0xe6>
				while (HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) != GPIO_PIN_RESET){
 8000d50:	e009      	b.n	8000d66 <getADCChannelVoltage+0xd6>
					*timElapsedFlag = false;
 8000d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(htim1);
 8000d58:	68b8      	ldr	r0, [r7, #8]
 8000d5a:	f005 fb07 	bl	800636c <HAL_TIM_Base_Start_IT>
					while (timElapsedFlag == false){
 8000d5e:	bf00      	nop
 8000d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0fc      	beq.n	8000d60 <getADCChannelVoltage+0xd0>
				while (HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) != GPIO_PIN_RESET){
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4825      	ldr	r0, [pc, #148]	; (8000e00 <getADCChannelVoltage+0x170>)
 8000d6a:	f003 f9df 	bl	800412c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1ee      	bne.n	8000d52 <getADCChannelVoltage+0xc2>
 8000d74:	e015      	b.n	8000da2 <getADCChannelVoltage+0x112>
					}
				}
			} else if (adcNumber == 2){
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d112      	bne.n	8000da2 <getADCChannelVoltage+0x112>
				while (HAL_GPIO_ReadPin(ADC2_NDRDY_GPIO_Port, ADC2_NDRDY_Pin) != GPIO_PIN_RESET){
 8000d7c:	e009      	b.n	8000d92 <getADCChannelVoltage+0x102>
					*timElapsedFlag = false;
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(htim1);
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f005 faf1 	bl	800636c <HAL_TIM_Base_Start_IT>
					while (timElapsedFlag == false){
 8000d8a:	bf00      	nop
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0fc      	beq.n	8000d8c <getADCChannelVoltage+0xfc>
				while (HAL_GPIO_ReadPin(ADC2_NDRDY_GPIO_Port, ADC2_NDRDY_Pin) != GPIO_PIN_RESET){
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f003 f9c8 	bl	800412c <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1ed      	bne.n	8000d7e <getADCChannelVoltage+0xee>
					}
				}
			}
			int32_t res = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
			if (ADCGetDataValue(hi2c1, adcNumber, &res, I2C_ADC_DATA_VOLT) != I2C_ADC_OK){
 8000da6:	f107 0214 	add.w	r2, r7, #20
 8000daa:	79f9      	ldrb	r1, [r7, #7]
 8000dac:	2301      	movs	r3, #1
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f7ff fd59 	bl	8000866 <ADCGetDataValue>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <getADCChannelVoltage+0x136>
				*dataValue = I2C_ADC_DATA_ERROR;
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000dc0:	601a      	str	r2, [r3, #0]
				return I2C_ADC_ERROR_RDATA_CMD;
 8000dc2:	2309      	movs	r3, #9
 8000dc4:	e015      	b.n	8000df2 <getADCChannelVoltage+0x162>
			} else {
				*dataValue = getValueFromVoltageData(res);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fe9b 	bl	8000b04 <getValueFromVoltageData>
 8000dce:	eef0 7a40 	vmov.f32	s15, s0
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
				return I2C_ADC_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e00a      	b.n	8000df2 <getADCChannelVoltage+0x162>
			}
		} else {
			*dataValue = I2C_ADC_DATA_ERROR;
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000de2:	601a      	str	r2, [r3, #0]
			return I2C_ADC_ERROR_START_SYNC_CMD;
 8000de4:	2308      	movs	r3, #8
 8000de6:	e004      	b.n	8000df2 <getADCChannelVoltage+0x162>
		}
	} else {
		*dataValue = I2C_ADC_DATA_ERROR;
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000dee:	601a      	str	r2, [r3, #0]
		return I2C_ADC_WRONG_SETUP;
 8000df0:	2307      	movs	r3, #7
	}
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	b1a19181 	.word	0xb1a19181
 8000e00:	48000400 	.word	0x48000400

08000e04 <sortTemperatures>:

uint16_t sortTemperatures(uint8_t index, float* temperatures, uint8_t* errors, int scale){
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
	if (errors[index] == TEMP_ERR_OK){
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d112      	bne.n	8000e46 <sortTemperatures+0x42>
		return ((uint16_t) (temperatures[index] * scale));
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	ed93 7a00 	vldr	s14, [r3]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3e:	ee17 3a90 	vmov	r3, s15
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	e013      	b.n	8000e6e <sortTemperatures+0x6a>
	} else {
		if (errors[index] == TEMP_ERR_OV){
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d102      	bne.n	8000e58 <sortTemperatures+0x54>
			return CAN_ERR_OV;
 8000e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e56:	e00a      	b.n	8000e6e <sortTemperatures+0x6a>
		} else if (errors[index] == TEMP_ERR_UV){
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d102      	bne.n	8000e6a <sortTemperatures+0x66>
			return CAN_ERR_UV;
 8000e64:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000e68:	e001      	b.n	8000e6e <sortTemperatures+0x6a>
		} else {
			return CAN_ERR_IGNORE;
 8000e6a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
		}
	}
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b0bb      	sub	sp, #236	; 0xec
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f001 f9e8 	bl	8002256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 fcd1 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 feb1 	bl	8001bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8e:	f000 fe91 	bl	8001bb4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e92:	f000 fdc7 	bl	8001a24 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000e96:	f000 fe5d 	bl	8001b54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e9a:	f000 fd19 	bl	80018d0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000e9e:	f000 fd8b 	bl	80019b8 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000ea2:	f000 fe05 	bl	8001ab0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Start CAN Bus communication
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000ea6:	48ba      	ldr	r0, [pc, #744]	; (8001190 <main+0x314>)
 8000ea8:	f002 fc47 	bl	800373a <HAL_CAN_Start>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <main+0x3a>
		/* Start Error */
		Error_Handler();
 8000eb2:	f000 ff53 	bl	8001d5c <Error_Handler>
	}

	// External ADC Setup
	// Set ADCs in reset mode
	HAL_GPIO_WritePin(ADC1_NRST_GPIO_Port, ADC1_NRST_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	48b6      	ldr	r0, [pc, #728]	; (8001194 <main+0x318>)
 8000ebc:	f003 f94e 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC2_NRST_GPIO_Port, ADC2_NRST_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f003 f948 	bl	800415c <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f001 fa37 	bl	8002340 <HAL_Delay>

	// Set ADCs in NOT reset mode
	HAL_GPIO_WritePin(ADC1_NRST_GPIO_Port, ADC1_NRST_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	48af      	ldr	r0, [pc, #700]	; (8001194 <main+0x318>)
 8000ed8:	f003 f940 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC2_NRST_GPIO_Port, ADC2_NRST_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f003 f93a 	bl	800415c <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8000ee8:	2019      	movs	r0, #25
 8000eea:	f001 fa29 	bl	8002340 <HAL_Delay>

	// MUXs setup
	// Set MUXs in NOT enabled mode
	HAL_GPIO_WritePin(MUX1_EN_GPIO_Port, MUX1_EN_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	48a8      	ldr	r0, [pc, #672]	; (8001194 <main+0x318>)
 8000ef4:	f003 f932 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX1_SEL_GPIO_Port, MUX1_SEL_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2120      	movs	r1, #32
 8000efc:	48a5      	ldr	r0, [pc, #660]	; (8001194 <main+0x318>)
 8000efe:	f003 f92d 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX2_EN_GPIO_Port, MUX2_EN_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2110      	movs	r1, #16
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 f927 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX2_SEL_GPIO_Port, MUX2_SEL_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f003 f921 	bl	800415c <HAL_GPIO_WritePin>

	// CAN Bus headers setup
	uint16_t canId = 0x100;
 8000f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	if (SEGMENT_NUMBER == 1){
		canId = SEGMENT_1_CAN_ID;
 8000f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f26:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
		canId = SEGMENT_2_CAN_ID;
	} else if (SEGMENT_NUMBER == 3){
		canId = SEGMENT_3_CAN_ID;
	}
	// Header for temp 1 - 4
	ptxHeader_temp_1_4.IDE = CAN_ID_STD;
 8000f2a:	4b9b      	ldr	r3, [pc, #620]	; (8001198 <main+0x31c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
	ptxHeader_temp_1_4.RTR = CAN_RTR_DATA;
 8000f30:	4b99      	ldr	r3, [pc, #612]	; (8001198 <main+0x31c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
	ptxHeader_temp_1_4.StdId = canId;
 8000f36:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000f3a:	4a97      	ldr	r2, [pc, #604]	; (8001198 <main+0x31c>)
 8000f3c:	6013      	str	r3, [r2, #0]
	ptxHeader_temp_1_4.DLC = 8;
 8000f3e:	4b96      	ldr	r3, [pc, #600]	; (8001198 <main+0x31c>)
 8000f40:	2208      	movs	r2, #8
 8000f42:	611a      	str	r2, [r3, #16]

	// Header for temp 5 - 8
	ptxHeader_temp_5_8.IDE = CAN_ID_STD;
 8000f44:	4b95      	ldr	r3, [pc, #596]	; (800119c <main+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
	ptxHeader_temp_5_8.RTR = CAN_RTR_DATA;
 8000f4a:	4b94      	ldr	r3, [pc, #592]	; (800119c <main+0x320>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
	ptxHeader_temp_5_8.StdId = canId + 1;
 8000f50:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000f54:	3301      	adds	r3, #1
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b90      	ldr	r3, [pc, #576]	; (800119c <main+0x320>)
 8000f5a:	601a      	str	r2, [r3, #0]
	ptxHeader_temp_5_8.DLC = 8;
 8000f5c:	4b8f      	ldr	r3, [pc, #572]	; (800119c <main+0x320>)
 8000f5e:	2208      	movs	r2, #8
 8000f60:	611a      	str	r2, [r3, #16]

	// Header for temp 9 - 12
	ptxHeader_temp_9_12.IDE = CAN_ID_STD;
 8000f62:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <main+0x324>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
	ptxHeader_temp_9_12.RTR = CAN_RTR_DATA;
 8000f68:	4b8d      	ldr	r3, [pc, #564]	; (80011a0 <main+0x324>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
	ptxHeader_temp_9_12.StdId = canId + 2;
 8000f6e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000f72:	3302      	adds	r3, #2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b8a      	ldr	r3, [pc, #552]	; (80011a0 <main+0x324>)
 8000f78:	601a      	str	r2, [r3, #0]
	ptxHeader_temp_9_12.DLC = 8;
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <main+0x324>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	611a      	str	r2, [r3, #16]

	// Header for temp 13 - 16
	ptxHeader_temp_13_16.IDE = CAN_ID_STD;
 8000f80:	4b88      	ldr	r3, [pc, #544]	; (80011a4 <main+0x328>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
	ptxHeader_temp_13_16.RTR = CAN_RTR_DATA;
 8000f86:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <main+0x328>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
	ptxHeader_temp_13_16.StdId = canId + 3;
 8000f8c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000f90:	3303      	adds	r3, #3
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b83      	ldr	r3, [pc, #524]	; (80011a4 <main+0x328>)
 8000f96:	601a      	str	r2, [r3, #0]
	ptxHeader_temp_13_16.DLC = 8;
 8000f98:	4b82      	ldr	r3, [pc, #520]	; (80011a4 <main+0x328>)
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	611a      	str	r2, [r3, #16]

	// RGB LED Check
	setLEDColor(LED_RGB_RED);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fcfe 	bl	80009a0 <setLEDColor>
	HAL_Delay(500);
 8000fa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa8:	f001 f9ca 	bl	8002340 <HAL_Delay>
	setLEDColor(LED_RGB_GREEN);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff fcf7 	bl	80009a0 <setLEDColor>
	HAL_Delay(500);
 8000fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb6:	f001 f9c3 	bl	8002340 <HAL_Delay>
	setLEDColor(LED_RGB_BLUE);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fcf0 	bl	80009a0 <setLEDColor>
	HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 f9bc 	bl	8002340 <HAL_Delay>
	setLEDColor(LED_RGB_OFF);
 8000fc8:	20ff      	movs	r0, #255	; 0xff
 8000fca:	f7ff fce9 	bl	80009a0 <setLEDColor>

	// Assign relative ignore channel to the relative segment
	uint8_t tempChannelInformation[16] = {0}; //Array to store temperature values and channel infos (ENABLED or DISABLED)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fd4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
	// Temp array 1 3 6 8 | 2 4 5 7 | 9 11 14 16 | 10 12 13 15
	uint8_t SEGMENT_1_IGNORE_CH[16] = {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0};
 8000fe0:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <main+0x32c>)
 8000fe2:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t SEGMENT_2_IGNORE_CH[16] = {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0};
 8000fec:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <main+0x330>)
 8000fee:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t SEGMENT_3_IGNORE_CH[16] = {1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1};
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <main+0x334>)
 8000ffa:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (SEGMENT_NUMBER == 1){
		memcpy(tempChannelInformation, SEGMENT_1_IGNORE_CH, 16 * sizeof(uint8_t));
 8001004:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001008:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800100c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Check that Data Ready pin is HIGH
	// HAL_GPIO_ReadPin(ADC1_NDRDY_GPIO_Port, ADC1_NDRDY_Pin) == GPIO_PIN_SET;

	// Scan for I2C Devices
	uint8_t allI2CDevices[128] = { 0 };
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	227c      	movs	r2, #124	; 0x7c
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f006 f9b3 	bl	800738a <memset>
	scanForI2CDevices(&hi2c1, allI2CDevices);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4862      	ldr	r0, [pc, #392]	; (80011b4 <main+0x338>)
 800102c:	f7ff fa6a 	bl	8000504 <scanForI2CDevices>
	if (areDevicesReady(allI2CDevices))
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa8b 	bl	8000550 <areDevicesReady>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80f4 	beq.w	800122a <main+0x3ae>
	{
		// If all devices are ready soft reset ADC1 and ADC2
		if ((ADCSoftwareReset(&hi2c1, 1) == I2C_ADC_OK) && (ADCSoftwareReset(&hi2c1, 2) == I2C_ADC_OK))
 8001042:	2101      	movs	r1, #1
 8001044:	485b      	ldr	r0, [pc, #364]	; (80011b4 <main+0x338>)
 8001046:	f7ff faa9 	bl	800059c <ADCSoftwareReset>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 80e8 	bne.w	8001222 <main+0x3a6>
 8001052:	2102      	movs	r1, #2
 8001054:	4857      	ldr	r0, [pc, #348]	; (80011b4 <main+0x338>)
 8001056:	f7ff faa1 	bl	800059c <ADCSoftwareReset>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 80e0 	bne.w	8001222 <main+0x3a6>
		{
			// If no error occurred during software reset continue with setup reading memory

			for (uint8_t j = 0; j < 2; j++)
 8001062:	2300      	movs	r3, #0
 8001064:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001068:	e0b2      	b.n	80011d0 <main+0x354>
			{
				// Loop Checking and starting both ADCs


				// Memory variables
				int16_t memoryReg[4] = { 0x00FF, 0x00FF, 0x00FF, 0x00FF };
 800106a:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <main+0x33c>)
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001074:	e883 0003 	stmia.w	r3, {r0, r1}
				uint8_t memoryErr[4] = { 0 };
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]

				for (uint8_t i = 0; i < 4; i++) {
 800107c:	2300      	movs	r3, #0
 800107e:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8001082:	e01c      	b.n	80010be <main+0x242>
					memoryErr[i] = ADCGetRegistersValue(&hi2c1, j+1, i, &memoryReg[i]);
 8001084:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001088:	3301      	adds	r3, #1
 800108a:	b2d9      	uxtb	r1, r3
 800108c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001090:	f107 020c 	add.w	r2, r7, #12
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	f897 40de 	ldrb.w	r4, [r7, #222]	; 0xde
 800109c:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 80010a0:	4844      	ldr	r0, [pc, #272]	; (80011b4 <main+0x338>)
 80010a2:	f7ff fafe 	bl	80006a2 <ADCGetRegistersValue>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 80010ae:	443b      	add	r3, r7
 80010b0:	f803 2cd8 	strb.w	r2, [r3, #-216]
				for (uint8_t i = 0; i < 4; i++) {
 80010b4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80010b8:	3301      	adds	r3, #1
 80010ba:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 80010be:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d9de      	bls.n	8001084 <main+0x208>
				}

				// Check default memory registers value and error occurred during reading
				if ((memoryReg[0] == 0) && (memoryReg[1] == 0)
 80010c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d178      	bne.n	80011c0 <main+0x344>
 80010ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d174      	bne.n	80011c0 <main+0x344>
						&& (memoryReg[2] == 0) && (memoryReg[3] == 0)
 80010d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d170      	bne.n	80011c0 <main+0x344>
 80010de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d16c      	bne.n	80011c0 <main+0x344>
						&& (memoryErr[0] == I2C_ADC_OK)
 80010e6:	7a3b      	ldrb	r3, [r7, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d169      	bne.n	80011c0 <main+0x344>
						&& (memoryErr[1] == I2C_ADC_OK)
 80010ec:	7a7b      	ldrb	r3, [r7, #9]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d166      	bne.n	80011c0 <main+0x344>
						&& (memoryErr[2] == I2C_ADC_OK)
 80010f2:	7abb      	ldrb	r3, [r7, #10]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d163      	bne.n	80011c0 <main+0x344>
						&& (memoryErr[3] == I2C_ADC_OK)) {
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d160      	bne.n	80011c0 <main+0x344>
					// Set ADC Register 0x03 with he following configuration -> 0x00
					// RESERVED   -> 0b00		: Always write 0
					// I2MUX		-> 0b000	: IDAC2 disabled (default)
					// I1MUX      -> 0b000	: IDAC1 disabled (default)

					uint8_t retValues[4] = { 0xFF, 0xFF, 0xFF, 0xFF };
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	607b      	str	r3, [r7, #4]
					retValues[0] = ADCSetRegistersValue(&hi2c1, j + 1, 0x00, REG_0_DEFAULT);
 8001104:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001108:	3301      	adds	r3, #1
 800110a:	b2d9      	uxtb	r1, r3
 800110c:	2301      	movs	r3, #1
 800110e:	2200      	movs	r2, #0
 8001110:	4828      	ldr	r0, [pc, #160]	; (80011b4 <main+0x338>)
 8001112:	f7ff fb52 	bl	80007ba <ADCSetRegistersValue>
 8001116:	4603      	mov	r3, r0
 8001118:	713b      	strb	r3, [r7, #4]
					retValues[1] = ADCSetRegistersValue(&hi2c1, j + 1, 0x01, REG_1_DEFAULT);
 800111a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800111e:	3301      	adds	r3, #1
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	23d4      	movs	r3, #212	; 0xd4
 8001124:	2201      	movs	r2, #1
 8001126:	4823      	ldr	r0, [pc, #140]	; (80011b4 <main+0x338>)
 8001128:	f7ff fb47 	bl	80007ba <ADCSetRegistersValue>
 800112c:	4603      	mov	r3, r0
 800112e:	717b      	strb	r3, [r7, #5]
					retValues[2] = ADCSetRegistersValue(&hi2c1, j + 1, 0x02, REG_2_DEFAULT);
 8001130:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001134:	3301      	adds	r3, #1
 8001136:	b2d9      	uxtb	r1, r3
 8001138:	2300      	movs	r3, #0
 800113a:	2202      	movs	r2, #2
 800113c:	481d      	ldr	r0, [pc, #116]	; (80011b4 <main+0x338>)
 800113e:	f7ff fb3c 	bl	80007ba <ADCSetRegistersValue>
 8001142:	4603      	mov	r3, r0
 8001144:	71bb      	strb	r3, [r7, #6]
					retValues[3] = ADCSetRegistersValue(&hi2c1, j + 1, 0x03, REG_3_DEFAULT);
 8001146:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800114a:	3301      	adds	r3, #1
 800114c:	b2d9      	uxtb	r1, r3
 800114e:	2300      	movs	r3, #0
 8001150:	2203      	movs	r2, #3
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <main+0x338>)
 8001154:	f7ff fb31 	bl	80007ba <ADCSetRegistersValue>
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]

					// Check return data to evaluate some errors
					for (uint8_t i = 0; i < 4; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8001162:	e00f      	b.n	8001184 <main+0x308>
						if (retValues[i] != I2C_ADC_OK) {
 8001164:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8001168:	33e0      	adds	r3, #224	; 0xe0
 800116a:	443b      	add	r3, r7
 800116c:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <main+0x2fe>
							adc_error_flag = true;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <main+0x340>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < 4; i++) {
 800117a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800117e:	3301      	adds	r3, #1
 8001180:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8001184:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8001188:	2b03      	cmp	r3, #3
 800118a:	d9eb      	bls.n	8001164 <main+0x2e8>
						&& (memoryErr[3] == I2C_ADC_OK)) {
 800118c:	e01b      	b.n	80011c6 <main+0x34a>
 800118e:	bf00      	nop
 8001190:	20000550 	.word	0x20000550
 8001194:	48000400 	.word	0x48000400
 8001198:	200006a0 	.word	0x200006a0
 800119c:	200006b8 	.word	0x200006b8
 80011a0:	200006d0 	.word	0x200006d0
 80011a4:	200006e8 	.word	0x200006e8
 80011a8:	080073fc 	.word	0x080073fc
 80011ac:	0800740c 	.word	0x0800740c
 80011b0:	0800741c 	.word	0x0800741c
 80011b4:	20000578 	.word	0x20000578
 80011b8:	0800742c 	.word	0x0800742c
 80011bc:	2000069c 	.word	0x2000069c
					// Optional measurements
					// getADCInternalTemperature(&hi2c1, &htim1, 1, &temperature, &tim_elapsed_flag);
					// getADCReferenceVoltage(&hi2c1, &htim1, 1, &voltage, &tim_elapsed_flag);
				} else {
					// Else loop toggling the RED LED
					adc_error_flag = true;
 80011c0:	4bba      	ldr	r3, [pc, #744]	; (80014ac <main+0x630>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 2; j++)
 80011c6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80011ca:	3301      	adds	r3, #1
 80011cc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80011d0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	f67f af48 	bls.w	800106a <main+0x1ee>
				}
			}

			if (!adc_error_flag) {
 80011da:	4bb4      	ldr	r3, [pc, #720]	; (80014ac <main+0x630>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f083 0301 	eor.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <main+0x372>
				setLEDColor(LED_RGB_GREEN);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fbd9 	bl	80009a0 <setLEDColor>
			} else if (SEGMENT_NUMBER == 3){
				HAL_Delay(100);
			}

			// Set mux enable to LOW to enable sensors and start with SEL pin LOW
			HAL_GPIO_WritePin(MUX1_EN_GPIO_Port, MUX1_EN_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	48af      	ldr	r0, [pc, #700]	; (80014b0 <main+0x634>)
 80011f4:	f002 ffb2 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX1_SEL_GPIO_Port, MUX1_SEL_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2120      	movs	r1, #32
 80011fc:	48ac      	ldr	r0, [pc, #688]	; (80014b0 <main+0x634>)
 80011fe:	f002 ffad 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX2_EN_GPIO_Port, MUX2_EN_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2110      	movs	r1, #16
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f002 ffa7 	bl	800415c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUX2_SEL_GPIO_Port, MUX2_SEL_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f002 ffa1 	bl	800415c <HAL_GPIO_WritePin>
			HAL_Delay(50);
 800121a:	2032      	movs	r0, #50	; 0x32
 800121c:	f001 f890 	bl	8002340 <HAL_Delay>
 8001220:	e006      	b.n	8001230 <main+0x3b4>

		} else {
			// Else loop toggling the RED LED
			adc_error_flag = true;
 8001222:	4ba2      	ldr	r3, [pc, #648]	; (80014ac <main+0x630>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e002      	b.n	8001230 <main+0x3b4>
		}

	} else {
		// Else loop toggling the RED LED
		adc_error_flag = true;
 800122a:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <main+0x630>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (adc_error_flag) {
 8001230:	4b9e      	ldr	r3, [pc, #632]	; (80014ac <main+0x630>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <main+0x3da>
			// Add special can message
			setLEDColor(LED_RGB_RED);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fbb1 	bl	80009a0 <setLEDColor>
			HAL_Delay(500);
 800123e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001242:	f001 f87d 	bl	8002340 <HAL_Delay>
			setLEDColor(LED_RGB_OFF);
 8001246:	20ff      	movs	r0, #255	; 0xff
 8001248:	f7ff fbaa 	bl	80009a0 <setLEDColor>
			HAL_Delay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001250:	f001 f876 	bl	8002340 <HAL_Delay>
 8001254:	e7ec      	b.n	8001230 <main+0x3b4>


			// Starting measurement of temperatures NTC 1, 3, 6 and 8 for ADC1 and 9, 11, 14 and 16 for ADC2

			// For debug purposes turn ON the blue led while the green led is ON
			setLEDColor(LED_RGB_GREEN);
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff fba2 	bl	80009a0 <setLEDColor>

			// Loop twice for both adcs
			for (uint8_t k = 0; k < 2; k++){
 800125c:	2300      	movs	r3, #0
 800125e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8001262:	e0af      	b.n	80013c4 <main+0x548>

				for (uint8_t j = 0; j < 4; j++) {
 8001264:	2300      	movs	r3, #0
 8001266:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800126a:	e0a1      	b.n	80013b0 <main+0x534>
					oversamplingSum = 0.0f;
 800126c:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <main+0x638>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
					for (uint8_t i = 0; i < ADC_OVERSAMPLING; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800127a:	e026      	b.n	80012ca <main+0x44e>
						//HAL_Delay(10);
						getADCChannelVoltage(&hi2c1, &htim1, k + 1, j, &oversamplingVoltages[i], &tim_elapsed_flag);
 800127c:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	498b      	ldr	r1, [pc, #556]	; (80014b8 <main+0x63c>)
 800128c:	440b      	add	r3, r1
 800128e:	f897 10db 	ldrb.w	r1, [r7, #219]	; 0xdb
 8001292:	488a      	ldr	r0, [pc, #552]	; (80014bc <main+0x640>)
 8001294:	9001      	str	r0, [sp, #4]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	460b      	mov	r3, r1
 800129a:	4989      	ldr	r1, [pc, #548]	; (80014c0 <main+0x644>)
 800129c:	4889      	ldr	r0, [pc, #548]	; (80014c4 <main+0x648>)
 800129e:	f7ff fcf7 	bl	8000c90 <getADCChannelVoltage>
						oversamplingSum += oversamplingVoltages[i];
 80012a2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80012a6:	4a84      	ldr	r2, [pc, #528]	; (80014b8 <main+0x63c>)
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <main+0x638>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <main+0x638>)
 80012bc:	edc3 7a00 	vstr	s15, [r3]
					for (uint8_t i = 0; i < ADC_OVERSAMPLING; i++) {
 80012c0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80012c4:	3301      	adds	r3, #1
 80012c6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80012ca:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0d4      	beq.n	800127c <main+0x400>

					// Evaluate the correct index
					// for j = 0, 1, 2, 3
					// k = 0 -> ADC 1 -> 0, 1, 2, 3
					// k = 1 -> ADC 2 -> 8, 9, 10, 11
					ind = j + (8 * k);
 80012d2:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80012de:	4413      	add	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b79      	ldr	r3, [pc, #484]	; (80014c8 <main+0x64c>)
 80012e4:	701a      	strb	r2, [r3, #0]

					// Evaluate the average of oversampling data
					volt[ind] = oversamplingSum / ADC_OVERSAMPLING;
 80012e6:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <main+0x64c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <main+0x638>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4976      	ldr	r1, [pc, #472]	; (80014cc <main+0x650>)
 80012f2:	0083      	lsls	r3, r0, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	601a      	str	r2, [r3, #0]

					// Evaluate if some error occurred
					if (tempChannelInformation[ind] == TEMP_CH_DIS) {
 80012f8:	4b73      	ldr	r3, [pc, #460]	; (80014c8 <main+0x64c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	33e0      	adds	r3, #224	; 0xe0
 80012fe:	443b      	add	r3, r7
 8001300:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <main+0x49a>
						tempChannelError[ind] = TEMP_ERR_IGNORE;
 8001308:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <main+0x64c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <main+0x654>)
 8001310:	2103      	movs	r1, #3
 8001312:	5499      	strb	r1, [r3, r2]
 8001314:	e02f      	b.n	8001376 <main+0x4fa>
					} else if (volt[ind] <= ADC_MIN_VOLTAGE) {
 8001316:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <main+0x64c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4a6c      	ldr	r2, [pc, #432]	; (80014cc <main+0x650>)
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80014d4 <main+0x658>
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d806      	bhi.n	8001340 <main+0x4c4>
						tempChannelError[ind] = TEMP_ERR_UV;
 8001332:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <main+0x64c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <main+0x654>)
 800133a:	2102      	movs	r1, #2
 800133c:	5499      	strb	r1, [r3, r2]
 800133e:	e01a      	b.n	8001376 <main+0x4fa>
					} else if (volt[ind] >= ADC_MAX_VOLTAGE) {
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <main+0x64c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4a61      	ldr	r2, [pc, #388]	; (80014cc <main+0x650>)
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80014d8 <main+0x65c>
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	db06      	blt.n	800136a <main+0x4ee>
						tempChannelError[ind] = TEMP_ERR_OV;
 800135c:	4b5a      	ldr	r3, [pc, #360]	; (80014c8 <main+0x64c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <main+0x654>)
 8001364:	2101      	movs	r1, #1
 8001366:	5499      	strb	r1, [r3, r2]
 8001368:	e005      	b.n	8001376 <main+0x4fa>
					} else {
						tempChannelError[ind] = TEMP_ERR_OK;
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <main+0x64c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <main+0x654>)
 8001372:	2100      	movs	r1, #0
 8001374:	5499      	strb	r1, [r3, r2]
					}

					linearInterpolation(tempData, sizeTempData, voltData, sizeVoltData, volt[ind], &temp[ind]);
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <main+0x660>)
 8001378:	7819      	ldrb	r1, [r3, #0]
 800137a:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <main+0x664>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <main+0x64c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4852      	ldr	r0, [pc, #328]	; (80014cc <main+0x650>)
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4403      	add	r3, r0
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <main+0x64c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4854      	ldr	r0, [pc, #336]	; (80014e4 <main+0x668>)
 8001394:	4403      	add	r3, r0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	eeb0 0a67 	vmov.f32	s0, s15
 800139c:	4613      	mov	r3, r2
 800139e:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <main+0x66c>)
 80013a0:	4852      	ldr	r0, [pc, #328]	; (80014ec <main+0x670>)
 80013a2:	f7ff fbd9 	bl	8000b58 <linearInterpolation>
				for (uint8_t j = 0; j < 4; j++) {
 80013a6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80013aa:	3301      	adds	r3, #1
 80013ac:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80013b0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	f67f af59 	bls.w	800126c <main+0x3f0>
			for (uint8_t k = 0; k < 2; k++){
 80013ba:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80013be:	3301      	adds	r3, #1
 80013c0:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80013c4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	f67f af4b 	bls.w	8001264 <main+0x3e8>
				}
			}

			// Starting measurement of temperatures NTC 2, 4, 5 and 7 for ADC1 and 10, 12, 13 and 15 for ADC2
			HAL_GPIO_TogglePin(MUX1_SEL_GPIO_Port, MUX1_SEL_Pin);
 80013ce:	2120      	movs	r1, #32
 80013d0:	4837      	ldr	r0, [pc, #220]	; (80014b0 <main+0x634>)
 80013d2:	f002 fedb 	bl	800418c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(MUX2_SEL_GPIO_Port, MUX2_SEL_Pin);
 80013d6:	2120      	movs	r1, #32
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f002 fed6 	bl	800418c <HAL_GPIO_TogglePin>


			HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f000 ffad 	bl	8002340 <HAL_Delay>

			// For debug purposes turn OFF the blue led while the green led is ON
			setLEDColor(LED_RGB_OFF);
 80013e6:	20ff      	movs	r0, #255	; 0xff
 80013e8:	f7ff fada 	bl	80009a0 <setLEDColor>

			// Loop twice for both adcs
			for (uint8_t k = 0; k < 2; k++){
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80013f2:	e0d4      	b.n	800159e <main+0x722>

				for (uint8_t j = 0; j < 4; j++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80013fa:	e0c6      	b.n	800158a <main+0x70e>
					oversamplingSum = 0.0f;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <main+0x638>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
					//HAL_Delay(10);
					for (uint8_t i = 0; i < ADC_OVERSAMPLING; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800140a:	e026      	b.n	800145a <main+0x5de>
						getADCChannelVoltage(&hi2c1, &htim1, k + 1, j, &oversamplingVoltages[i], &tim_elapsed_flag);
 800140c:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4927      	ldr	r1, [pc, #156]	; (80014b8 <main+0x63c>)
 800141c:	440b      	add	r3, r1
 800141e:	f897 10d8 	ldrb.w	r1, [r7, #216]	; 0xd8
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <main+0x640>)
 8001424:	9001      	str	r0, [sp, #4]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	460b      	mov	r3, r1
 800142a:	4925      	ldr	r1, [pc, #148]	; (80014c0 <main+0x644>)
 800142c:	4825      	ldr	r0, [pc, #148]	; (80014c4 <main+0x648>)
 800142e:	f7ff fc2f 	bl	8000c90 <getADCChannelVoltage>
						oversamplingSum += oversamplingVoltages[i];
 8001432:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001436:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <main+0x63c>)
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <main+0x638>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <main+0x638>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
					for (uint8_t i = 0; i < ADC_OVERSAMPLING; i++) {
 8001450:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001454:	3301      	adds	r3, #1
 8001456:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800145a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0d4      	beq.n	800140c <main+0x590>
					// Evaluate the correct index
					// for j = 0, 1, 2, 3
					// k = 0 -> ADC 1 -> 4, 5, 6, 7
					// k = 1 -> ADC 2 -> 12, 13, 14, 15

					ind = j + (8 * k) + 4;
 8001462:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800146e:	4413      	add	r3, r2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3304      	adds	r3, #4
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <main+0x64c>)
 8001478:	701a      	strb	r2, [r3, #0]

					// Evaluate the average of oversampling data
					volt[ind] = oversamplingSum / ADC_OVERSAMPLING;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <main+0x64c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <main+0x638>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4911      	ldr	r1, [pc, #68]	; (80014cc <main+0x650>)
 8001486:	0083      	lsls	r3, r0, #2
 8001488:	440b      	add	r3, r1
 800148a:	601a      	str	r2, [r3, #0]

					// Evaluate if some error occurred
					if (tempChannelInformation[ind] == TEMP_CH_DIS) {
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <main+0x64c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	33e0      	adds	r3, #224	; 0xe0
 8001492:	443b      	add	r3, r7
 8001494:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d129      	bne.n	80014f0 <main+0x674>
						tempChannelError[ind] = TEMP_ERR_IGNORE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <main+0x64c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <main+0x654>)
 80014a4:	2103      	movs	r1, #3
 80014a6:	5499      	strb	r1, [r3, r2]
 80014a8:	e052      	b.n	8001550 <main+0x6d4>
 80014aa:	bf00      	nop
 80014ac:	2000069c 	.word	0x2000069c
 80014b0:	48000400 	.word	0x48000400
 80014b4:	20000768 	.word	0x20000768
 80014b8:	20000764 	.word	0x20000764
 80014bc:	2000069d 	.word	0x2000069d
 80014c0:	200005cc 	.word	0x200005cc
 80014c4:	20000578 	.word	0x20000578
 80014c8:	200007dc 	.word	0x200007dc
 80014cc:	20000724 	.word	0x20000724
 80014d0:	200007cc 	.word	0x200007cc
 80014d4:	3dcccccd 	.word	0x3dcccccd
 80014d8:	409ccccd 	.word	0x409ccccd
 80014dc:	20000479 	.word	0x20000479
 80014e0:	20000478 	.word	0x20000478
 80014e4:	2000076c 	.word	0x2000076c
 80014e8:	20000244 	.word	0x20000244
 80014ec:	20000010 	.word	0x20000010
					} else if (volt[ind] <= ADC_MIN_VOLTAGE) {
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <main+0x734>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <main+0x738>)
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80015b8 <main+0x73c>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	d806      	bhi.n	800151a <main+0x69e>
						tempChannelError[ind] = TEMP_ERR_UV;
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <main+0x734>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <main+0x740>)
 8001514:	2102      	movs	r1, #2
 8001516:	5499      	strb	r1, [r3, r2]
 8001518:	e01a      	b.n	8001550 <main+0x6d4>
					} else if (volt[ind] >= ADC_MAX_VOLTAGE) {
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <main+0x734>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <main+0x738>)
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015c0 <main+0x744>
 800152c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	db06      	blt.n	8001544 <main+0x6c8>
						tempChannelError[ind] = TEMP_ERR_OV;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <main+0x734>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <main+0x740>)
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]
 8001542:	e005      	b.n	8001550 <main+0x6d4>
					} else {
						tempChannelError[ind] = TEMP_ERR_OK;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <main+0x734>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <main+0x740>)
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]
					}

					linearInterpolation(tempData, sizeTempData, voltData, sizeVoltData, volt[ind], &temp[ind]);
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <main+0x748>)
 8001552:	7819      	ldrb	r1, [r3, #0]
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <main+0x74c>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <main+0x734>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4815      	ldr	r0, [pc, #84]	; (80015b4 <main+0x738>)
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <main+0x734>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4817      	ldr	r0, [pc, #92]	; (80015cc <main+0x750>)
 800156e:	4403      	add	r3, r0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	4613      	mov	r3, r2
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <main+0x754>)
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <main+0x758>)
 800157c:	f7ff faec 	bl	8000b58 <linearInterpolation>
				for (uint8_t j = 0; j < 4; j++) {
 8001580:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8001584:	3301      	adds	r3, #1
 8001586:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 800158a:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800158e:	2b03      	cmp	r3, #3
 8001590:	f67f af34 	bls.w	80013fc <main+0x580>
			for (uint8_t k = 0; k < 2; k++){
 8001594:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8001598:	3301      	adds	r3, #1
 800159a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800159e:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f67f af26 	bls.w	80013f4 <main+0x578>
				}
			}
			// Temp array 1 3 6 8 | 2 4 5 7 | 9 11 14 16 | 10 12 13 15

			// Sorting temps
			for (uint8_t i = 0; i < 16; i++){
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80015ae:	e029      	b.n	8001604 <main+0x788>
 80015b0:	200007dc 	.word	0x200007dc
 80015b4:	20000724 	.word	0x20000724
 80015b8:	3dcccccd 	.word	0x3dcccccd
 80015bc:	200007cc 	.word	0x200007cc
 80015c0:	409ccccd 	.word	0x409ccccd
 80015c4:	20000479 	.word	0x20000479
 80015c8:	20000478 	.word	0x20000478
 80015cc:	2000076c 	.word	0x2000076c
 80015d0:	20000244 	.word	0x20000244
 80015d4:	20000010 	.word	0x20000010
				//sortedTemp[i] = sortTemperatures(sortingIndexArray[i], temp, tempChannelError, 100);
				sortedTemp[sortingIndexArray[i]] = sortTemperatures(i, temp, tempChannelError, 100);
 80015d8:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80015dc:	4a84      	ldr	r2, [pc, #528]	; (80017f0 <main+0x974>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	461c      	mov	r4, r3
 80015e2:	f897 00d6 	ldrb.w	r0, [r7, #214]	; 0xd6
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	4a82      	ldr	r2, [pc, #520]	; (80017f4 <main+0x978>)
 80015ea:	4983      	ldr	r1, [pc, #524]	; (80017f8 <main+0x97c>)
 80015ec:	f7ff fc0a 	bl	8000e04 <sortTemperatures>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b81      	ldr	r3, [pc, #516]	; (80017fc <main+0x980>)
 80015f6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for (uint8_t i = 0; i < 16; i++){
 80015fa:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80015fe:	3301      	adds	r3, #1
 8001600:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8001604:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d9e5      	bls.n	80015d8 <main+0x75c>
			}

			// Filling CAN arrays
			payload_temp_1_4[0] = (uint8_t) (sortedTemp[0] >> 8);
 800160c:	4b7b      	ldr	r3, [pc, #492]	; (80017fc <main+0x980>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	b29b      	uxth	r3, r3
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <main+0x984>)
 8001618:	701a      	strb	r2, [r3, #0]
			payload_temp_1_4[1] = (uint8_t) sortedTemp[0];
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <main+0x980>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b77      	ldr	r3, [pc, #476]	; (8001800 <main+0x984>)
 8001622:	705a      	strb	r2, [r3, #1]
			payload_temp_1_4[2] = (uint8_t) (sortedTemp[1] >> 8);
 8001624:	4b75      	ldr	r3, [pc, #468]	; (80017fc <main+0x980>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	b29b      	uxth	r3, r3
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b74      	ldr	r3, [pc, #464]	; (8001800 <main+0x984>)
 8001630:	709a      	strb	r2, [r3, #2]
			payload_temp_1_4[3] = (uint8_t) sortedTemp[1];
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <main+0x980>)
 8001634:	885b      	ldrh	r3, [r3, #2]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b71      	ldr	r3, [pc, #452]	; (8001800 <main+0x984>)
 800163a:	70da      	strb	r2, [r3, #3]
			payload_temp_1_4[4] = (uint8_t) (sortedTemp[2] >> 8);
 800163c:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <main+0x980>)
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <main+0x984>)
 8001648:	711a      	strb	r2, [r3, #4]
			payload_temp_1_4[5] = (uint8_t) sortedTemp[2];
 800164a:	4b6c      	ldr	r3, [pc, #432]	; (80017fc <main+0x980>)
 800164c:	889b      	ldrh	r3, [r3, #4]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <main+0x984>)
 8001652:	715a      	strb	r2, [r3, #5]
			payload_temp_1_4[6] = (uint8_t) (sortedTemp[3] >> 8);
 8001654:	4b69      	ldr	r3, [pc, #420]	; (80017fc <main+0x980>)
 8001656:	88db      	ldrh	r3, [r3, #6]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b29b      	uxth	r3, r3
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b68      	ldr	r3, [pc, #416]	; (8001800 <main+0x984>)
 8001660:	719a      	strb	r2, [r3, #6]
			payload_temp_1_4[7] = (uint8_t) sortedTemp[3];
 8001662:	4b66      	ldr	r3, [pc, #408]	; (80017fc <main+0x980>)
 8001664:	88db      	ldrh	r3, [r3, #6]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b65      	ldr	r3, [pc, #404]	; (8001800 <main+0x984>)
 800166a:	71da      	strb	r2, [r3, #7]

			payload_temp_5_8[0] = (uint8_t) (sortedTemp[4] >> 8);
 800166c:	4b63      	ldr	r3, [pc, #396]	; (80017fc <main+0x980>)
 800166e:	891b      	ldrh	r3, [r3, #8]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b29b      	uxth	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b63      	ldr	r3, [pc, #396]	; (8001804 <main+0x988>)
 8001678:	701a      	strb	r2, [r3, #0]
			payload_temp_5_8[1] = (uint8_t) sortedTemp[4];
 800167a:	4b60      	ldr	r3, [pc, #384]	; (80017fc <main+0x980>)
 800167c:	891b      	ldrh	r3, [r3, #8]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b60      	ldr	r3, [pc, #384]	; (8001804 <main+0x988>)
 8001682:	705a      	strb	r2, [r3, #1]
			payload_temp_5_8[2] = (uint8_t) (sortedTemp[5] >> 8);
 8001684:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <main+0x980>)
 8001686:	895b      	ldrh	r3, [r3, #10]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <main+0x988>)
 8001690:	709a      	strb	r2, [r3, #2]
			payload_temp_5_8[3] = (uint8_t) sortedTemp[5];
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <main+0x980>)
 8001694:	895b      	ldrh	r3, [r3, #10]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <main+0x988>)
 800169a:	70da      	strb	r2, [r3, #3]
			payload_temp_5_8[4] = (uint8_t) (sortedTemp[6] >> 8);
 800169c:	4b57      	ldr	r3, [pc, #348]	; (80017fc <main+0x980>)
 800169e:	899b      	ldrh	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b57      	ldr	r3, [pc, #348]	; (8001804 <main+0x988>)
 80016a8:	711a      	strb	r2, [r3, #4]
			payload_temp_5_8[5] = (uint8_t) sortedTemp[6];
 80016aa:	4b54      	ldr	r3, [pc, #336]	; (80017fc <main+0x980>)
 80016ac:	899b      	ldrh	r3, [r3, #12]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <main+0x988>)
 80016b2:	715a      	strb	r2, [r3, #5]
			payload_temp_5_8[6] = (uint8_t) (sortedTemp[7] >> 8);
 80016b4:	4b51      	ldr	r3, [pc, #324]	; (80017fc <main+0x980>)
 80016b6:	89db      	ldrh	r3, [r3, #14]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b51      	ldr	r3, [pc, #324]	; (8001804 <main+0x988>)
 80016c0:	719a      	strb	r2, [r3, #6]
			payload_temp_5_8[7] = (uint8_t) sortedTemp[7];
 80016c2:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <main+0x980>)
 80016c4:	89db      	ldrh	r3, [r3, #14]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <main+0x988>)
 80016ca:	71da      	strb	r2, [r3, #7]

			payload_temp_9_12[0] = (uint8_t) (sortedTemp[8] >> 8);
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <main+0x980>)
 80016ce:	8a1b      	ldrh	r3, [r3, #16]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <main+0x98c>)
 80016d8:	701a      	strb	r2, [r3, #0]
			payload_temp_9_12[1] = (uint8_t) sortedTemp[8];
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <main+0x980>)
 80016dc:	8a1b      	ldrh	r3, [r3, #16]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b49      	ldr	r3, [pc, #292]	; (8001808 <main+0x98c>)
 80016e2:	705a      	strb	r2, [r3, #1]
			payload_temp_9_12[2] = (uint8_t) (sortedTemp[9] >> 8);
 80016e4:	4b45      	ldr	r3, [pc, #276]	; (80017fc <main+0x980>)
 80016e6:	8a5b      	ldrh	r3, [r3, #18]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <main+0x98c>)
 80016f0:	709a      	strb	r2, [r3, #2]
			payload_temp_9_12[3] = (uint8_t) sortedTemp[9];
 80016f2:	4b42      	ldr	r3, [pc, #264]	; (80017fc <main+0x980>)
 80016f4:	8a5b      	ldrh	r3, [r3, #18]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <main+0x98c>)
 80016fa:	70da      	strb	r2, [r3, #3]
			payload_temp_9_12[4] = (uint8_t) (sortedTemp[10] >> 8);
 80016fc:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <main+0x980>)
 80016fe:	8a9b      	ldrh	r3, [r3, #20]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	b29b      	uxth	r3, r3
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <main+0x98c>)
 8001708:	711a      	strb	r2, [r3, #4]
			payload_temp_9_12[5] = (uint8_t) sortedTemp[10];
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <main+0x980>)
 800170c:	8a9b      	ldrh	r3, [r3, #20]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <main+0x98c>)
 8001712:	715a      	strb	r2, [r3, #5]
			payload_temp_9_12[6] = (uint8_t) (sortedTemp[11] >> 8);
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <main+0x980>)
 8001716:	8adb      	ldrh	r3, [r3, #22]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	b29b      	uxth	r3, r3
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <main+0x98c>)
 8001720:	719a      	strb	r2, [r3, #6]
			payload_temp_9_12[7] = (uint8_t) sortedTemp[11];
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <main+0x980>)
 8001724:	8adb      	ldrh	r3, [r3, #22]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <main+0x98c>)
 800172a:	71da      	strb	r2, [r3, #7]

			payload_temp_13_16[0] = (uint8_t) (sortedTemp[12] >> 8);
 800172c:	4b33      	ldr	r3, [pc, #204]	; (80017fc <main+0x980>)
 800172e:	8b1b      	ldrh	r3, [r3, #24]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <main+0x990>)
 8001738:	701a      	strb	r2, [r3, #0]
			payload_temp_13_16[1] = (uint8_t) sortedTemp[12];
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <main+0x980>)
 800173c:	8b1b      	ldrh	r3, [r3, #24]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <main+0x990>)
 8001742:	705a      	strb	r2, [r3, #1]
			payload_temp_13_16[2] = (uint8_t) (sortedTemp[13] >> 8);
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <main+0x980>)
 8001746:	8b5b      	ldrh	r3, [r3, #26]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b29b      	uxth	r3, r3
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <main+0x990>)
 8001750:	709a      	strb	r2, [r3, #2]
			payload_temp_13_16[3] = (uint8_t) sortedTemp[13];
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <main+0x980>)
 8001754:	8b5b      	ldrh	r3, [r3, #26]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <main+0x990>)
 800175a:	70da      	strb	r2, [r3, #3]
			payload_temp_13_16[4] = (uint8_t) (sortedTemp[14] >> 8);
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <main+0x980>)
 800175e:	8b9b      	ldrh	r3, [r3, #28]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b29b      	uxth	r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <main+0x990>)
 8001768:	711a      	strb	r2, [r3, #4]
			payload_temp_13_16[5] = (uint8_t) sortedTemp[14];
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <main+0x980>)
 800176c:	8b9b      	ldrh	r3, [r3, #28]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <main+0x990>)
 8001772:	715a      	strb	r2, [r3, #5]
			payload_temp_13_16[6] = (uint8_t) (sortedTemp[15] >> 8);
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <main+0x980>)
 8001776:	8bdb      	ldrh	r3, [r3, #30]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <main+0x990>)
 8001780:	719a      	strb	r2, [r3, #6]
			payload_temp_13_16[7] = (uint8_t) sortedTemp[15];
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <main+0x980>)
 8001784:	8bdb      	ldrh	r3, [r3, #30]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <main+0x990>)
 800178a:	71da      	strb	r2, [r3, #7]

			HAL_CAN_AddTxMessage(&hcan1, &ptxHeader_temp_1_4, payload_temp_1_4, &txMailbox);
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <main+0x994>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <main+0x984>)
 8001790:	4920      	ldr	r1, [pc, #128]	; (8001814 <main+0x998>)
 8001792:	4821      	ldr	r0, [pc, #132]	; (8001818 <main+0x99c>)
 8001794:	f002 f815 	bl	80037c2 <HAL_CAN_AddTxMessage>
			HAL_Delay(5);
 8001798:	2005      	movs	r0, #5
 800179a:	f000 fdd1 	bl	8002340 <HAL_Delay>
			HAL_CAN_AddTxMessage(&hcan1, &ptxHeader_temp_5_8, payload_temp_5_8, &txMailbox);
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <main+0x994>)
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <main+0x988>)
 80017a2:	491e      	ldr	r1, [pc, #120]	; (800181c <main+0x9a0>)
 80017a4:	481c      	ldr	r0, [pc, #112]	; (8001818 <main+0x99c>)
 80017a6:	f002 f80c 	bl	80037c2 <HAL_CAN_AddTxMessage>
			HAL_Delay(5);
 80017aa:	2005      	movs	r0, #5
 80017ac:	f000 fdc8 	bl	8002340 <HAL_Delay>
			HAL_CAN_AddTxMessage(&hcan1, &ptxHeader_temp_9_12, payload_temp_9_12, &txMailbox);
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <main+0x994>)
 80017b2:	4a15      	ldr	r2, [pc, #84]	; (8001808 <main+0x98c>)
 80017b4:	491a      	ldr	r1, [pc, #104]	; (8001820 <main+0x9a4>)
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <main+0x99c>)
 80017b8:	f002 f803 	bl	80037c2 <HAL_CAN_AddTxMessage>
			HAL_Delay(5);
 80017bc:	2005      	movs	r0, #5
 80017be:	f000 fdbf 	bl	8002340 <HAL_Delay>
			HAL_CAN_AddTxMessage(&hcan1, &ptxHeader_temp_13_16, payload_temp_13_16, &txMailbox);
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <main+0x994>)
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <main+0x990>)
 80017c6:	4917      	ldr	r1, [pc, #92]	; (8001824 <main+0x9a8>)
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <main+0x99c>)
 80017ca:	f001 fffa 	bl	80037c2 <HAL_CAN_AddTxMessage>
			// Payload 1-4  : T01 T01 T02 T02 T03 T03 T04 T04
			// Payload 5-8  : T05 T05 T06 T06 T07 T07 T08 T08
			// Payload 9-12 : T09 T09 T10 T10 T11 T11 T12 T12
			// Payload 13-16: T13 T13 T14 T14 T15 T15 T16 T16

			HAL_Delay(200);
 80017ce:	20c8      	movs	r0, #200	; 0xc8
 80017d0:	f000 fdb6 	bl	8002340 <HAL_Delay>

			HAL_GPIO_TogglePin(MUX1_SEL_GPIO_Port, MUX1_SEL_Pin);
 80017d4:	2120      	movs	r1, #32
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <main+0x9ac>)
 80017d8:	f002 fcd8 	bl	800418c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(MUX2_SEL_GPIO_Port, MUX2_SEL_Pin);
 80017dc:	2120      	movs	r1, #32
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f002 fcd3 	bl	800418c <HAL_GPIO_TogglePin>

			HAL_Delay(10); //If filters are used set to 50ms
 80017e6:	200a      	movs	r0, #10
 80017e8:	f000 fdaa 	bl	8002340 <HAL_Delay>
		if (adc_error_flag) {
 80017ec:	e520      	b.n	8001230 <main+0x3b4>
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000
 80017f4:	200007cc 	.word	0x200007cc
 80017f8:	2000076c 	.word	0x2000076c
 80017fc:	200007ac 	.word	0x200007ac
 8001800:	20000700 	.word	0x20000700
 8001804:	20000708 	.word	0x20000708
 8001808:	20000710 	.word	0x20000710
 800180c:	20000718 	.word	0x20000718
 8001810:	20000720 	.word	0x20000720
 8001814:	200006a0 	.word	0x200006a0
 8001818:	20000550 	.word	0x20000550
 800181c:	200006b8 	.word	0x200006b8
 8001820:	200006d0 	.word	0x200006d0
 8001824:	200006e8 	.word	0x200006e8
 8001828:	48000400 	.word	0x48000400

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b096      	sub	sp, #88	; 0x58
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	2244      	movs	r2, #68	; 0x44
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f005 fda5 	bl	800738a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800184e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001852:	f003 fb97 	bl	8004f84 <HAL_PWREx_ControlVoltageScaling>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800185c:	f000 fa7e 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001868:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186a:	2310      	movs	r3, #16
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001872:	2302      	movs	r3, #2
 8001874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800187a:	2308      	movs	r3, #8
 800187c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800187e:	2307      	movs	r3, #7
 8001880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001886:	2302      	movs	r3, #2
 8001888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fbce 	bl	8005030 <HAL_RCC_OscConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800189a:	f000 fa5f 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2303      	movs	r3, #3
 80018a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018b4:	463b      	mov	r3, r7
 80018b6:	2103      	movs	r1, #3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 ffcd 	bl	8005858 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018c4:	f000 fa4a 	bl	8001d5c <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3758      	adds	r7, #88	; 0x58
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <MX_ADC1_Init+0xd8>)
 80018e8:	4a30      	ldr	r2, [pc, #192]	; (80019ac <MX_ADC1_Init+0xdc>)
 80018ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_ADC1_Init+0xd8>)
 80018ee:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80018f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <MX_ADC1_Init+0xd8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_ADC1_Init+0xd8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001902:	2201      	movs	r2, #1
 8001904:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001908:	2204      	movs	r2, #4
 800190a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <MX_ADC1_Init+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001914:	2200      	movs	r2, #0
 8001916:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <MX_ADC1_Init+0xd8>)
 800191a:	2202      	movs	r2, #2
 800191c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_ADC1_Init+0xd8>)
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_ADC1_Init+0xd8>)
 800193c:	2200      	movs	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <MX_ADC1_Init+0xd8>)
 800194a:	f000 fecf 	bl	80026ec <HAL_ADC_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001954:	f000 fa02 	bl	8001d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_ADC1_Init+0xe0>)
 800195a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800195c:	2306      	movs	r3, #6
 800195e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001960:	2307      	movs	r3, #7
 8001962:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001964:	237f      	movs	r3, #127	; 0x7f
 8001966:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001968:	2304      	movs	r3, #4
 800196a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001976:	f001 f9d3 	bl	8002d20 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001980:	f000 f9ec 	bl	8001d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_ADC1_Init+0xe4>)
 8001986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001988:	230c      	movs	r3, #12
 800198a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_ADC1_Init+0xd8>)
 8001992:	f001 f9c5 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800199c:	f000 f9de 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200004a4 	.word	0x200004a4
 80019ac:	50040000 	.word	0x50040000
 80019b0:	3ef08000 	.word	0x3ef08000
 80019b4:	80000001 	.word	0x80000001

080019b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <MX_CAN1_Init+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019c4:	2220      	movs	r2, #32
 80019c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <MX_CAN1_Init+0x64>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_CAN1_Init+0x64>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_CAN1_Init+0x64>)
 8001a0a:	f001 fd9b 	bl	8003544 <HAL_CAN_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001a14:	f000 f9a2 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000550 	.word	0x20000550
 8001a20:	40006400 	.word	0x40006400

08001a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <MX_I2C1_Init+0x84>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300CC0;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a30:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <MX_I2C1_Init+0x88>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a60:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a62:	f002 fbd0 	bl	8004206 <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 f976 	bl	8001d5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a76:	f003 f9bf 	bl	8004df8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001a80:	f000 f96c 	bl	8001d5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <MX_I2C1_Init+0x80>)
 8001a88:	f003 fa01 	bl	8004e8e <HAL_I2CEx_ConfigDigitalFilter>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8001a92:	f000 f963 	bl	8001d5c <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001a96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a9a:	f003 fa45 	bl	8004f28 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000578 	.word	0x20000578
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	00300cc0 	.word	0x00300cc0

08001ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <MX_TIM1_Init+0xa0>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64 - 1;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001ad6:	223f      	movs	r2, #63	; 0x3f
 8001ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001ae2:	2263      	movs	r2, #99	; 0x63
 8001ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af8:	4814      	ldr	r0, [pc, #80]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001afa:	f004 fbb9 	bl	8006270 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b04:	f000 f92a 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001b16:	f004 fd9c 	bl	8006652 <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b20:	f000 f91c 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001b36:	f004 ff7b 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b40:	f000 f90c 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200005cc 	.word	0x200005cc
 8001b50:	40012c00 	.word	0x40012c00

08001b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <MX_USART2_UART_Init+0x5c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b80:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b84:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_USART2_UART_Init+0x58>)
 8001b9a:	f004 ffcd 	bl	8006b38 <HAL_UART_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8001ba4:	f000 f8da 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000618 	.word	0x20000618
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_DMA_Init+0x38>)
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <MX_DMA_Init+0x38>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6493      	str	r3, [r2, #72]	; 0x48
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_DMA_Init+0x38>)
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	200b      	movs	r0, #11
 8001bd8:	f001 ff9f 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bdc:	200b      	movs	r0, #11
 8001bde:	f001 ffb8 	bl	8003b52 <HAL_NVIC_EnableIRQ>

}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a42      	ldr	r2, [pc, #264]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <MX_GPIO_Init+0x13c>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX2_EN_Pin|MUX2_SEL_Pin|ADC2_NRST_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	21b0      	movs	r1, #176	; 0xb0
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f002 fa81 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_LED_G_GPIO_Port, RGB_LED_G_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4834      	ldr	r0, [pc, #208]	; (8001d30 <MX_GPIO_Init+0x140>)
 8001c60:	f002 fa7c 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_LED_R_Pin|RGB_LED_B_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6e:	f002 fa75 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX1_EN_Pin|MUX1_SEL_Pin|ADC1_NRST_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2170      	movs	r1, #112	; 0x70
 8001c76:	482e      	ldr	r0, [pc, #184]	; (8001d30 <MX_GPIO_Init+0x140>)
 8001c78:	f002 fa70 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOT0_GPIO_Port, BOOT0_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2108      	movs	r1, #8
 8001c80:	482c      	ldr	r0, [pc, #176]	; (8001d34 <MX_GPIO_Init+0x144>)
 8001c82:	f002 fa6b 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX2_EN_Pin MUX2_SEL_Pin ADC2_NRST_Pin RGB_LED_R_Pin
                           RGB_LED_B_Pin */
  GPIO_InitStruct.Pin = MUX2_EN_Pin|MUX2_SEL_Pin|ADC2_NRST_Pin|RGB_LED_R_Pin
 8001c86:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8001c8a:	60fb      	str	r3, [r7, #12]
                          |RGB_LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca2:	f002 f8d9 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC2_NDRDY_Pin */
  GPIO_InitStruct.Pin = ADC2_NDRDY_Pin;
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001caa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC2_NDRDY_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f002 f8cb 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_LED_G_Pin MUX1_EN_Pin MUX1_SEL_Pin ADC1_NRST_Pin */
  GPIO_InitStruct.Pin = RGB_LED_G_Pin|MUX1_EN_Pin|MUX1_SEL_Pin|ADC1_NRST_Pin;
 8001cc2:	2372      	movs	r3, #114	; 0x72
 8001cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4815      	ldr	r0, [pc, #84]	; (8001d30 <MX_GPIO_Init+0x140>)
 8001cda:	f002 f8bd 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC1_NDRDY_Pin */
  GPIO_InitStruct.Pin = ADC1_NDRDY_Pin;
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC1_NDRDY_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480f      	ldr	r0, [pc, #60]	; (8001d30 <MX_GPIO_Init+0x140>)
 8001cf4:	f002 f8b0 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <MX_GPIO_Init+0x144>)
 8001d10:	f002 f8a2 	bl	8003e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2017      	movs	r0, #23
 8001d1a:	f001 fefe 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d1e:	2017      	movs	r0, #23
 8001d20:	f001 ff17 	bl	8003b52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	48001c00 	.word	0x48001c00

08001d38 <HAL_TIM_PeriodElapsedCallback>:
 a global variable "uwTick" used as application time base.
 @param  htim : TIM handle
 @retval None
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	// USER CODE BEGIN Callback 0 /

	// USER CODE END Callback 0 /

	// USER CODE BEGIN Callback 1 /
	tim_elapsed_flag = true;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop(&htim1);
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d48:	f004 fae9 	bl	800631e <HAL_TIM_Base_Stop>
	// USER CODE END Callback 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000069d 	.word	0x2000069d
 8001d58:	200005cc 	.word	0x200005cc

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		setLEDColor(LED_RGB_RED);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7fe fe1b 	bl	80009a0 <setLEDColor>
		HAL_Delay(500);
 8001d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6e:	f000 fae7 	bl	8002340 <HAL_Delay>
		setLEDColor(LED_RGB_OFF);
 8001d72:	20ff      	movs	r0, #255	; 0xff
 8001d74:	f7fe fe14 	bl	80009a0 <setLEDColor>
		HAL_Delay(500);
 8001d78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7c:	f000 fae0 	bl	8002340 <HAL_Delay>
		setLEDColor(LED_RGB_RED);
 8001d80:	e7f0      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6613      	str	r3, [r2, #96]	; 0x60
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	6593      	str	r3, [r2, #88]	; 0x58
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_MspInit+0x44>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000

08001dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b09e      	sub	sp, #120	; 0x78
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	2254      	movs	r2, #84	; 0x54
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 facc 	bl	800738a <memset>
  if(hadc->Instance==ADC1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a3f      	ldr	r2, [pc, #252]	; (8001ef4 <HAL_ADC_MspInit+0x128>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d176      	bne.n	8001eea <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e06:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001e10:	2308      	movs	r3, #8
 8001e12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e14:	2307      	movs	r3, #7
 8001e16:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 ff38 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001e36:	f7ff ff91 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <HAL_ADC_MspInit+0x12c>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a2e      	ldr	r2, [pc, #184]	; (8001ef8 <HAL_ADC_MspInit+0x12c>)
 8001e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <HAL_ADC_MspInit+0x12c>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_ADC_MspInit+0x12c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_ADC_MspInit+0x12c>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_ADC_MspInit+0x12c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = PCB_TEMP_Pin;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e6e:	230b      	movs	r3, #11
 8001e70:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(PCB_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481f      	ldr	r0, [pc, #124]	; (8001efc <HAL_ADC_MspInit+0x130>)
 8001e7e:	f001 ffeb 	bl	8003e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_ADC_MspInit+0x138>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001eb8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ebe:	4810      	ldr	r0, [pc, #64]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001ec0:	f001 fe62 	bl	8003b88 <HAL_DMA_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001eca:	f7ff ff47 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001ed2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_ADC_MspInit+0x134>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2012      	movs	r0, #18
 8001ee0:	f001 fe1b 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ee4:	2012      	movs	r0, #18
 8001ee6:	f001 fe34 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3778      	adds	r7, #120	; 0x78
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	50040000 	.word	0x50040000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400
 8001f00:	20000508 	.word	0x20000508
 8001f04:	40020008 	.word	0x40020008

08001f08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <HAL_CAN_MspInit+0x80>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d129      	bne.n	8001f7e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_CAN_MspInit+0x84>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_CAN_MspInit+0x84>)
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_CAN_MspInit+0x84>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_CAN_MspInit+0x84>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_CAN_MspInit+0x84>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_CAN_MspInit+0x84>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f6c:	2309      	movs	r3, #9
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7a:	f001 ff6d 	bl	8003e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40006400 	.word	0x40006400
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09e      	sub	sp, #120	; 0x78
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	2254      	movs	r2, #84	; 0x54
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 f9ea 	bl	800738a <memset>
  if(hi2c->Instance==I2C1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_I2C_MspInit+0xa8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d137      	bne.n	8002030 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fc0:	2340      	movs	r3, #64	; 0x40
 8001fc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fe67 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fd8:	f7ff fec0 	bl	8001d5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_I2C_MspInit+0xac>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_I2C_MspInit+0xac>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_I2C_MspInit+0xac>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ff8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffa:	2312      	movs	r3, #18
 8001ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002006:	2304      	movs	r3, #4
 8002008:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f001 ff20 	bl	8003e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_I2C_MspInit+0xac>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_I2C_MspInit+0xac>)
 800201e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_I2C_MspInit+0xac>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3778      	adds	r7, #120	; 0x78
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40005400 	.word	0x40005400
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_TIM_Base_MspInit+0x44>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d113      	bne.n	800207a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800205c:	6613      	str	r3, [r2, #96]	; 0x60
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	2019      	movs	r0, #25
 8002070:	f001 fd53 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002074:	2019      	movs	r0, #25
 8002076:	f001 fd6c 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b09e      	sub	sp, #120	; 0x78
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	2254      	movs	r2, #84	; 0x54
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 f96c 	bl	800738a <memset>
  if(huart->Instance==USART2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_UART_MspInit+0xa8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d136      	bne.n	800212a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fde9 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d4:	f7ff fe42 	bl	8001d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_UART_MspInit+0xac>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_UART_MspInit+0xac>)
 80020de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_UART_MspInit+0xac>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_UART_MspInit+0xac>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_UART_MspInit+0xac>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_UART_MspInit+0xac>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002108:	230f      	movs	r3, #15
 800210a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002118:	2307      	movs	r3, #7
 800211a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f001 fe97 	bl	8003e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3778      	adds	r7, #120	; 0x78
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40004400 	.word	0x40004400
 8002138:	40021000 	.word	0x40021000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002188:	f000 f8ba 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA1_Channel1_IRQHandler+0x10>)
 8002196:	f001 fdaf 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000508 	.word	0x20000508

080021a4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <ADC1_IRQHandler+0x10>)
 80021aa:	f000 fbe7 	bl	800297c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200004a4 	.word	0x200004a4

080021b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADC2_NDRDY_Pin);
 80021bc:	2040      	movs	r0, #64	; 0x40
 80021be:	f001 ffff 	bl	80041c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADC1_NDRDY_Pin);
 80021c2:	2080      	movs	r0, #128	; 0x80
 80021c4:	f001 fffc 	bl	80041c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80021d2:	f004 f91f 	bl	8006414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200005cc 	.word	0x200005cc

080021e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <SystemInit+0x20>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <SystemInit+0x20>)
 80021ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002208:	f7ff ffea 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <LoopForever+0x6>)
  ldr r1, =_edata
 800220e:	490d      	ldr	r1, [pc, #52]	; (8002244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <LoopForever+0xe>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002224:	4c0a      	ldr	r4, [pc, #40]	; (8002250 <LoopForever+0x16>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002232:	f005 f8b3 	bl	800739c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002236:	f7fe fe21 	bl	8000e7c <main>

0800223a <LoopForever>:

LoopForever:
    b LoopForever
 800223a:	e7fe      	b.n	800223a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800223c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8002248:	0800748c 	.word	0x0800748c
  ldr r2, =_sbss
 800224c:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8002250:	200007e4 	.word	0x200007e4

08002254 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <CAN1_RX0_IRQHandler>

08002256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f001 fc4f 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002266:	200f      	movs	r0, #15
 8002268:	f000 f80e 	bl	8002288 <HAL_InitTick>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	e001      	b.n	800227c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002278:	f7ff fd84 	bl	8001d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800227c:	79fb      	ldrb	r3, [r7, #7]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_InitTick+0x70>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_InitTick+0x6c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fc5b 	bl	8003b6e <HAL_SYSTICK_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d809      	bhi.n	80022d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f001 fc25 	bl	8003b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_InitTick+0x74>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e004      	b.n	80022e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e001      	b.n	80022e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000484 	.word	0x20000484
 80022f8:	2000047c 	.word	0x2000047c
 80022fc:	20000480 	.word	0x20000480

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000484 	.word	0x20000484
 8002324:	200007e0 	.word	0x200007e0

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200007e0 	.word	0x200007e0

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_Delay+0x44>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000484 	.word	0x20000484

08002388 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3360      	adds	r3, #96	; 0x60
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <LL_ADC_SetOffset+0x44>)
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	4313      	orrs	r3, r2
 8002420:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	03fff000 	.word	0x03fff000

08002438 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3360      	adds	r3, #96	; 0x60
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3360      	adds	r3, #96	; 0x60
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3330      	adds	r3, #48	; 0x30
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	4413      	add	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	211f      	movs	r1, #31
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 011f 	and.w	r1, r3, #31
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3314      	adds	r3, #20
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0e5b      	lsrs	r3, r3, #25
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	0d1b      	lsrs	r3, r3, #20
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2107      	movs	r1, #7
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	0d1b      	lsrs	r3, r3, #20
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	431a      	orrs	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0318 	and.w	r3, r3, #24
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b8:	40d9      	lsrs	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	400b      	ands	r3, r1
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	0007ffff 	.word	0x0007ffff

080025dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6093      	str	r3, [r2, #8]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002614:	d101      	bne.n	800261a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800263c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <LL_ADC_IsEnabled+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_ADC_IsEnabled+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d101      	bne.n	80026b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d101      	bne.n	80026dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e12c      	b.n	8002960 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fb59 	bl	8001dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff67 	bl	8002600 <LL_ADC_IsDeepPowerDownEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff4d 	bl	80025dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff82 	bl	8002650 <LL_ADC_IsInternalRegulatorEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff66 	bl	8002628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800275c:	4b82      	ldr	r3, [pc, #520]	; (8002968 <HAL_ADC_Init+0x27c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	4a82      	ldr	r2, [pc, #520]	; (800296c <HAL_ADC_Init+0x280>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002770:	e002      	b.n	8002778 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff64 	bl	8002650 <LL_ADC_IsInternalRegulatorEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0210 	orr.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff75 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 80027b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80c5 	bne.w	800294e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80c1 	bne.w	800294e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027d4:	f043 0202 	orr.w	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff49 	bl	8002678 <LL_ADC_IsEnabled>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027ec:	4860      	ldr	r0, [pc, #384]	; (8002970 <HAL_ADC_Init+0x284>)
 80027ee:	f7ff ff43 	bl	8002678 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4619      	mov	r1, r3
 80027fe:	485d      	ldr	r0, [pc, #372]	; (8002974 <HAL_ADC_Init+0x288>)
 8002800:	f7ff fdc2 	bl	8002388 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7e5b      	ldrb	r3, [r3, #25]
 8002808:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800280e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002814:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800281a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002822:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	045b      	lsls	r3, r3, #17
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b45      	ldr	r3, [pc, #276]	; (8002978 <HAL_ADC_Init+0x28c>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff12 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 800287a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff1f 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002886:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d13d      	bne.n	800290a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d13a      	bne.n	800290a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002898:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b0:	f023 0302 	bic.w	r3, r3, #2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	69b9      	ldr	r1, [r7, #24]
 80028ba:	430b      	orrs	r3, r1
 80028bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d118      	bne.n	80028fa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028d2:	f023 0304 	bic.w	r3, r3, #4
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028ea:	430a      	orrs	r2, r1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	611a      	str	r2, [r3, #16]
 80028f8:	e007      	b.n	800290a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d10c      	bne.n	800292c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f023 010f 	bic.w	r1, r3, #15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
 800292a:	e007      	b.n	800293c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020f 	bic.w	r2, r2, #15
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f023 0303 	bic.w	r3, r3, #3
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
 800294c:	e007      	b.n	800295e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800295e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000047c 	.word	0x2000047c
 800296c:	053e2d63 	.word	0x053e2d63
 8002970:	50040000 	.word	0x50040000
 8002974:	50040300 	.word	0x50040300
 8002978:	fff0c007 	.word	0xfff0c007

0800297c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d017      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x56>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fdb3 	bl	8003530 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_IRQHandler+0x6a>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05e      	beq.n	8002aae <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d059      	beq.n	8002aae <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd3f 	bl	800249a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03e      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d135      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d12e      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fe29 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11a      	bne.n	8002a88 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 020c 	bic.w	r2, r2, #12
 8002a60:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d112      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
 8002a86:	e00b      	b.n	8002aa0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f043 0210 	orr.w	r2, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f91f 	bl	8002ce4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	220c      	movs	r2, #12
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_IRQHandler+0x146>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d072      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06d      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fd10 	bl	8002518 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002af8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fccb 	bl	800249a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b04:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d047      	beq.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x1b2>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d03f      	beq.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d13a      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d133      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d12e      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fdba 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11a      	bne.n	8002b8c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d112      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
 8002b8a:	e00b      	b.n	8002ba4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f043 0210 	orr.w	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fc9b 	bl	80034e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2260      	movs	r2, #96	; 0x60
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d011      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x264>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f890 	bl	8002cf8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d012      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x294>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fc81 	bl	8003508 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d012      	beq.n	8002c40 <HAL_ADC_IRQHandler+0x2c4>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fc73 	bl	800351c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d02a      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x324>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d025      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	e008      	b.n	8002c74 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002c70:	2301      	movs	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d10e      	bne.n	8002c98 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f83a 	bl	8002d0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d018      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x360>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	f043 0208 	orr.w	r2, r3, #8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fc0c 	bl	80034f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002cdc:	bf00      	nop
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0b6      	sub	sp, #216	; 0xd8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x22>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e3b9      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x796>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fca5 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 839e 	bne.w	8003498 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d824      	bhi.n	8002dae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	3b02      	subs	r3, #2
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d81b      	bhi.n	8002da6 <HAL_ADC_ConfigChannel+0x86>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_ADC_ConfigChannel+0x54>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d8d 	.word	0x08002d8d
 8002d7c:	08002d95 	.word	0x08002d95
 8002d80:	08002d9d 	.word	0x08002d9d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	220c      	movs	r2, #12
 8002d88:	605a      	str	r2, [r3, #4]
          break;
 8002d8a:	e010      	b.n	8002dae <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2212      	movs	r2, #18
 8002d90:	605a      	str	r2, [r3, #4]
          break;
 8002d92:	e00c      	b.n	8002dae <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2218      	movs	r2, #24
 8002d98:	605a      	str	r2, [r3, #4]
          break;
 8002d9a:	e008      	b.n	8002dae <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da2:	605a      	str	r2, [r3, #4]
          break;
 8002da4:	e003      	b.n	8002dae <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2206      	movs	r2, #6
 8002daa:	605a      	str	r2, [r3, #4]
          break;
 8002dac:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff fb80 	bl	80024c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fc6a 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002dca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc76 	bl	80026c4 <LL_ADC_INJ_IsConversionOngoing>
 8002dd8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ddc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f040 81a6 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 81a1 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f7ff fb9e 	bl	800253e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d00a      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6919      	ldr	r1, [r3, #16]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e34:	f7ff fadc 	bl	80023f0 <LL_ADC_SetOffset>
 8002e38:	e17b      	b.n	8003132 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff faf9 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x146>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff faee 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	e01e      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x184>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fae3 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8002e94:	2320      	movs	r3, #32
 8002e96:	e004      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x19c>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	e018      	b.n	8002eee <HAL_ADC_ConfigChannel+0x1ce>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8002ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d106      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fab2 	bl	8002464 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fa96 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x20c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fa8b 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 021f 	and.w	r2, r3, #31
 8002f2a:	e01e      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x24a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fa80 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e004      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x262>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e9b      	lsrs	r3, r3, #26
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	e018      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x294>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e004      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8002faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fa4f 	bl	8002464 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fa33 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x2d2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fa28 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	e01e      	b.n	8003030 <HAL_ADC_ConfigChannel+0x310>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fa1d 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e004      	b.n	800302e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x328>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	e016      	b.n	8003076 <HAL_ADC_ConfigChannel+0x356>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800305a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800305c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 800306c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003076:	429a      	cmp	r2, r3
 8003078:	d106      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f9ee 	bl	8002464 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f9d2 	bl	8002438 <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x394>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2103      	movs	r1, #3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f9c7 	bl	8002438 <LL_ADC_GetOffsetChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 021f 	and.w	r2, r3, #31
 80030b2:	e017      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x3c4>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2103      	movs	r1, #3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f9bc 	bl	8002438 <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80030cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e003      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80030da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x3dc>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	e011      	b.n	8003120 <HAL_ADC_ConfigChannel+0x400>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800310a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e003      	b.n	8003120 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003120:	429a      	cmp	r2, r3
 8003122:	d106      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2200      	movs	r2, #0
 800312a:	2103      	movs	r1, #3
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff f999 	bl	8002464 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fa9e 	bl	8002678 <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8140 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	461a      	mov	r2, r3
 8003152:	f7ff fa1f 	bl	8002594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a8f      	ldr	r2, [pc, #572]	; (8003398 <HAL_ADC_ConfigChannel+0x678>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f040 8131 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <HAL_ADC_ConfigChannel+0x46a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	3301      	adds	r3, #1
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2b09      	cmp	r3, #9
 8003180:	bf94      	ite	ls
 8003182:	2301      	movls	r3, #1
 8003184:	2300      	movhi	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e019      	b.n	80031be <HAL_ADC_ConfigChannel+0x49e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800319a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800319c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e003      	b.n	80031ae <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80031a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d079      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4be>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	0e9b      	lsrs	r3, r3, #26
 80031d4:	3301      	adds	r3, #1
 80031d6:	069b      	lsls	r3, r3, #26
 80031d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031dc:	e015      	b.n	800320a <HAL_ADC_ConfigChannel+0x4ea>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e003      	b.n	8003202 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80031fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3301      	adds	r3, #1
 8003204:	069b      	lsls	r3, r3, #26
 8003206:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_ADC_ConfigChannel+0x50a>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	e017      	b.n	800325a <HAL_ADC_ConfigChannel+0x53a>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800323c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e003      	b.n	800324e <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8003246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	ea42 0103 	orr.w	r1, r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x560>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	3301      	adds	r3, #1
 8003272:	f003 021f 	and.w	r2, r3, #31
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	051b      	lsls	r3, r3, #20
 800327e:	e018      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x592>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b2:	430b      	orrs	r3, r1
 80032b4:	e081      	b.n	80033ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x5b2>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0e9b      	lsrs	r3, r3, #26
 80032c8:	3301      	adds	r3, #1
 80032ca:	069b      	lsls	r3, r3, #26
 80032cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d0:	e015      	b.n	80032fe <HAL_ADC_ConfigChannel+0x5de>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80032ea:	2320      	movs	r3, #32
 80032ec:	e003      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	069b      	lsls	r3, r3, #26
 80032fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_ADC_ConfigChannel+0x5fe>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	3301      	adds	r3, #1
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	e017      	b.n	800334e <HAL_ADC_ConfigChannel+0x62e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	61fb      	str	r3, [r7, #28]
  return result;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e003      	b.n	8003342 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	ea42 0103 	orr.w	r1, r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <HAL_ADC_ConfigChannel+0x65a>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	0e9b      	lsrs	r3, r3, #26
 8003364:	3301      	adds	r3, #1
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	3b1e      	subs	r3, #30
 8003372:	051b      	lsls	r3, r3, #20
 8003374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003378:	e01e      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x698>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	613b      	str	r3, [r7, #16]
  return result;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003392:	2320      	movs	r3, #32
 8003394:	e006      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x684>
 8003396:	bf00      	nop
 8003398:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b1e      	subs	r3, #30
 80033b2:	051b      	lsls	r3, r3, #20
 80033b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	430b      	orrs	r3, r1
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	4619      	mov	r1, r3
 80033c0:	f7ff f8bd 	bl	800253e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_ADC_ConfigChannel+0x7a0>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d06c      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d0:	483c      	ldr	r0, [pc, #240]	; (80034c4 <HAL_ADC_ConfigChannel+0x7a4>)
 80033d2:	f7fe ffff 	bl	80023d4 <LL_ADC_GetCommonPathInternalCh>
 80033d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_ADC_ConfigChannel+0x7a8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d127      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d121      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <HAL_ADC_ConfigChannel+0x7ac>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d157      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003402:	4619      	mov	r1, r3
 8003404:	482f      	ldr	r0, [pc, #188]	; (80034c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003406:	f7fe ffd2 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_ADC_ConfigChannel+0x7b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	099b      	lsrs	r3, r3, #6
 8003410:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003424:	e002      	b.n	800342c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3b01      	subs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f9      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003432:	e03a      	b.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d113      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x746>
 800343e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <HAL_ADC_ConfigChannel+0x7ac>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12a      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345c:	4619      	mov	r1, r3
 800345e:	4819      	ldr	r0, [pc, #100]	; (80034c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003460:	f7fe ffa5 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003464:	e021      	b.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <HAL_ADC_ConfigChannel+0x7bc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d11c      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_ADC_ConfigChannel+0x7ac>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d111      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800348a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800348e:	4619      	mov	r1, r3
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003492:	f7fe ff8c 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
 8003496:	e008      	b.n	80034aa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	37d8      	adds	r7, #216	; 0xd8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	80080000 	.word	0x80080000
 80034c4:	50040300 	.word	0x50040300
 80034c8:	c7520000 	.word	0xc7520000
 80034cc:	50040000 	.word	0x50040000
 80034d0:	2000047c 	.word	0x2000047c
 80034d4:	053e2d63 	.word	0x053e2d63
 80034d8:	cb840000 	.word	0xcb840000
 80034dc:	80000001 	.word	0x80000001

080034e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0ed      	b.n	8003732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe fcd0 	bl	8001f08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003578:	f7fe fed6 	bl	8002328 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800357e:	e012      	b.n	80035a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003580:	f7fe fed2 	bl	8002328 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b0a      	cmp	r3, #10
 800358c:	d90b      	bls.n	80035a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2205      	movs	r2, #5
 800359e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0c5      	b.n	8003732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0e5      	beq.n	8003580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0202 	bic.w	r2, r2, #2
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c4:	f7fe feb0 	bl	8002328 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ca:	e012      	b.n	80035f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035cc:	f7fe feac 	bl	8002328 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b0a      	cmp	r3, #10
 80035d8:	d90b      	bls.n	80035f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2205      	movs	r2, #5
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e09f      	b.n	8003732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7e1b      	ldrb	r3, [r3, #24]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e007      	b.n	800362a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7e5b      	ldrb	r3, [r3, #25]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e007      	b.n	8003654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7e9b      	ldrb	r3, [r3, #26]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e007      	b.n	800367e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0220 	bic.w	r2, r2, #32
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7edb      	ldrb	r3, [r3, #27]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0210 	bic.w	r2, r2, #16
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e007      	b.n	80036a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0210 	orr.w	r2, r2, #16
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7f1b      	ldrb	r3, [r3, #28]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d108      	bne.n	80036c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e007      	b.n	80036d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0208 	bic.w	r2, r2, #8
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7f5b      	ldrb	r3, [r3, #29]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d108      	bne.n	80036ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0204 	orr.w	r2, r2, #4
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	ea42 0103 	orr.w	r1, r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d12e      	bne.n	80037ac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003766:	f7fe fddf 	bl	8002328 <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800376c:	e012      	b.n	8003794 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800376e:	f7fe fddb 	bl	8002328 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b0a      	cmp	r3, #10
 800377a:	d90b      	bls.n	8003794 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2205      	movs	r2, #5
 800378c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e012      	b.n	80037ba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e5      	bne.n	800376e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e006      	b.n	80037ba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b089      	sub	sp, #36	; 0x24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d003      	beq.n	80037ee <HAL_CAN_AddTxMessage+0x2c>
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f040 80ad 	bne.w	8003948 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8095 	beq.w	8003938 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	0e1b      	lsrs	r3, r3, #24
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003818:	2201      	movs	r2, #1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	409a      	lsls	r2, r3
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	6809      	ldr	r1, [r1, #0]
 8003838:	431a      	orrs	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3318      	adds	r3, #24
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	440b      	add	r3, r1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e00f      	b.n	8003866 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003850:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003856:	68f9      	ldr	r1, [r7, #12]
 8003858:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800385a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3318      	adds	r3, #24
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	440b      	add	r3, r1
 8003864:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3318      	adds	r3, #24
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	440b      	add	r3, r1
 8003876:	3304      	adds	r3, #4
 8003878:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	7d1b      	ldrb	r3, [r3, #20]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d111      	bne.n	80038a6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	3318      	adds	r3, #24
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	6811      	ldr	r1, [r2, #0]
 8003896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3318      	adds	r3, #24
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	440b      	add	r3, r1
 80038a2:	3304      	adds	r3, #4
 80038a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3307      	adds	r3, #7
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	061a      	lsls	r2, r3, #24
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3306      	adds	r3, #6
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3305      	adds	r3, #5
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	4313      	orrs	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	3204      	adds	r2, #4
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	4610      	mov	r0, r2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6811      	ldr	r1, [r2, #0]
 80038ce:	ea43 0200 	orr.w	r2, r3, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	440b      	add	r3, r1
 80038d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80038dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3303      	adds	r3, #3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	061a      	lsls	r2, r3, #24
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3302      	adds	r3, #2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3301      	adds	r3, #1
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	4313      	orrs	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	7812      	ldrb	r2, [r2, #0]
 80038fe:	4610      	mov	r0, r2
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	6811      	ldr	r1, [r2, #0]
 8003904:	ea43 0200 	orr.w	r2, r3, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	440b      	add	r3, r1
 800390e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003912:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3318      	adds	r3, #24
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	4413      	add	r3, r2
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6811      	ldr	r1, [r2, #0]
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	3318      	adds	r3, #24
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	440b      	add	r3, r1
 8003932:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e00e      	b.n	8003956 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e006      	b.n	8003956 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad0:	d301      	bcc.n	8003ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <SysTick_Config+0x40>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ade:	210f      	movs	r1, #15
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f7ff ff8e 	bl	8003a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <SysTick_Config+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <SysTick_Config+0x40>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff29 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2c:	f7ff ff3e 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff8e 	bl	8003a58 <NVIC_EncodePriority>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff5d 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff31 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffa2 	bl	8003ac0 <SysTick_Config>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e098      	b.n	8003ccc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b4d      	ldr	r3, [pc, #308]	; (8003cd8 <HAL_DMA_Init+0x150>)
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d80f      	bhi.n	8003bc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_DMA_Init+0x154>)
 8003bae:	4413      	add	r3, r2
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <HAL_DMA_Init+0x158>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	009a      	lsls	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <HAL_DMA_Init+0x15c>)
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8003bc4:	e00e      	b.n	8003be4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_DMA_Init+0x160>)
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a43      	ldr	r2, [pc, #268]	; (8003ce0 <HAL_DMA_Init+0x158>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a42      	ldr	r2, [pc, #264]	; (8003cec <HAL_DMA_Init+0x164>)
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c3e:	d039      	beq.n	8003cb4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_DMA_Init+0x15c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d11a      	bne.n	8003c80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_DMA_Init+0x168>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f003 031c 	and.w	r3, r3, #28
 8003c56:	210f      	movs	r1, #15
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	4924      	ldr	r1, [pc, #144]	; (8003cf0 <HAL_DMA_Init+0x168>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_DMA_Init+0x168>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	f003 031c 	and.w	r3, r3, #28
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	491d      	ldr	r1, [pc, #116]	; (8003cf0 <HAL_DMA_Init+0x168>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
 8003c7e:	e019      	b.n	8003cb4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <HAL_DMA_Init+0x16c>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 031c 	and.w	r3, r3, #28
 8003c8c:	210f      	movs	r1, #15
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	4917      	ldr	r1, [pc, #92]	; (8003cf4 <HAL_DMA_Init+0x16c>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_DMA_Init+0x16c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f003 031c 	and.w	r3, r3, #28
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	4911      	ldr	r1, [pc, #68]	; (8003cf4 <HAL_DMA_Init+0x16c>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40020407 	.word	0x40020407
 8003cdc:	bffdfff8 	.word	0xbffdfff8
 8003ce0:	cccccccd 	.word	0xcccccccd
 8003ce4:	40020000 	.word	0x40020000
 8003ce8:	bffdfbf8 	.word	0xbffdfbf8
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	400200a8 	.word	0x400200a8
 8003cf4:	400204a8 	.word	0x400204a8

08003cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	f003 031c 	and.w	r3, r3, #28
 8003d18:	2204      	movs	r2, #4
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d026      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x7a>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d021      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d107      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f003 021c 	and.w	r2, r3, #28
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	2104      	movs	r1, #4
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d071      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d70:	e06c      	b.n	8003e4c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f003 031c 	and.w	r3, r3, #28
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02e      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xec>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d029      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 020a 	bic.w	r2, r2, #10
 8003dac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f003 021c 	and.w	r2, r3, #28
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d038      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003de2:	e033      	b.n	8003e4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f003 031c 	and.w	r3, r3, #28
 8003dec:	2208      	movs	r2, #8
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x156>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d025      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 020e 	bic.w	r2, r2, #14
 8003e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f003 021c 	and.w	r2, r3, #28
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2101      	movs	r1, #1
 8003e20:	fa01 f202 	lsl.w	r2, r1, r2
 8003e24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
}
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e66:	e148      	b.n	80040fa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	4013      	ands	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 813a 	beq.w	80040f4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d005      	beq.n	8003e98 <HAL_GPIO_Init+0x40>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d130      	bne.n	8003efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ece:	2201      	movs	r2, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0201 	and.w	r2, r3, #1
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d017      	beq.n	8003f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d123      	bne.n	8003f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	08da      	lsrs	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3208      	adds	r2, #8
 8003f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	220f      	movs	r2, #15
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0203 	and.w	r2, r3, #3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8094 	beq.w	80040f4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fcc:	4b52      	ldr	r3, [pc, #328]	; (8004118 <HAL_GPIO_Init+0x2c0>)
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	4a51      	ldr	r2, [pc, #324]	; (8004118 <HAL_GPIO_Init+0x2c0>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003fd8:	4b4f      	ldr	r3, [pc, #316]	; (8004118 <HAL_GPIO_Init+0x2c0>)
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fe4:	4a4d      	ldr	r2, [pc, #308]	; (800411c <HAL_GPIO_Init+0x2c4>)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	220f      	movs	r2, #15
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800400e:	d00d      	beq.n	800402c <HAL_GPIO_Init+0x1d4>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a43      	ldr	r2, [pc, #268]	; (8004120 <HAL_GPIO_Init+0x2c8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <HAL_GPIO_Init+0x1d0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a42      	ldr	r2, [pc, #264]	; (8004124 <HAL_GPIO_Init+0x2cc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_GPIO_Init+0x1cc>
 8004020:	2302      	movs	r3, #2
 8004022:	e004      	b.n	800402e <HAL_GPIO_Init+0x1d6>
 8004024:	2307      	movs	r3, #7
 8004026:	e002      	b.n	800402e <HAL_GPIO_Init+0x1d6>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_GPIO_Init+0x1d6>
 800402c:	2300      	movs	r3, #0
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	f002 0203 	and.w	r2, r2, #3
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	4093      	lsls	r3, r2
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800403e:	4937      	ldr	r1, [pc, #220]	; (800411c <HAL_GPIO_Init+0x2c4>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3302      	adds	r3, #2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004070:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409a:	4a23      	ldr	r2, [pc, #140]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040ee:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <HAL_GPIO_Init+0x2d0>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3301      	adds	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f aeaf 	bne.w	8003e68 <HAL_GPIO_Init+0x10>
  }
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40021000 	.word	0x40021000
 800411c:	40010000 	.word	0x40010000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000800 	.word	0x48000800
 8004128:	40010400 	.word	0x40010400

0800412c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	e001      	b.n	800414e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004178:	e002      	b.n	8004180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4013      	ands	r3, r2
 80041a4:	041a      	lsls	r2, r3, #16
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43d9      	mvns	r1, r3
 80041aa:	887b      	ldrh	r3, [r7, #2]
 80041ac:	400b      	ands	r3, r1
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d006      	beq.n	80041e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f806 	bl	80041f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40010400 	.word	0x40010400

080041f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e081      	b.n	800431c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd feaf 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2224      	movs	r2, #36	; 0x24
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004256:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004266:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	e006      	b.n	800428e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800428c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d104      	bne.n	80042a0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800429e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69d9      	ldr	r1, [r3, #28]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	461a      	mov	r2, r3
 8004330:	460b      	mov	r3, r1
 8004332:	817b      	strh	r3, [r7, #10]
 8004334:	4613      	mov	r3, r2
 8004336:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	f040 80da 	bne.w	80044fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_I2C_Master_Transmit+0x30>
 8004350:	2302      	movs	r3, #2
 8004352:	e0d3      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1d8>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800435c:	f7fd ffe4 	bl	8002328 <HAL_GetTick>
 8004360:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	2319      	movs	r3, #25
 8004368:	2201      	movs	r2, #1
 800436a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 faed 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0be      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2221      	movs	r2, #33	; 0x21
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2210      	movs	r2, #16
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	893a      	ldrh	r2, [r7, #8]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2bff      	cmp	r3, #255	; 0xff
 80043ae:	d90e      	bls.n	80043ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	22ff      	movs	r2, #255	; 0xff
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	8979      	ldrh	r1, [r7, #10]
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_I2C_Master_Transmit+0x1e0>)
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fce4 	bl	8004d94 <I2C_TransferConfig>
 80043cc:	e06c      	b.n	80044a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	8979      	ldrh	r1, [r7, #10]
 80043e0:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_I2C_Master_Transmit+0x1e0>)
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fcd3 	bl	8004d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80043ee:	e05b      	b.n	80044a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6a39      	ldr	r1, [r7, #32]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 faea 	bl	80049ce <I2C_WaitOnTXISFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e07b      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d034      	beq.n	80044a8 <HAL_I2C_Master_Transmit+0x184>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d130      	bne.n	80044a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fa7c 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e04d      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2bff      	cmp	r3, #255	; 0xff
 8004468:	d90e      	bls.n	8004488 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	b2da      	uxtb	r2, r3
 8004476:	8979      	ldrh	r1, [r7, #10]
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fc87 	bl	8004d94 <I2C_TransferConfig>
 8004486:	e00f      	b.n	80044a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	b2da      	uxtb	r2, r3
 8004498:	8979      	ldrh	r1, [r7, #10]
 800449a:	2300      	movs	r3, #0
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fc76 	bl	8004d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d19e      	bne.n	80043f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fac9 	bl	8004a4e <I2C_WaitOnSTOPFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e01a      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2220      	movs	r2, #32
 80044cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_I2C_Master_Transmit+0x1e4>)
 80044da:	400b      	ands	r3, r1
 80044dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
  }
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	80002000 	.word	0x80002000
 8004508:	fe00e800 	.word	0xfe00e800

0800450c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	460b      	mov	r3, r1
 800451a:	817b      	strh	r3, [r7, #10]
 800451c:	4613      	mov	r3, r2
 800451e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b20      	cmp	r3, #32
 800452a:	f040 80db 	bne.w	80046e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_I2C_Master_Receive+0x30>
 8004538:	2302      	movs	r3, #2
 800453a:	e0d4      	b.n	80046e6 <HAL_I2C_Master_Receive+0x1da>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004544:	f7fd fef0 	bl	8002328 <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2319      	movs	r3, #25
 8004550:	2201      	movs	r2, #1
 8004552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f9f9 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e0bf      	b.n	80046e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2222      	movs	r2, #34	; 0x22
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2210      	movs	r2, #16
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	893a      	ldrh	r2, [r7, #8]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2bff      	cmp	r3, #255	; 0xff
 8004596:	d90e      	bls.n	80045b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	22ff      	movs	r2, #255	; 0xff
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	8979      	ldrh	r1, [r7, #10]
 80045a6:	4b52      	ldr	r3, [pc, #328]	; (80046f0 <HAL_I2C_Master_Receive+0x1e4>)
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fbf0 	bl	8004d94 <I2C_TransferConfig>
 80045b4:	e06d      	b.n	8004692 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	8979      	ldrh	r1, [r7, #10]
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <HAL_I2C_Master_Receive+0x1e4>)
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fbdf 	bl	8004d94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80045d6:	e05c      	b.n	8004692 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	6a39      	ldr	r1, [r7, #32]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fa73 	bl	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e07c      	b.n	80046e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d034      	beq.n	8004692 <HAL_I2C_Master_Receive+0x186>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	d130      	bne.n	8004692 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2200      	movs	r2, #0
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f987 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e04d      	b.n	80046e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	2bff      	cmp	r3, #255	; 0xff
 8004652:	d90e      	bls.n	8004672 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	22ff      	movs	r2, #255	; 0xff
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	b2da      	uxtb	r2, r3
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	2300      	movs	r3, #0
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fb92 	bl	8004d94 <I2C_TransferConfig>
 8004670:	e00f      	b.n	8004692 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	b2da      	uxtb	r2, r3
 8004682:	8979      	ldrh	r1, [r7, #10]
 8004684:	2300      	movs	r3, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fb81 	bl	8004d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d19d      	bne.n	80045d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	6a39      	ldr	r1, [r7, #32]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f9d4 	bl	8004a4e <I2C_WaitOnSTOPFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e01a      	b.n	80046e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2220      	movs	r2, #32
 80046b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <HAL_I2C_Master_Receive+0x1e8>)
 80046c4:	400b      	ands	r3, r1
 80046c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	80002400 	.word	0x80002400
 80046f4:	fe00e800 	.word	0xfe00e800

080046f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	460b      	mov	r3, r1
 8004706:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	f040 80f1 	bne.w	80048fc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004728:	d101      	bne.n	800472e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800472a:	2302      	movs	r3, #2
 800472c:	e0e7      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2C_IsDeviceReady+0x44>
 8004738:	2302      	movs	r3, #2
 800473a:	e0e0      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_I2C_IsDeviceReady+0x72>
 800475a:	897b      	ldrh	r3, [r7, #10]
 800475c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004768:	e004      	b.n	8004774 <HAL_I2C_IsDeviceReady+0x7c>
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004770:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800477a:	f7fd fdd5 	bl	8002328 <HAL_GetTick>
 800477e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80047ac:	e034      	b.n	8004818 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d01a      	beq.n	80047ec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fd fdb7 	bl	8002328 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <HAL_I2C_IsDeviceReady+0xd4>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e088      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b10      	cmp	r3, #16
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004818:	7ffb      	ldrb	r3, [r7, #31]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <HAL_I2C_IsDeviceReady+0x12c>
 800481e:	7fbb      	ldrb	r3, [r7, #30]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0c4      	beq.n	80047ae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b10      	cmp	r3, #16
 8004830:	d01a      	beq.n	8004868 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2200      	movs	r2, #0
 800483a:	2120      	movs	r1, #32
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f886 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e058      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2220      	movs	r2, #32
 8004852:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	e04a      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	2120      	movs	r1, #32
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f86b 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e03d      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2210      	movs	r2, #16
 8004888:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2220      	movs	r2, #32
 8004890:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d118      	bne.n	80048cc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2200      	movs	r2, #0
 80048b2:	2120      	movs	r1, #32
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f84a 	bl	800494e <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e01c      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2220      	movs	r2, #32
 80048ca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3301      	adds	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f63f af3b 	bhi.w	8004752 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d103      	bne.n	8004924 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d007      	beq.n	8004942 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	619a      	str	r2, [r3, #24]
  }
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800495e:	e022      	b.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d01e      	beq.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7fd fcde 	bl	8002328 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d113      	bne.n	80049a6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f043 0220 	orr.w	r2, r3, #32
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e00f      	b.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d0cd      	beq.n	8004960 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049da:	e02c      	b.n	8004a36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f8eb 	bl	8004bbc <I2C_IsErrorOccurred>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e02a      	b.n	8004a46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d01e      	beq.n	8004a36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f8:	f7fd fc96 	bl	8002328 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e007      	b.n	8004a46 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d1cb      	bne.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a5a:	e028      	b.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f8ab 	bl	8004bbc <I2C_IsErrorOccurred>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e026      	b.n	8004abe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a70:	f7fd fc5a 	bl	8002328 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d113      	bne.n	8004aae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e007      	b.n	8004abe <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d1cf      	bne.n	8004a5c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ad4:	e064      	b.n	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f86e 	bl	8004bbc <I2C_IsErrorOccurred>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e062      	b.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d138      	bne.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d105      	bne.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e04e      	b.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d107      	bne.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2210      	movs	r2, #16
 8004b26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b2e:	e002      	b.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004b4a:	400b      	ands	r3, r1
 8004b4c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e022      	b.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fd fbdd 	bl	8002328 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10f      	bne.n	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e007      	b.n	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d193      	bne.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	fe00e800 	.word	0xfe00e800

08004bbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d075      	beq.n	8004cd4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2210      	movs	r2, #16
 8004bee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bf0:	e056      	b.n	8004ca0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d052      	beq.n	8004ca0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fd fb95 	bl	8002328 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_IsErrorOccurred+0x54>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d147      	bne.n	8004ca0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c32:	d12e      	bne.n	8004c92 <I2C_IsErrorOccurred+0xd6>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3a:	d02a      	beq.n	8004c92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004c3c:	7cfb      	ldrb	r3, [r7, #19]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d027      	beq.n	8004c92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c52:	f7fd fb69 	bl	8002328 <HAL_GetTick>
 8004c56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c58:	e01b      	b.n	8004c92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c5a:	f7fd fb65 	bl	8002328 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b19      	cmp	r3, #25
 8004c66:	d914      	bls.n	8004c92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d1dc      	bne.n	8004c5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d003      	beq.n	8004cb6 <I2C_IsErrorOccurred+0xfa>
 8004cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d09d      	beq.n	8004bf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f043 0308 	orr.w	r3, r3, #8
 8004d0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01c      	beq.n	8004d84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fddb 	bl	8004906 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <I2C_IsErrorOccurred+0x1d4>)
 8004d5c:	400b      	ands	r3, r1
 8004d5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3728      	adds	r7, #40	; 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	fe00e800 	.word	0xfe00e800

08004d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	817b      	strh	r3, [r7, #10]
 8004da2:	4613      	mov	r3, r2
 8004da4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dac:	7a7b      	ldrb	r3, [r7, #9]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004db4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	0d5b      	lsrs	r3, r3, #21
 8004dce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <I2C_TransferConfig+0x60>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	ea02 0103 	and.w	r1, r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	03ff63ff 	.word	0x03ff63ff

08004df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d138      	bne.n	8004e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e032      	b.n	8004e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	; 0x24
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6819      	ldr	r1, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d139      	bne.n	8004f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e033      	b.n	8004f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2224      	movs	r2, #36	; 0x24
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4905      	ldr	r1, [pc, #20]	; (8004f64 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40010000 	.word	0x40010000

08004f68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40007000 	.word	0x40007000

08004f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f92:	d130      	bne.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f94:	4b23      	ldr	r3, [pc, #140]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d038      	beq.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fa2:	4b20      	ldr	r3, [pc, #128]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2232      	movs	r2, #50	; 0x32
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	; (800502c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	0c9b      	lsrs	r3, r3, #18
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc8:	e002      	b.n	8004fd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fdc:	d102      	bne.n	8004fe4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f2      	bne.n	8004fca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d110      	bne.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e00f      	b.n	8005016 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005002:	d007      	beq.n	8005014 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800500c:	4a05      	ldr	r2, [pc, #20]	; (8005024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800500e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005012:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40007000 	.word	0x40007000
 8005028:	2000047c 	.word	0x2000047c
 800502c:	431bde83 	.word	0x431bde83

08005030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f000 bc02 	b.w	8005848 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005044:	4b96      	ldr	r3, [pc, #600]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800504e:	4b94      	ldr	r3, [pc, #592]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80e4 	beq.w	800522e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <HAL_RCC_OscConfig+0x4c>
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	f040 808b 	bne.w	800518a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	f040 8087 	bne.w	800518a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800507c:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_OscConfig+0x64>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e3d9      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	4b81      	ldr	r3, [pc, #516]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_RCC_OscConfig+0x7e>
 80050a4:	4b7e      	ldr	r3, [pc, #504]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ac:	e005      	b.n	80050ba <HAL_RCC_OscConfig+0x8a>
 80050ae:	4b7c      	ldr	r3, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d223      	bcs.n	8005106 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fd8c 	bl	8005be0 <RCC_SetFlashLatencyFromMSIRange>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e3ba      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d2:	4b73      	ldr	r3, [pc, #460]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a72      	ldr	r2, [pc, #456]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050d8:	f043 0308 	orr.w	r3, r3, #8
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b70      	ldr	r3, [pc, #448]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	496d      	ldr	r1, [pc, #436]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f0:	4b6b      	ldr	r3, [pc, #428]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4968      	ldr	r1, [pc, #416]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
 8005104:	e025      	b.n	8005152 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005106:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a65      	ldr	r2, [pc, #404]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 800510c:	f043 0308 	orr.w	r3, r3, #8
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4960      	ldr	r1, [pc, #384]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005124:	4b5e      	ldr	r3, [pc, #376]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	495b      	ldr	r1, [pc, #364]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fd4c 	bl	8005be0 <RCC_SetFlashLatencyFromMSIRange>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e37a      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005152:	f000 fc81 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8005156:	4602      	mov	r2, r0
 8005158:	4b51      	ldr	r3, [pc, #324]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	4950      	ldr	r1, [pc, #320]	; (80052a4 <HAL_RCC_OscConfig+0x274>)
 8005164:	5ccb      	ldrb	r3, [r1, r3]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	fa22 f303 	lsr.w	r3, r2, r3
 800516e:	4a4e      	ldr	r2, [pc, #312]	; (80052a8 <HAL_RCC_OscConfig+0x278>)
 8005170:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005172:	4b4e      	ldr	r3, [pc, #312]	; (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fd f886 	bl	8002288 <HAL_InitTick>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d052      	beq.n	800522c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	e35e      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d032      	beq.n	80051f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005192:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a42      	ldr	r2, [pc, #264]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800519e:	f7fd f8c3 	bl	8002328 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051a6:	f7fd f8bf 	bl	8002328 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e347      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051c4:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a35      	ldr	r2, [pc, #212]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051ca:	f043 0308 	orr.w	r3, r3, #8
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4930      	ldr	r1, [pc, #192]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051e2:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	492b      	ldr	r1, [pc, #172]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	604b      	str	r3, [r1, #4]
 80051f6:	e01a      	b.n	800522e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051f8:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a28      	ldr	r2, [pc, #160]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005204:	f7fd f890 	bl	8002328 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800520c:	f7fd f88c 	bl	8002328 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e314      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800521e:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x1dc>
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800522c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d073      	beq.n	8005322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d005      	beq.n	800524c <HAL_RCC_OscConfig+0x21c>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d10e      	bne.n	8005264 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d10b      	bne.n	8005264 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d063      	beq.n	8005320 <HAL_RCC_OscConfig+0x2f0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d15f      	bne.n	8005320 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e2f1      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d106      	bne.n	800527c <HAL_RCC_OscConfig+0x24c>
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e025      	b.n	80052c8 <HAL_RCC_OscConfig+0x298>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005284:	d114      	bne.n	80052b0 <HAL_RCC_OscConfig+0x280>
 8005286:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 800528c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a02      	ldr	r2, [pc, #8]	; (80052a0 <HAL_RCC_OscConfig+0x270>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e013      	b.n	80052c8 <HAL_RCC_OscConfig+0x298>
 80052a0:	40021000 	.word	0x40021000
 80052a4:	08007434 	.word	0x08007434
 80052a8:	2000047c 	.word	0x2000047c
 80052ac:	20000480 	.word	0x20000480
 80052b0:	4ba0      	ldr	r3, [pc, #640]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a9f      	ldr	r2, [pc, #636]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b9d      	ldr	r3, [pc, #628]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a9c      	ldr	r2, [pc, #624]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fd f82a 	bl	8002328 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fd f826 	bl	8002328 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e2ae      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ea:	4b92      	ldr	r3, [pc, #584]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2a8>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fd f816 	bl	8002328 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005300:	f7fd f812 	bl	8002328 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	; 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e29a      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005312:	4b88      	ldr	r3, [pc, #544]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x2d0>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d060      	beq.n	80053f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d005      	beq.n	8005340 <HAL_RCC_OscConfig+0x310>
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d119      	bne.n	800536e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d116      	bne.n	800536e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005340:	4b7c      	ldr	r3, [pc, #496]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_OscConfig+0x328>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e277      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4b76      	ldr	r3, [pc, #472]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	4973      	ldr	r1, [pc, #460]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005368:	4313      	orrs	r3, r2
 800536a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800536c:	e040      	b.n	80053f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d023      	beq.n	80053be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005376:	4b6f      	ldr	r3, [pc, #444]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6e      	ldr	r2, [pc, #440]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800537c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fc ffd1 	bl	8002328 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800538a:	f7fc ffcd 	bl	8002328 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e255      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800539c:	4b65      	ldr	r3, [pc, #404]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a8:	4b62      	ldr	r3, [pc, #392]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	495f      	ldr	r1, [pc, #380]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	e018      	b.n	80053f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053be:	4b5d      	ldr	r3, [pc, #372]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5c      	ldr	r2, [pc, #368]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80053c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fc ffad 	bl	8002328 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d2:	f7fc ffa9 	bl	8002328 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e231      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053e4:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d03c      	beq.n	8005476 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01c      	beq.n	800543e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005404:	4b4b      	ldr	r3, [pc, #300]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540a:	4a4a      	ldr	r2, [pc, #296]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005414:	f7fc ff88 	bl	8002328 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800541c:	f7fc ff84 	bl	8002328 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e20c      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800542e:	4b41      	ldr	r3, [pc, #260]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ef      	beq.n	800541c <HAL_RCC_OscConfig+0x3ec>
 800543c:	e01b      	b.n	8005476 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800543e:	4b3d      	ldr	r3, [pc, #244]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005444:	4a3b      	ldr	r2, [pc, #236]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544e:	f7fc ff6b 	bl	8002328 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005456:	f7fc ff67 	bl	8002328 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e1ef      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800546a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ef      	bne.n	8005456 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80a6 	beq.w	80055d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005488:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b27      	ldr	r3, [pc, #156]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	4a26      	ldr	r2, [pc, #152]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6593      	str	r3, [r2, #88]	; 0x58
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ac:	2301      	movs	r3, #1
 80054ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b0:	4b21      	ldr	r3, [pc, #132]	; (8005538 <HAL_RCC_OscConfig+0x508>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d118      	bne.n	80054ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054bc:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <HAL_RCC_OscConfig+0x508>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <HAL_RCC_OscConfig+0x508>)
 80054c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c8:	f7fc ff2e 	bl	8002328 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d0:	f7fc ff2a 	bl	8002328 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1b2      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_RCC_OscConfig+0x508>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d108      	bne.n	8005508 <HAL_RCC_OscConfig+0x4d8>
 80054f6:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005506:	e029      	b.n	800555c <HAL_RCC_OscConfig+0x52c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b05      	cmp	r3, #5
 800550e:	d115      	bne.n	800553c <HAL_RCC_OscConfig+0x50c>
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	4a07      	ldr	r2, [pc, #28]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005518:	f043 0304 	orr.w	r3, r3, #4
 800551c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	4a03      	ldr	r2, [pc, #12]	; (8005534 <HAL_RCC_OscConfig+0x504>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005530:	e014      	b.n	800555c <HAL_RCC_OscConfig+0x52c>
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	40007000 	.word	0x40007000
 800553c:	4b9a      	ldr	r3, [pc, #616]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	4a99      	ldr	r2, [pc, #612]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800554c:	4b96      	ldr	r3, [pc, #600]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	4a95      	ldr	r2, [pc, #596]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d016      	beq.n	8005592 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fc fee0 	bl	8002328 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fc fedc 	bl	8002328 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e162      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ed      	beq.n	800556c <HAL_RCC_OscConfig+0x53c>
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005592:	f7fc fec9 	bl	8002328 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fc fec5 	bl	8002328 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e14b      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b0:	4b7d      	ldr	r3, [pc, #500]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ed      	bne.n	800559a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055be:	7ffb      	ldrb	r3, [r7, #31]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c4:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	4a77      	ldr	r2, [pc, #476]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d03c      	beq.n	8005656 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01c      	beq.n	800561e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055e4:	4b70      	ldr	r3, [pc, #448]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80055e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ea:	4a6f      	ldr	r2, [pc, #444]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fc fe98 	bl	8002328 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055fc:	f7fc fe94 	bl	8002328 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e11c      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800560e:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <HAL_RCC_OscConfig+0x5cc>
 800561c:	e01b      	b.n	8005656 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800561e:	4b62      	ldr	r3, [pc, #392]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005624:	4a60      	ldr	r2, [pc, #384]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fc fe7b 	bl	8002328 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005636:	f7fc fe77 	bl	8002328 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0ff      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005648:	4b57      	ldr	r3, [pc, #348]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 800564a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ef      	bne.n	8005636 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80f3 	beq.w	8005846 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	2b02      	cmp	r3, #2
 8005666:	f040 80c9 	bne.w	80057fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800566a:	4b4f      	ldr	r3, [pc, #316]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	429a      	cmp	r2, r3
 800567c:	d12c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	3b01      	subs	r3, #1
 800568a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d123      	bne.n	80056d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800569c:	429a      	cmp	r2, r3
 800569e:	d11b      	bne.n	80056d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d113      	bne.n	80056d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	3b01      	subs	r3, #1
 80056be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d109      	bne.n	80056d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	3b01      	subs	r3, #1
 80056d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d06b      	beq.n	80057b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d062      	beq.n	80057a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056de:	4b32      	ldr	r3, [pc, #200]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0ac      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 80056f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056fa:	f7fc fe15 	bl	8002328 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005702:	f7fc fe11 	bl	8002328 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e099      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	4b21      	ldr	r3, [pc, #132]	; (80057ac <HAL_RCC_OscConfig+0x77c>)
 8005726:	4013      	ands	r3, r2
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005730:	3a01      	subs	r2, #1
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800573a:	0212      	lsls	r2, r2, #8
 800573c:	4311      	orrs	r1, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005742:	0852      	lsrs	r2, r2, #1
 8005744:	3a01      	subs	r2, #1
 8005746:	0552      	lsls	r2, r2, #21
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800574e:	0852      	lsrs	r2, r2, #1
 8005750:	3a01      	subs	r2, #1
 8005752:	0652      	lsls	r2, r2, #25
 8005754:	4311      	orrs	r1, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800575a:	06d2      	lsls	r2, r2, #27
 800575c:	430a      	orrs	r2, r1
 800575e:	4912      	ldr	r1, [pc, #72]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005760:	4313      	orrs	r3, r2
 8005762:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0f      	ldr	r2, [pc, #60]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800577a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800577c:	f7fc fdd4 	bl	8002328 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fc fdd0 	bl	8002328 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e058      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005796:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <HAL_RCC_OscConfig+0x778>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057a2:	e050      	b.n	8005846 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e04f      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
 80057a8:	40021000 	.word	0x40021000
 80057ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d144      	bne.n	8005846 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057bc:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a23      	ldr	r2, [pc, #140]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 80057c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c8:	4b21      	ldr	r3, [pc, #132]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a20      	ldr	r2, [pc, #128]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 80057ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057d4:	f7fc fda8 	bl	8002328 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fc fda4 	bl	8002328 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e02c      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ee:	4b18      	ldr	r3, [pc, #96]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0x7ac>
 80057fa:	e024      	b.n	8005846 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d01f      	beq.n	8005842 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 8005808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580e:	f7fc fd8b 	bl	8002328 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005816:	f7fc fd87 	bl	8002328 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e00f      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005828:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f0      	bne.n	8005816 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	4905      	ldr	r1, [pc, #20]	; (8005850 <HAL_RCC_OscConfig+0x820>)
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_RCC_OscConfig+0x824>)
 800583c:	4013      	ands	r3, r2
 800583e:	60cb      	str	r3, [r1, #12]
 8005840:	e001      	b.n	8005846 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000
 8005854:	feeefffc 	.word	0xfeeefffc

08005858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0e7      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b75      	ldr	r3, [pc, #468]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d910      	bls.n	800589c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b72      	ldr	r3, [pc, #456]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 0207 	bic.w	r2, r3, #7
 8005882:	4970      	ldr	r1, [pc, #448]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b6e      	ldr	r3, [pc, #440]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0cf      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	4b66      	ldr	r3, [pc, #408]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d908      	bls.n	80058ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b8:	4b63      	ldr	r3, [pc, #396]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4960      	ldr	r1, [pc, #384]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d04c      	beq.n	8005970 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	4b5a      	ldr	r3, [pc, #360]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d121      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0a6      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d107      	bne.n	8005906 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058f6:	4b54      	ldr	r3, [pc, #336]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d115      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e09a      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800590e:	4b4e      	ldr	r3, [pc, #312]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e08e      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800591e:	4b4a      	ldr	r3, [pc, #296]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e086      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800592e:	4b46      	ldr	r3, [pc, #280]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 0203 	bic.w	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4943      	ldr	r1, [pc, #268]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005940:	f7fc fcf2 	bl	8002328 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005946:	e00a      	b.n	800595e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005948:	f7fc fcee 	bl	8002328 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e06e      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595e:	4b3a      	ldr	r3, [pc, #232]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 020c 	and.w	r2, r3, #12
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	429a      	cmp	r2, r3
 800596e:	d1eb      	bne.n	8005948 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	429a      	cmp	r2, r3
 800598a:	d208      	bcs.n	800599e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	492b      	ldr	r1, [pc, #172]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800599e:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d210      	bcs.n	80059ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ac:	4b25      	ldr	r3, [pc, #148]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 0207 	bic.w	r2, r3, #7
 80059b4:	4923      	ldr	r1, [pc, #140]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059bc:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <HAL_RCC_ClockConfig+0x1ec>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d001      	beq.n	80059ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e036      	b.n	8005a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4918      	ldr	r1, [pc, #96]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d009      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4910      	ldr	r1, [pc, #64]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a0c:	f000 f824 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <HAL_RCC_ClockConfig+0x1f0>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	490b      	ldr	r1, [pc, #44]	; (8005a4c <HAL_RCC_ClockConfig+0x1f4>)
 8005a1e:	5ccb      	ldrb	r3, [r1, r3]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <HAL_RCC_ClockConfig+0x1f8>)
 8005a2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <HAL_RCC_ClockConfig+0x1fc>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fc fc29 	bl	8002288 <HAL_InitTick>
 8005a36:	4603      	mov	r3, r0
 8005a38:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40022000 	.word	0x40022000
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	08007434 	.word	0x08007434
 8005a50:	2000047c 	.word	0x2000047c
 8005a54:	20000480 	.word	0x20000480

08005a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	; 0x24
 8005a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a66:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a70:	4b3b      	ldr	r3, [pc, #236]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x34>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d121      	bne.n	8005aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d11e      	bne.n	8005aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a8c:	4b34      	ldr	r3, [pc, #208]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a98:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a9e:	0a1b      	lsrs	r3, r3, #8
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e005      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ad0:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	e004      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005adc:	4b23      	ldr	r3, [pc, #140]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d134      	bne.n	8005b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ae6:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d003      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0xa6>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d003      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0xac>
 8005afc:	e005      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005afe:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b00:	617b      	str	r3, [r7, #20]
      break;
 8005b02:	e005      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8005b06:	617b      	str	r3, [r7, #20]
      break;
 8005b08:	e002      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	617b      	str	r3, [r7, #20]
      break;
 8005b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b10:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	fb03 f202 	mul.w	r2, r3, r2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b36:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	0e5b      	lsrs	r3, r3, #25
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	3301      	adds	r3, #1
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b50:	69bb      	ldr	r3, [r7, #24]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3724      	adds	r7, #36	; 0x24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000
 8005b64:	0800744c 	.word	0x0800744c
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	007a1200 	.word	0x007a1200

08005b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b76:	681b      	ldr	r3, [r3, #0]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000047c 	.word	0x2000047c

08005b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b8c:	f7ff fff0 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	4904      	ldr	r1, [pc, #16]	; (8005bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	08007444 	.word	0x08007444

08005bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bb8:	f7ff ffda 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	0adb      	lsrs	r3, r3, #11
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	08007444 	.word	0x08007444

08005be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bf8:	f7ff f9b6 	bl	8004f68 <HAL_PWREx_GetVoltageRange>
 8005bfc:	6178      	str	r0, [r7, #20]
 8005bfe:	e014      	b.n	8005c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c0c:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c18:	f7ff f9a6 	bl	8004f68 <HAL_PWREx_GetVoltageRange>
 8005c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c1e:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c30:	d10b      	bne.n	8005c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b80      	cmp	r3, #128	; 0x80
 8005c36:	d919      	bls.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8005c3c:	d902      	bls.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c3e:	2302      	movs	r3, #2
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e013      	b.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c44:	2301      	movs	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	e010      	b.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b80      	cmp	r3, #128	; 0x80
 8005c4e:	d902      	bls.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c50:	2303      	movs	r3, #3
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	e00a      	b.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	d102      	bne.n	8005c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	e004      	b.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b70      	cmp	r3, #112	; 0x70
 8005c66:	d101      	bne.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c68:	2301      	movs	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f023 0207 	bic.w	r2, r3, #7
 8005c74:	4909      	ldr	r1, [pc, #36]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d001      	beq.n	8005c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40022000 	.word	0x40022000

08005ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ca8:	2300      	movs	r3, #0
 8005caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cac:	2300      	movs	r3, #0
 8005cae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d031      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cc4:	d01a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005cc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cca:	d814      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005cd6:	4b5d      	ldr	r3, [pc, #372]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4a5c      	ldr	r2, [pc, #368]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce2:	e00c      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f9ce 	bl	800608c <RCCEx_PLLSAI1_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	74fb      	strb	r3, [r7, #19]
      break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfe:	7cfb      	ldrb	r3, [r7, #19]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d04:	4b51      	ldr	r3, [pc, #324]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	494e      	ldr	r1, [pc, #312]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d1a:	e001      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 809e 	beq.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d32:	4b46      	ldr	r3, [pc, #280]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	4b40      	ldr	r3, [pc, #256]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	4a3f      	ldr	r2, [pc, #252]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d52:	6593      	str	r3, [r2, #88]	; 0x58
 8005d54:	4b3d      	ldr	r3, [pc, #244]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d60:	2301      	movs	r3, #1
 8005d62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d64:	4b3a      	ldr	r3, [pc, #232]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a39      	ldr	r2, [pc, #228]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d70:	f7fc fada 	bl	8002328 <HAL_GetTick>
 8005d74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d76:	e009      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fc fad6 	bl	8002328 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d902      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	74fb      	strb	r3, [r7, #19]
        break;
 8005d8a:	e005      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d8c:	4b30      	ldr	r3, [pc, #192]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ef      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d15a      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d9e:	4b2b      	ldr	r3, [pc, #172]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01e      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d019      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dc6:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005de6:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fc fa96 	bl	8002328 <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fc fa92 	bl	8002328 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d902      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	74fb      	strb	r3, [r7, #19]
            break;
 8005e16:	e006      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0ec      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005e26:	7cfb      	ldrb	r3, [r7, #19]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	4904      	ldr	r1, [pc, #16]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e42:	e009      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	74bb      	strb	r3, [r7, #18]
 8005e48:	e006      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005e4a:	bf00      	nop
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	7cfb      	ldrb	r3, [r7, #19]
 8005e56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e58:	7c7b      	ldrb	r3, [r7, #17]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d105      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5e:	4b8a      	ldr	r3, [pc, #552]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	4a89      	ldr	r2, [pc, #548]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e76:	4b84      	ldr	r3, [pc, #528]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f023 0203 	bic.w	r2, r3, #3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	4980      	ldr	r1, [pc, #512]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e98:	4b7b      	ldr	r3, [pc, #492]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	f023 020c 	bic.w	r2, r3, #12
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	4978      	ldr	r1, [pc, #480]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eba:	4b73      	ldr	r3, [pc, #460]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	496f      	ldr	r1, [pc, #444]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005edc:	4b6a      	ldr	r3, [pc, #424]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	4967      	ldr	r1, [pc, #412]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005efe:	4b62      	ldr	r3, [pc, #392]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	495e      	ldr	r1, [pc, #376]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f20:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	4956      	ldr	r1, [pc, #344]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f42:	4b51      	ldr	r3, [pc, #324]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	494d      	ldr	r1, [pc, #308]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d028      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f64:	4b48      	ldr	r3, [pc, #288]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	4945      	ldr	r1, [pc, #276]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f82:	d106      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f84:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8e:	60d3      	str	r3, [r2, #12]
 8005f90:	e011      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f9a:	d10c      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f872 	bl	800608c <RCCEx_PLLSAI1_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d028      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc2:	4b31      	ldr	r3, [pc, #196]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	492d      	ldr	r1, [pc, #180]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe2:	4b29      	ldr	r3, [pc, #164]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4a28      	ldr	r2, [pc, #160]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fec:	60d3      	str	r3, [r2, #12]
 8005fee:	e011      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2101      	movs	r1, #1
 8006000:	4618      	mov	r0, r3
 8006002:	f000 f843 	bl	800608c <RCCEx_PLLSAI1_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800600a:	7cfb      	ldrb	r3, [r7, #19]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006010:	7cfb      	ldrb	r3, [r7, #19]
 8006012:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01c      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602e:	4916      	ldr	r1, [pc, #88]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800603e:	d10c      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	2102      	movs	r1, #2
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f820 	bl	800608c <RCCEx_PLLSAI1_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006050:	7cfb      	ldrb	r3, [r7, #19]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006066:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	4904      	ldr	r1, [pc, #16]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800607c:	7cbb      	ldrb	r3, [r7, #18]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000

0800608c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800609a:	4b74      	ldr	r3, [pc, #464]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d018      	beq.n	80060d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060a6:	4b71      	ldr	r3, [pc, #452]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0203 	and.w	r2, r3, #3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d10d      	bne.n	80060d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
       ||
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060be:	4b6b      	ldr	r3, [pc, #428]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
       ||
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d047      	beq.n	8006162 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e044      	b.n	8006162 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d018      	beq.n	8006112 <RCCEx_PLLSAI1_Config+0x86>
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d825      	bhi.n	8006130 <RCCEx_PLLSAI1_Config+0xa4>
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d002      	beq.n	80060ee <RCCEx_PLLSAI1_Config+0x62>
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d009      	beq.n	8006100 <RCCEx_PLLSAI1_Config+0x74>
 80060ec:	e020      	b.n	8006130 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060ee:	4b5f      	ldr	r3, [pc, #380]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11d      	bne.n	8006136 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060fe:	e01a      	b.n	8006136 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006100:	4b5a      	ldr	r3, [pc, #360]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006108:	2b00      	cmp	r3, #0
 800610a:	d116      	bne.n	800613a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006110:	e013      	b.n	800613a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006112:	4b56      	ldr	r3, [pc, #344]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800611e:	4b53      	ldr	r3, [pc, #332]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800612e:	e006      	b.n	800613e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
      break;
 8006134:	e004      	b.n	8006140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006136:	bf00      	nop
 8006138:	e002      	b.n	8006140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800613e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006146:	4b49      	ldr	r3, [pc, #292]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	3b01      	subs	r3, #1
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	430b      	orrs	r3, r1
 800615c:	4943      	ldr	r1, [pc, #268]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 800615e:	4313      	orrs	r3, r2
 8006160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d17c      	bne.n	8006262 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006168:	4b40      	ldr	r3, [pc, #256]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a3f      	ldr	r2, [pc, #252]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 800616e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006174:	f7fc f8d8 	bl	8002328 <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800617a:	e009      	b.n	8006190 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800617c:	f7fc f8d4 	bl	8002328 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d902      	bls.n	8006190 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
        break;
 800618e:	e005      	b.n	800619c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006190:	4b36      	ldr	r3, [pc, #216]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ef      	bne.n	800617c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d15f      	bne.n	8006262 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d110      	bne.n	80061ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061a8:	4b30      	ldr	r3, [pc, #192]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6892      	ldr	r2, [r2, #8]
 80061b8:	0211      	lsls	r1, r2, #8
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	68d2      	ldr	r2, [r2, #12]
 80061be:	06d2      	lsls	r2, r2, #27
 80061c0:	430a      	orrs	r2, r1
 80061c2:	492a      	ldr	r1, [pc, #168]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	610b      	str	r3, [r1, #16]
 80061c8:	e027      	b.n	800621a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d112      	bne.n	80061f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061d0:	4b26      	ldr	r3, [pc, #152]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	0211      	lsls	r1, r2, #8
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6912      	ldr	r2, [r2, #16]
 80061e6:	0852      	lsrs	r2, r2, #1
 80061e8:	3a01      	subs	r2, #1
 80061ea:	0552      	lsls	r2, r2, #21
 80061ec:	430a      	orrs	r2, r1
 80061ee:	491f      	ldr	r1, [pc, #124]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	610b      	str	r3, [r1, #16]
 80061f4:	e011      	b.n	800621a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6892      	ldr	r2, [r2, #8]
 8006206:	0211      	lsls	r1, r2, #8
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6952      	ldr	r2, [r2, #20]
 800620c:	0852      	lsrs	r2, r2, #1
 800620e:	3a01      	subs	r2, #1
 8006210:	0652      	lsls	r2, r2, #25
 8006212:	430a      	orrs	r2, r1
 8006214:	4915      	ldr	r1, [pc, #84]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800621a:	4b14      	ldr	r3, [pc, #80]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a13      	ldr	r2, [pc, #76]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006224:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006226:	f7fc f87f 	bl	8002328 <HAL_GetTick>
 800622a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800622c:	e009      	b.n	8006242 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800622e:	f7fc f87b 	bl	8002328 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d902      	bls.n	8006242 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	73fb      	strb	r3, [r7, #15]
          break;
 8006240:	e005      	b.n	800624e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ef      	beq.n	800622e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <RCCEx_PLLSAI1_Config+0x1e0>)
 800625e:	4313      	orrs	r3, r2
 8006260:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006262:	7bfb      	ldrb	r3, [r7, #15]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40021000 	.word	0x40021000

08006270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e049      	b.n	8006316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fb fed2 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f000 fac0 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a1a      	ldr	r2, [r3, #32]
 800632c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10f      	bne.n	8006356 <HAL_TIM_Base_Stop+0x38>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	f240 4344 	movw	r3, #1092	; 0x444
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d107      	bne.n	8006356 <HAL_TIM_Base_Stop+0x38>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d001      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e03b      	b.n	80063fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a19      	ldr	r2, [pc, #100]	; (8006408 <HAL_TIM_Base_Start_IT+0x9c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_TIM_Base_Start_IT+0x4e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ae:	d004      	beq.n	80063ba <HAL_TIM_Base_Start_IT+0x4e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_TIM_Base_Start_IT+0xa0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d115      	bne.n	80063e6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <HAL_TIM_Base_Start_IT+0xa4>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b06      	cmp	r3, #6
 80063ca:	d015      	beq.n	80063f8 <HAL_TIM_Base_Start_IT+0x8c>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d2:	d011      	beq.n	80063f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e4:	e008      	b.n	80063f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e000      	b.n	80063fa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40014000 	.word	0x40014000
 8006410:	00010007 	.word	0x00010007

08006414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d122      	bne.n	8006470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0202 	mvn.w	r2, #2
 8006440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9ce 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9c0 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f9d1 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0204 	mvn.w	r2, #4
 8006494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9a4 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f996 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9a7 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0208 	mvn.w	r2, #8
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2204      	movs	r2, #4
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f97a 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f96c 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f97d 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0310 	and.w	r3, r3, #16
 8006522:	2b10      	cmp	r3, #16
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b10      	cmp	r3, #16
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0210 	mvn.w	r2, #16
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2208      	movs	r2, #8
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f950 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f942 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f953 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10e      	bne.n	8006598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d107      	bne.n	8006598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0201 	mvn.w	r2, #1
 8006590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fb fbd0 	bl	8001d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d10e      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b80      	cmp	r3, #128	; 0x80
 80065b2:	d107      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 faa6 	bl	8006b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d2:	d10e      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b80      	cmp	r3, #128	; 0x80
 80065e0:	d107      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa99 	bl	8006b24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d10e      	bne.n	800661e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d107      	bne.n	800661e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f901 	bl	8006820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b20      	cmp	r3, #32
 800662a:	d10e      	bne.n	800664a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d107      	bne.n	800664a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0220 	mvn.w	r2, #32
 8006642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa59 	bl	8006afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIM_ConfigClockSource+0x1c>
 800666a:	2302      	movs	r3, #2
 800666c:	e0b6      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x18a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006690:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006698:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	d03e      	beq.n	800672a <HAL_TIM_ConfigClockSource+0xd8>
 80066ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b0:	f200 8087 	bhi.w	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b8:	f000 8086 	beq.w	80067c8 <HAL_TIM_ConfigClockSource+0x176>
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c0:	d87f      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066c2:	2b70      	cmp	r3, #112	; 0x70
 80066c4:	d01a      	beq.n	80066fc <HAL_TIM_ConfigClockSource+0xaa>
 80066c6:	2b70      	cmp	r3, #112	; 0x70
 80066c8:	d87b      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066ca:	2b60      	cmp	r3, #96	; 0x60
 80066cc:	d050      	beq.n	8006770 <HAL_TIM_ConfigClockSource+0x11e>
 80066ce:	2b60      	cmp	r3, #96	; 0x60
 80066d0:	d877      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066d2:	2b50      	cmp	r3, #80	; 0x50
 80066d4:	d03c      	beq.n	8006750 <HAL_TIM_ConfigClockSource+0xfe>
 80066d6:	2b50      	cmp	r3, #80	; 0x50
 80066d8:	d873      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d058      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0x13e>
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d86f      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066e2:	2b30      	cmp	r3, #48	; 0x30
 80066e4:	d064      	beq.n	80067b0 <HAL_TIM_ConfigClockSource+0x15e>
 80066e6:	2b30      	cmp	r3, #48	; 0x30
 80066e8:	d86b      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d060      	beq.n	80067b0 <HAL_TIM_ConfigClockSource+0x15e>
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d867      	bhi.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d05c      	beq.n	80067b0 <HAL_TIM_ConfigClockSource+0x15e>
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d05a      	beq.n	80067b0 <HAL_TIM_ConfigClockSource+0x15e>
 80066fa:	e062      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800670c:	f000 f970 	bl	80069f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800671e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	609a      	str	r2, [r3, #8]
      break;
 8006728:	e04f      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800673a:	f000 f959 	bl	80069f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800674c:	609a      	str	r2, [r3, #8]
      break;
 800674e:	e03c      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675c:	461a      	mov	r2, r3
 800675e:	f000 f8cd 	bl	80068fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2150      	movs	r1, #80	; 0x50
 8006768:	4618      	mov	r0, r3
 800676a:	f000 f926 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 800676e:	e02c      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800677c:	461a      	mov	r2, r3
 800677e:	f000 f8ec 	bl	800695a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2160      	movs	r1, #96	; 0x60
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f916 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 800678e:	e01c      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800679c:	461a      	mov	r2, r3
 800679e:	f000 f8ad 	bl	80068fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2140      	movs	r1, #64	; 0x40
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 f906 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 80067ae:	e00c      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f000 f8fd 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 80067c0:	e003      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
      break;
 80067c6:	e000      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80067c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <TIM_Base_SetConfig+0xbc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0x20>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006852:	d108      	bne.n	8006866 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_Base_SetConfig+0xbc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_Base_SetConfig+0x52>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006874:	d007      	beq.n	8006886 <TIM_Base_SetConfig+0x52>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <TIM_Base_SetConfig+0xc0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_Base_SetConfig+0x52>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1d      	ldr	r2, [pc, #116]	; (80068f8 <TIM_Base_SetConfig+0xc4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d108      	bne.n	8006898 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a0c      	ldr	r2, [pc, #48]	; (80068f0 <TIM_Base_SetConfig+0xbc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0xa0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <TIM_Base_SetConfig+0xc0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0xa0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <TIM_Base_SetConfig+0xc4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40014000 	.word	0x40014000
 80068f8:	40014400 	.word	0x40014400

080068fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 030a 	bic.w	r3, r3, #10
 8006938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695a:	b480      	push	{r7}
 800695c:	b087      	sub	sp, #28
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f023 0210 	bic.w	r2, r3, #16
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	031b      	lsls	r3, r3, #12
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f043 0307 	orr.w	r3, r3, #7
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	609a      	str	r2, [r3, #8]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	021a      	lsls	r2, r3, #8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e04f      	b.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d108      	bne.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d10c      	bne.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40014000 	.word	0x40014000

08006afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e040      	b.n	8006bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fb fa96 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2224      	movs	r2, #36	; 0x24
 8006b64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f82c 	bl	8006bd4 <UART_SetConfig>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e022      	b.n	8006bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa4c 	bl	800702c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fad3 	bl	8007170 <UART_CheckIdleState>
 8006bca:	4603      	mov	r3, r0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd8:	b08a      	sub	sp, #40	; 0x28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4bb4      	ldr	r3, [pc, #720]	; (8006ed4 <UART_SetConfig+0x300>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4aa9      	ldr	r2, [pc, #676]	; (8006ed8 <UART_SetConfig+0x304>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c50:	430a      	orrs	r2, r1
 8006c52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4aa0      	ldr	r2, [pc, #640]	; (8006edc <UART_SetConfig+0x308>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d126      	bne.n	8006cac <UART_SetConfig+0xd8>
 8006c5e:	4ba0      	ldr	r3, [pc, #640]	; (8006ee0 <UART_SetConfig+0x30c>)
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d81b      	bhi.n	8006ca4 <UART_SetConfig+0xd0>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <UART_SetConfig+0xa0>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c95 	.word	0x08006c95
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006c9d 	.word	0x08006c9d
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8a:	e080      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c92:	e07c      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006c94:	2304      	movs	r3, #4
 8006c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9a:	e078      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca2:	e074      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006caa:	e070      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a8c      	ldr	r2, [pc, #560]	; (8006ee4 <UART_SetConfig+0x310>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d138      	bne.n	8006d28 <UART_SetConfig+0x154>
 8006cb6:	4b8a      	ldr	r3, [pc, #552]	; (8006ee0 <UART_SetConfig+0x30c>)
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbc:	f003 030c 	and.w	r3, r3, #12
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d82d      	bhi.n	8006d20 <UART_SetConfig+0x14c>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <UART_SetConfig+0xf8>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d21 	.word	0x08006d21
 8006cd4:	08006d21 	.word	0x08006d21
 8006cd8:	08006d21 	.word	0x08006d21
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d21 	.word	0x08006d21
 8006ce4:	08006d21 	.word	0x08006d21
 8006ce8:	08006d21 	.word	0x08006d21
 8006cec:	08006d09 	.word	0x08006d09
 8006cf0:	08006d21 	.word	0x08006d21
 8006cf4:	08006d21 	.word	0x08006d21
 8006cf8:	08006d21 	.word	0x08006d21
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e042      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0e:	e03e      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d16:	e03a      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e036      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	e032      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a6a      	ldr	r2, [pc, #424]	; (8006ed8 <UART_SetConfig+0x304>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d12a      	bne.n	8006d88 <UART_SetConfig+0x1b4>
 8006d32:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <UART_SetConfig+0x30c>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d40:	d01a      	beq.n	8006d78 <UART_SetConfig+0x1a4>
 8006d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d46:	d81b      	bhi.n	8006d80 <UART_SetConfig+0x1ac>
 8006d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d4c:	d00c      	beq.n	8006d68 <UART_SetConfig+0x194>
 8006d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d52:	d815      	bhi.n	8006d80 <UART_SetConfig+0x1ac>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <UART_SetConfig+0x18c>
 8006d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5c:	d008      	beq.n	8006d70 <UART_SetConfig+0x19c>
 8006d5e:	e00f      	b.n	8006d80 <UART_SetConfig+0x1ac>
 8006d60:	2300      	movs	r3, #0
 8006d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d66:	e012      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6e:	e00e      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d70:	2304      	movs	r3, #4
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d76:	e00a      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d78:	2308      	movs	r3, #8
 8006d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7e:	e006      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d80:	2310      	movs	r3, #16
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d86:	e002      	b.n	8006d8e <UART_SetConfig+0x1ba>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a51      	ldr	r2, [pc, #324]	; (8006ed8 <UART_SetConfig+0x304>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d17a      	bne.n	8006e8e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d824      	bhi.n	8006dea <UART_SetConfig+0x216>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x1d4>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006deb 	.word	0x08006deb
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006ddb 	.word	0x08006ddb
 8006dbc:	08006deb 	.word	0x08006deb
 8006dc0:	08006deb 	.word	0x08006deb
 8006dc4:	08006deb 	.word	0x08006deb
 8006dc8:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dcc:	f7fe fedc 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8006dd0:	61f8      	str	r0, [r7, #28]
        break;
 8006dd2:	e010      	b.n	8006df6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b44      	ldr	r3, [pc, #272]	; (8006ee8 <UART_SetConfig+0x314>)
 8006dd6:	61fb      	str	r3, [r7, #28]
        break;
 8006dd8:	e00d      	b.n	8006df6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fe fe3d 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8006dde:	61f8      	str	r0, [r7, #28]
        break;
 8006de0:	e009      	b.n	8006df6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de6:	61fb      	str	r3, [r7, #28]
        break;
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006df4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8107 	beq.w	800700c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	4413      	add	r3, r2
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d305      	bcc.n	8006e1a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d903      	bls.n	8006e22 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e20:	e0f4      	b.n	800700c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	2200      	movs	r2, #0
 8006e26:	461c      	mov	r4, r3
 8006e28:	4615      	mov	r5, r2
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	022b      	lsls	r3, r5, #8
 8006e34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e38:	0222      	lsls	r2, r4, #8
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	6849      	ldr	r1, [r1, #4]
 8006e3e:	0849      	lsrs	r1, r1, #1
 8006e40:	2000      	movs	r0, #0
 8006e42:	4688      	mov	r8, r1
 8006e44:	4681      	mov	r9, r0
 8006e46:	eb12 0a08 	adds.w	sl, r2, r8
 8006e4a:	eb43 0b09 	adc.w	fp, r3, r9
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	4659      	mov	r1, fp
 8006e60:	f7f9 f9b4 	bl	80001cc <__aeabi_uldivmod>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4613      	mov	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e72:	d308      	bcc.n	8006e86 <UART_SetConfig+0x2b2>
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e7a:	d204      	bcs.n	8006e86 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	60da      	str	r2, [r3, #12]
 8006e84:	e0c2      	b.n	800700c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e8c:	e0be      	b.n	800700c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e96:	d16a      	bne.n	8006f6e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d834      	bhi.n	8006f0a <UART_SetConfig+0x336>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x2d4>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006eed 	.word	0x08006eed
 8006eb0:	08006ef5 	.word	0x08006ef5
 8006eb4:	08006f0b 	.word	0x08006f0b
 8006eb8:	08006efb 	.word	0x08006efb
 8006ebc:	08006f0b 	.word	0x08006f0b
 8006ec0:	08006f0b 	.word	0x08006f0b
 8006ec4:	08006f0b 	.word	0x08006f0b
 8006ec8:	08006f03 	.word	0x08006f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fe fe5c 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	61f8      	str	r0, [r7, #28]
        break;
 8006ed2:	e020      	b.n	8006f16 <UART_SetConfig+0x342>
 8006ed4:	efff69f3 	.word	0xefff69f3
 8006ed8:	40008000 	.word	0x40008000
 8006edc:	40013800 	.word	0x40013800
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	40004400 	.word	0x40004400
 8006ee8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eec:	f7fe fe62 	bl	8005bb4 <HAL_RCC_GetPCLK2Freq>
 8006ef0:	61f8      	str	r0, [r7, #28]
        break;
 8006ef2:	e010      	b.n	8006f16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef4:	4b4c      	ldr	r3, [pc, #304]	; (8007028 <UART_SetConfig+0x454>)
 8006ef6:	61fb      	str	r3, [r7, #28]
        break;
 8006ef8:	e00d      	b.n	8006f16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efa:	f7fe fdad 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8006efe:	61f8      	str	r0, [r7, #28]
        break;
 8006f00:	e009      	b.n	8006f16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f06:	61fb      	str	r3, [r7, #28]
        break;
 8006f08:	e005      	b.n	8006f16 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d077      	beq.n	800700c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	005a      	lsls	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	441a      	add	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b0f      	cmp	r3, #15
 8006f36:	d916      	bls.n	8006f66 <UART_SetConfig+0x392>
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3e:	d212      	bcs.n	8006f66 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f023 030f 	bic.w	r3, r3, #15
 8006f48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	8afb      	ldrh	r3, [r7, #22]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	8afa      	ldrh	r2, [r7, #22]
 8006f62:	60da      	str	r2, [r3, #12]
 8006f64:	e052      	b.n	800700c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f6c:	e04e      	b.n	800700c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d827      	bhi.n	8006fc6 <UART_SetConfig+0x3f2>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x3a8>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fe fdf2 	bl	8005b88 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	61f8      	str	r0, [r7, #28]
        break;
 8006fa6:	e014      	b.n	8006fd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fe fe04 	bl	8005bb4 <HAL_RCC_GetPCLK2Freq>
 8006fac:	61f8      	str	r0, [r7, #28]
        break;
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <UART_SetConfig+0x454>)
 8006fb2:	61fb      	str	r3, [r7, #28]
        break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fe fd4f 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8006fba:	61f8      	str	r0, [r7, #28]
        break;
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	61fb      	str	r3, [r7, #28]
        break;
 8006fc4:	e005      	b.n	8006fd2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d019      	beq.n	800700c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	085a      	lsrs	r2, r3, #1
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b0f      	cmp	r3, #15
 8006ff0:	d909      	bls.n	8007006 <UART_SetConfig+0x432>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d205      	bcs.n	8007006 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60da      	str	r2, [r3, #12]
 8007004:	e002      	b.n	800700c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007018:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800701c:	4618      	mov	r0, r3
 800701e:	3728      	adds	r7, #40	; 0x28
 8007020:	46bd      	mov	sp, r7
 8007022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007026:	bf00      	nop
 8007028:	00f42400 	.word	0x00f42400

0800702c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01a      	beq.n	8007142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712a:	d10a      	bne.n	8007142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af02      	add	r7, sp, #8
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007180:	f7fb f8d2 	bl	8002328 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d10e      	bne.n	80071b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f82d 	bl	8007202 <UART_WaitOnFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e023      	b.n	80071fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d10e      	bne.n	80071de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f817 	bl	8007202 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e00d      	b.n	80071fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b09c      	sub	sp, #112	; 0x70
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	603b      	str	r3, [r7, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007212:	e0a5      	b.n	8007360 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	f000 80a1 	beq.w	8007360 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721e:	f7fb f883 	bl	8002328 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800722a:	429a      	cmp	r2, r3
 800722c:	d302      	bcc.n	8007234 <UART_WaitOnFlagUntilTimeout+0x32>
 800722e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007230:	2b00      	cmp	r3, #0
 8007232:	d13e      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007248:	667b      	str	r3, [r7, #100]	; 0x64
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007254:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007258:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e6      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	663b      	str	r3, [r7, #96]	; 0x60
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007286:	64ba      	str	r2, [r7, #72]	; 0x48
 8007288:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800728c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e5      	bne.n	8007266 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2220      	movs	r2, #32
 80072a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e067      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d04f      	beq.n	8007360 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ce:	d147      	bne.n	8007360 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
 80072fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e6      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	613b      	str	r3, [r7, #16]
   return(result);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	66bb      	str	r3, [r7, #104]	; 0x68
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800732c:	623a      	str	r2, [r7, #32]
 800732e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	69f9      	ldr	r1, [r7, #28]
 8007332:	6a3a      	ldr	r2, [r7, #32]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	61bb      	str	r3, [r7, #24]
   return(result);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e010      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69da      	ldr	r2, [r3, #28]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4013      	ands	r3, r2
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	429a      	cmp	r2, r3
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	429a      	cmp	r2, r3
 800737c:	f43f af4a 	beq.w	8007214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3770      	adds	r7, #112	; 0x70
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <memset>:
 800738a:	4402      	add	r2, r0
 800738c:	4603      	mov	r3, r0
 800738e:	4293      	cmp	r3, r2
 8007390:	d100      	bne.n	8007394 <memset+0xa>
 8007392:	4770      	bx	lr
 8007394:	f803 1b01 	strb.w	r1, [r3], #1
 8007398:	e7f9      	b.n	800738e <memset+0x4>
	...

0800739c <__libc_init_array>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4d0d      	ldr	r5, [pc, #52]	; (80073d4 <__libc_init_array+0x38>)
 80073a0:	4c0d      	ldr	r4, [pc, #52]	; (80073d8 <__libc_init_array+0x3c>)
 80073a2:	1b64      	subs	r4, r4, r5
 80073a4:	10a4      	asrs	r4, r4, #2
 80073a6:	2600      	movs	r6, #0
 80073a8:	42a6      	cmp	r6, r4
 80073aa:	d109      	bne.n	80073c0 <__libc_init_array+0x24>
 80073ac:	4d0b      	ldr	r5, [pc, #44]	; (80073dc <__libc_init_array+0x40>)
 80073ae:	4c0c      	ldr	r4, [pc, #48]	; (80073e0 <__libc_init_array+0x44>)
 80073b0:	f000 f818 	bl	80073e4 <_init>
 80073b4:	1b64      	subs	r4, r4, r5
 80073b6:	10a4      	asrs	r4, r4, #2
 80073b8:	2600      	movs	r6, #0
 80073ba:	42a6      	cmp	r6, r4
 80073bc:	d105      	bne.n	80073ca <__libc_init_array+0x2e>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c4:	4798      	blx	r3
 80073c6:	3601      	adds	r6, #1
 80073c8:	e7ee      	b.n	80073a8 <__libc_init_array+0xc>
 80073ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ce:	4798      	blx	r3
 80073d0:	3601      	adds	r6, #1
 80073d2:	e7f2      	b.n	80073ba <__libc_init_array+0x1e>
 80073d4:	08007484 	.word	0x08007484
 80073d8:	08007484 	.word	0x08007484
 80073dc:	08007484 	.word	0x08007484
 80073e0:	08007488 	.word	0x08007488

080073e4 <_init>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr

080073f0 <_fini>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr
